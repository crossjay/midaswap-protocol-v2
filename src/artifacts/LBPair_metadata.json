{
	"compiler": {
		"version": "0.8.10+commit.fc410830"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [
					{
						"internalType": "contract ILBFactory",
						"name": "_factory",
						"type": "address"
					}
				],
				"stateMutability": "nonpayable",
				"type": "constructor"
			},
			{
				"inputs": [],
				"name": "BinHelper__IdOverflows",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "LBPair__AddressZero",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "LBPair__AddressZeroOrThis",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "LBPair__AlreadyInitialized",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "id",
						"type": "uint256"
					}
				],
				"name": "LBPair__CompositionFactorFlawed",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "LBPair__DistributionsOverflow",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "LBPair__InsufficientAmounts",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "id",
						"type": "uint256"
					}
				],
				"name": "LBPair__InsufficientLiquidityBurned",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "id",
						"type": "uint256"
					}
				],
				"name": "LBPair__InsufficientLiquidityMinted",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "LBPair__OnlyFactory",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "feeRecipient",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "sender",
						"type": "address"
					}
				],
				"name": "LBPair__OnlyFeeRecipient",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "LBPair__OnlyStrictlyIncreasingId",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "LBPair__WrongLengths",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "from",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "id",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "LBToken__BurnExceedsBalance",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "LBToken__BurnFromAddress0",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "accountsLength",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "idsLength",
						"type": "uint256"
					}
				],
				"name": "LBToken__LengthMismatch",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "LBToken__MintToAddress0",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "owner",
						"type": "address"
					}
				],
				"name": "LBToken__SelfApproval",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "owner",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "spender",
						"type": "address"
					}
				],
				"name": "LBToken__SpenderNotApproved",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "from",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "id",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "LBToken__TransferExceedsBalance",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "LBToken__TransferFromOrToAddress0",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "LBToken__TransferToSelf",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "x",
						"type": "uint256"
					},
					{
						"internalType": "int256",
						"name": "y",
						"type": "int256"
					}
				],
				"name": "Math128x128__PowerUnderflow",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "prod1",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "denominator",
						"type": "uint256"
					}
				],
				"name": "Math512Bits__MulDivOverflow",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "prod1",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "offset",
						"type": "uint256"
					}
				],
				"name": "Math512Bits__MulShiftOverflow",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "offset",
						"type": "uint256"
					}
				],
				"name": "Math512Bits__OffsetOverflows",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "ReentrancyGuardUpgradeable__AlreadyInitialized",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "ReentrancyGuardUpgradeable__ReentrantCall",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "x",
						"type": "uint256"
					}
				],
				"name": "SafeCast__Exceeds112Bits",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "x",
						"type": "uint256"
					}
				],
				"name": "SafeCast__Exceeds128Bits",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "x",
						"type": "uint256"
					}
				],
				"name": "SafeCast__Exceeds24Bits",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "TokenHelper__CallFailed",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "TokenHelper__NonContract",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "TokenHelper__TransferFailed",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "TreeMath__ErrorDepthSearch",
				"type": "error"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "account",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "sender",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "bool",
						"name": "approved",
						"type": "bool"
					}
				],
				"name": "ApprovalForAll",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "sender",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "recipient",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "id",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "feesX",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "feesY",
						"type": "uint256"
					}
				],
				"name": "CompositionFee",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "sender",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "recipient",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "id",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "amountX",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "amountY",
						"type": "uint256"
					}
				],
				"name": "DepositedToBin",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "sender",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "recipient",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "amountX",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "amountY",
						"type": "uint256"
					}
				],
				"name": "FeesCollected",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "previousSize",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "newSize",
						"type": "uint256"
					}
				],
				"name": "OracleSizeIncreased",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "sender",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "recipient",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "amountX",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "amountY",
						"type": "uint256"
					}
				],
				"name": "ProtocolFeesCollected",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "sender",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "recipient",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "id",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "bool",
						"name": "swapForY",
						"type": "bool"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "amountIn",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "amountOut",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "fees",
						"type": "uint256"
					}
				],
				"name": "Swap",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "sender",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "from",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "to",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256[]",
						"name": "ids",
						"type": "uint256[]"
					},
					{
						"indexed": false,
						"internalType": "uint256[]",
						"name": "amounts",
						"type": "uint256[]"
					}
				],
				"name": "TransferBatch",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "sender",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "from",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "to",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "id",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "TransferSingle",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "sender",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "recipient",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "id",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "amountX",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "amountY",
						"type": "uint256"
					}
				],
				"name": "WithdrawnFromBin",
				"type": "event"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_account",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "_id",
						"type": "uint256"
					}
				],
				"name": "balanceOf",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address[]",
						"name": "_accounts",
						"type": "address[]"
					},
					{
						"internalType": "uint256[]",
						"name": "_ids",
						"type": "uint256[]"
					}
				],
				"name": "balanceOfBatch",
				"outputs": [
					{
						"internalType": "uint256[]",
						"name": "batchBalances",
						"type": "uint256[]"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256[]",
						"name": "_ids",
						"type": "uint256[]"
					},
					{
						"internalType": "uint256[]",
						"name": "_amounts",
						"type": "uint256[]"
					},
					{
						"internalType": "address",
						"name": "_to",
						"type": "address"
					}
				],
				"name": "burn",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "amountX",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "amountY",
						"type": "uint256"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_account",
						"type": "address"
					},
					{
						"internalType": "uint256[]",
						"name": "_ids",
						"type": "uint256[]"
					}
				],
				"name": "collectFees",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "amountY",
						"type": "uint256"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "collectProtocolFees",
				"outputs": [
					{
						"internalType": "uint128",
						"name": "amountY",
						"type": "uint128"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "factory",
				"outputs": [
					{
						"internalType": "contract ILBFactory",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "feeParameters",
				"outputs": [
					{
						"components": [
							{
								"internalType": "uint128",
								"name": "rate",
								"type": "uint128"
							},
							{
								"internalType": "uint128",
								"name": "protocolShare",
								"type": "uint128"
							}
						],
						"internalType": "struct FeeHelper.FeeParameters",
						"name": "",
						"type": "tuple"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint24",
						"name": "_id",
						"type": "uint24"
					},
					{
						"internalType": "bool",
						"name": "_swapForY",
						"type": "bool"
					}
				],
				"name": "findFirstNonEmptyBinId",
				"outputs": [
					{
						"internalType": "uint24",
						"name": "",
						"type": "uint24"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint24",
						"name": "_id",
						"type": "uint24"
					}
				],
				"name": "getBin",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "reserveX",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "reserveY",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getGlobalFees",
				"outputs": [
					{
						"internalType": "uint128",
						"name": "feesYTotal",
						"type": "uint128"
					},
					{
						"internalType": "uint128",
						"name": "feesYProtocol",
						"type": "uint128"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getReservesAndId",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "reserveX",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "reserveY",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "activeId",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "contract IERC20",
						"name": "_tokenX",
						"type": "address"
					},
					{
						"internalType": "contract IERC20",
						"name": "_tokenY",
						"type": "address"
					},
					{
						"internalType": "uint24",
						"name": "_activeId",
						"type": "uint24"
					}
				],
				"name": "initialize",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_owner",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "_spender",
						"type": "address"
					}
				],
				"name": "isApprovedForAll",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256[]",
						"name": "_ids",
						"type": "uint256[]"
					},
					{
						"internalType": "uint256[]",
						"name": "_amountX",
						"type": "uint256[]"
					},
					{
						"internalType": "uint256[]",
						"name": "_amountY",
						"type": "uint256[]"
					},
					{
						"internalType": "address",
						"name": "_to",
						"type": "address"
					}
				],
				"name": "mint",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					},
					{
						"internalType": "uint256[]",
						"name": "liquidityMinted",
						"type": "uint256[]"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "name",
				"outputs": [
					{
						"internalType": "string",
						"name": "",
						"type": "string"
					}
				],
				"stateMutability": "pure",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_account",
						"type": "address"
					},
					{
						"internalType": "uint256[]",
						"name": "_ids",
						"type": "uint256[]"
					}
				],
				"name": "pendingFees",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "amountY",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_from",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "_to",
						"type": "address"
					},
					{
						"internalType": "uint256[]",
						"name": "_ids",
						"type": "uint256[]"
					},
					{
						"internalType": "uint256[]",
						"name": "_amounts",
						"type": "uint256[]"
					}
				],
				"name": "safeBatchTransferFrom",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_from",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "_to",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "_id",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "_amount",
						"type": "uint256"
					}
				],
				"name": "safeTransferFrom",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_spender",
						"type": "address"
					},
					{
						"internalType": "bool",
						"name": "_approved",
						"type": "bool"
					}
				],
				"name": "setApprovalForAll",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes4",
						"name": "_interfaceId",
						"type": "bytes4"
					}
				],
				"name": "supportsInterface",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bool",
						"name": "_swapForY",
						"type": "bool"
					},
					{
						"internalType": "address",
						"name": "_to",
						"type": "address"
					}
				],
				"name": "swap",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "amountXOut",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "amountYOut",
						"type": "uint256"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "symbol",
				"outputs": [
					{
						"internalType": "string",
						"name": "",
						"type": "string"
					}
				],
				"stateMutability": "pure",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "tokenX",
				"outputs": [
					{
						"internalType": "contract IERC20",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "tokenY",
				"outputs": [
					{
						"internalType": "contract IERC20",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_id",
						"type": "uint256"
					}
				],
				"name": "totalSupply",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			}
		],
		"devdoc": {
			"author": "Trader Joe",
			"kind": "dev",
			"methods": {
				"balanceOf(address,uint256)": {
					"params": {
						"_account": "The address of the owner",
						"_id": "The token id"
					},
					"returns": {
						"_0": "The amount of tokens of type `id` owned by `_account`"
					}
				},
				"balanceOfBatch(address[],uint256[])": {
					"params": {
						"_accounts": "The addresses of the owners",
						"_ids": "The token ids"
					},
					"returns": {
						"batchBalances": "The balance for each (account, id) pair"
					}
				},
				"burn(uint256[],uint256[],address)": {
					"params": {
						"_amounts": "The amounts of LB tokens to burn",
						"_ids": "The ids of the bins from which to remove liquidity",
						"_to": "The address that will receive the tokens"
					},
					"returns": {
						"amountX": "The amount of token X sent to `_to`",
						"amountY": "The amount of token Y sent to `_to`"
					}
				},
				"collectFees(address,uint256[])": {
					"params": {
						"_account": "The address of the user",
						"_ids": "The ids of the bins for which to collect the fees"
					},
					"returns": {
						"amountY": "The amount of token Y collected and sent to `_account`"
					}
				},
				"collectProtocolFees()": {
					"details": "The protocol fees are not set to zero to save gas by not resetting the storage slot.",
					"returns": {
						"amountY": "The amount of token Y collected and sent to the fee recipient"
					}
				},
				"constructor": {
					"params": {
						"_factory": "The address of the factory"
					}
				},
				"feeParameters()": {
					"returns": {
						"_0": "The fee parameters"
					}
				},
				"findFirstNonEmptyBinId(uint24,bool)": {
					"params": {
						"_id": "The bin id",
						"_swapForY": "Whether you've swapping token X for token Y (true) or token Y for token X (false)"
					},
					"returns": {
						"_0": "The id of the non empty bin"
					}
				},
				"getBin(uint24)": {
					"params": {
						"_id": "The bin id"
					},
					"returns": {
						"reserveX": "The reserve of tokenX of the bin",
						"reserveY": "The reserve of tokenY of the bin"
					}
				},
				"getGlobalFees()": {
					"returns": {
						"feesYProtocol": "The protocol fees of tokenY",
						"feesYTotal": "The total fees of tokenY"
					}
				},
				"getReservesAndId()": {
					"returns": {
						"activeId": "The active id of the pair",
						"reserveX": "The reserve of asset X",
						"reserveY": "The reserve of asset Y"
					}
				},
				"initialize(address,address,uint24)": {
					"details": "The different parameters needs to be validated very cautiously It is highly recommended to never call this function directly, use the factory as it validates the different parameters",
					"params": {
						"_activeId": "The active id of the pair",
						"_tokenX": "The address of the tokenX. Can't be address 0",
						"_tokenY": "The address of the tokenY. Can't be address 0"
					}
				},
				"isApprovedForAll(address,address)": {
					"params": {
						"_owner": "The address of the owner",
						"_spender": "The address of the spender"
					},
					"returns": {
						"_0": "True if `spender` is approved to transfer `_account`'s tokens"
					}
				},
				"mint(uint256[],uint256[],uint256[],address)": {
					"details": "Any excess amount of token will be sent to the `to` address. The lengths of the arrays must be the same.",
					"params": {
						"_amountX": "The percentage of token X to add to each bin. The sum of all the values must not exceed 100%, that is 1e18.",
						"_amountY": "The percentage of token Y to add to each bin. The sum of all the values must not exceed 100%, that is 1e18.",
						"_ids": "The ids of the bins where the liquidity will be added. It will mint LB tokens for each of these bins.",
						"_to": "The address that will receive the LB tokens and the excess amount of tokens."
					},
					"returns": {
						"_0": "The amount of token X added to the pair",
						"_1": "The amount of token Y added to the pair",
						"liquidityMinted": "The amounts of LB tokens minted for each bin"
					}
				},
				"name()": {
					"returns": {
						"_0": "The name of the token"
					}
				},
				"pendingFees(address,uint256[])": {
					"details": "The array must be strictly increasing to ensure uniqueness",
					"params": {
						"_account": "The address of the user",
						"_ids": "The list of ids"
					},
					"returns": {
						"amountY": "The amount of tokenY pending"
					}
				},
				"safeBatchTransferFrom(address,address,uint256[],uint256[])": {
					"params": {
						"_amounts": "The list of amounts to send",
						"_from": "The address of the owner of the tokens",
						"_ids": "The list of token ids",
						"_to": "The address of the recipient"
					}
				},
				"safeTransferFrom(address,address,uint256,uint256)": {
					"params": {
						"_amount": "The amount to send",
						"_from": "The address of the owner of the token",
						"_id": "The token id",
						"_to": "The address of the recipient"
					}
				},
				"setApprovalForAll(address,bool)": {
					"params": {
						"_approved": "The boolean value to grant or revoke permission",
						"_spender": "The address of the spender"
					}
				},
				"supportsInterface(bytes4)": {
					"params": {
						"_interfaceId": "The interface identifier"
					},
					"returns": {
						"_0": "Whether the interface is supported (true) or not (false)"
					}
				},
				"swap(bool,address)": {
					"params": {
						"_swapForY": "Whether you've swapping token X for token Y (true) or token Y for token X (false)",
						"_to": "The address to send the tokens to"
					},
					"returns": {
						"amountXOut": "The amount of token X sent to `_to`",
						"amountYOut": "The amount of token Y sent to `_to`"
					}
				},
				"symbol()": {
					"returns": {
						"_0": "The symbol of the token"
					}
				},
				"totalSupply(uint256)": {
					"details": "This is the amount of token of type `id` minted minus the amount burned",
					"params": {
						"_id": "The token id"
					},
					"returns": {
						"_0": "The total supply of that token id"
					}
				}
			},
			"stateVariables": {
				"_accruedDebts": {
					"details": "The mapping from account to id to user's accruedDebt"
				},
				"_bins": {
					"details": "The reserves of tokens for every bin. This is the amount of tokenY if `id < _pairInformation.activeId`; of tokenX if `id > _pairInformation.activeId` and a mix of both if `id == _pairInformation.activeId`"
				},
				"_feeParameters": {
					"details": "The fee parameters that are used to calculate fees"
				},
				"_pairInformation": {
					"details": "The pair information that is used to track reserves, active ids, fees and oracle parameters"
				},
				"_tree": {
					"details": "The tree that is used to find the first bin with non zero liquidity"
				},
				"_unclaimedFees": {
					"details": "The mapping from account to user's unclaimed fees. "
				}
			},
			"title": "Liquidity Book Pair",
			"version": 1
		},
		"userdoc": {
			"errors": {
				"LBPair__InsufficientAmounts()": [
					{
						"notice": "LBPair errors "
					}
				],
				"LBToken__SpenderNotApproved(address,address)": [
					{
						"notice": "LBToken errors "
					}
				],
				"Math128x128__PowerUnderflow(uint256,int256)": [
					{
						"notice": "Math128x128 errors "
					}
				],
				"Math512Bits__MulDivOverflow(uint256,uint256)": [
					{
						"notice": "Math512Bits errors "
					}
				],
				"ReentrancyGuardUpgradeable__ReentrantCall()": [
					{
						"notice": "ReentrancyGuardUpgradeable errors "
					}
				],
				"TokenHelper__NonContract()": [
					{
						"notice": "TokenHelper errors "
					}
				],
				"TreeMath__ErrorDepthSearch()": [
					{
						"notice": "TreeMath errors "
					}
				]
			},
			"kind": "user",
			"methods": {
				"balanceOf(address,uint256)": {
					"notice": "Returns the amount of tokens of type `id` owned by `_account`"
				},
				"balanceOfBatch(address[],uint256[])": {
					"notice": "Return the balance of multiple (account/id) pairs"
				},
				"burn(uint256[],uint256[],address)": {
					"notice": "Burns LB tokens and sends the corresponding amounts of tokens to `_to`. The amount of tokens sent is determined by the ratio of the amount of LB tokens burned to the total supply of LB tokens in the bin. This function will not transfer the LB Tokens from the caller, it is expected that the tokens have already been transferred to this contract through another contract. That is why this function shouldn't be called directly, but through one of the remove liquidity functions of the router that will also perform safety checks."
				},
				"collectFees(address,uint256[])": {
					"notice": "Collect the fees accumulated by a user."
				},
				"collectProtocolFees()": {
					"notice": "Collect the protocol fees and send them to the fee recipient."
				},
				"constructor": {
					"notice": "Set the factory address"
				},
				"factory()": {
					"notice": "The factory contract that created this pair"
				},
				"feeParameters()": {
					"notice": "View function to get the fee parameters"
				},
				"findFirstNonEmptyBinId(uint24,bool)": {
					"notice": "View function to get the first bin that isn't empty, will not be `_id` itself"
				},
				"getBin(uint24)": {
					"notice": "View function to get the bin at `id`"
				},
				"getReservesAndId()": {
					"notice": "View function to get the reserves and active id"
				},
				"initialize(address,address,uint24)": {
					"notice": "Initialize the parameters of the LBPair"
				},
				"isApprovedForAll(address,address)": {
					"notice": "Returns true if `spender` is approved to transfer `_account`'s tokens"
				},
				"mint(uint256[],uint256[],uint256[],address)": {
					"notice": "Mint new LB tokens for each bins where the user adds liquidity. This function will not transfer the tokens from the caller, it is expected that the tokens have already been transferred to this contract through another contract. That is why this function shouldn't be called directly, but through one of the add liquidity functions of the router that will also perform safety checks."
				},
				"name()": {
					"notice": "Returns the name of the token"
				},
				"pendingFees(address,uint256[])": {
					"notice": "View function to get the pending fees of a user"
				},
				"safeBatchTransferFrom(address,address,uint256[],uint256[])": {
					"notice": "Batch transfers `_amount` tokens of type `_id` from `_from` to `_to`"
				},
				"safeTransferFrom(address,address,uint256,uint256)": {
					"notice": "Transfers `_amount` token of type `_id` from `_from` to `_to`"
				},
				"setApprovalForAll(address,bool)": {
					"notice": "Grants or revokes permission to `spender` to transfer the caller's tokens, according to `approved`"
				},
				"supportsInterface(bytes4)": {
					"notice": "Returns whether this contract implements the interface defined by `interfaceId` (true) or not (false)"
				},
				"swap(bool,address)": {
					"notice": "Swap tokens iterating over the bins until the entire amount is swapped. Will swap token X for token Y if `_swapForY` is true, and token Y for token X if `_swapForY` is false. This function will not transfer the tokens from the caller, it is expected that the tokens have already been transferred to this contract through another contract. That is why this function shouldn't be called directly, but through one of the swap functions of the router that will also perform safety checks. The variable fee is updated throughout the swap, it increases with the number of bins crossed."
				},
				"symbol()": {
					"notice": "Returns the symbol of the token, usually a shorter version of the name"
				},
				"tokenX()": {
					"notice": "The token that is used as the base currency for the pair"
				},
				"tokenY()": {
					"notice": "The token that is used as the quote currency for the pair"
				},
				"totalSupply(uint256)": {
					"notice": "Returns the total supply of token of type `id`"
				}
			},
			"notice": "This contract is the implementation of Liquidity Book Pair that also acts as the receipt token for liquidity positions",
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"Midas/joe-v2-main/src/LBPair.sol": "LBPair"
		},
		"evmVersion": "london",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": true,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"@openzeppelin/contracts/token/ERC20/IERC20.sol": {
			"keccak256": "0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b",
			"license": "MIT",
			"urls": [
				"bzz-raw://5a7d5b1ef5d8d5889ad2ed89d8619c09383b80b72ab226e0fe7bde1636481e34",
				"dweb:/ipfs/QmebXWgtEfumQGBdVeM6c71McLixYXQP5Bk6kKXuoY4Bmr"
			]
		},
		"@openzeppelin/contracts/utils/introspection/IERC165.sol": {
			"keccak256": "0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1",
			"license": "MIT",
			"urls": [
				"bzz-raw://be161e54f24e5c6fae81a12db1a8ae87bc5ae1b0ddc805d82a1440a68455088f",
				"dweb:/ipfs/QmP7C3CHdY9urF4dEMb9wmsp1wMxHF6nhA2yQE5SKiPAdy"
			]
		},
		"@openzeppelin/contracts/utils/structs/EnumerableSet.sol": {
			"keccak256": "0xc3ff3f5c4584e1d9a483ad7ced51ab64523201f4e3d3c65293e4ca8aeb77a961",
			"license": "MIT",
			"urls": [
				"bzz-raw://d7d3dd6067a994690471b5fc71b6f81fac3847798b37d404f74db00b4d3c3d0e",
				"dweb:/ipfs/QmRHF1RarifjNi93RttouNPkYZGyu6CD926PgRDzD5iL35"
			]
		},
		"Midas/joe-v2-main/src/LBErrors.sol": {
			"keccak256": "0xdef68e9e8f585f2bbfa294a1df13a774e9d6ed3d0bc495da5243842907bcc93e",
			"license": "MIT",
			"urls": [
				"bzz-raw://653c91baa2876d0c4c6272c141eade4a4471a81518ed664f5a56c38d0576e34e",
				"dweb:/ipfs/QmZtNra5hMkERWdgEKZFWxepFohM2zqwFWNj8uRpFxN2MP"
			]
		},
		"Midas/joe-v2-main/src/LBPair.sol": {
			"keccak256": "0xf44584a32e820a335e3d7ac1761d1f938d6065d144a4d716f833fc8e07303af6",
			"license": "MIT",
			"urls": [
				"bzz-raw://5fd90d0186d9a88c141b946c32b9cb7a3ec028a82735954fb1f0d46c2326c0d7",
				"dweb:/ipfs/QmcNz5TJquwVcCdtpGoPTvnHhNA4w5z9NyCkgZAopUZXYi"
			]
		},
		"Midas/joe-v2-main/src/LBToken.sol": {
			"keccak256": "0x594373dac369b243649ffb1c7106302dcc9958136ec2787eac2515ee0aa2e502",
			"license": "MIT",
			"urls": [
				"bzz-raw://296fc4d6b33e3cd74b09bb2f103b10692ae1b845f2e2abcd7253ae6def5e0085",
				"dweb:/ipfs/QmW9mbk5rA3SjAmxFcH2bVbp8eEpyy8USRVNk2UfiTi1ds"
			]
		},
		"Midas/joe-v2-main/src/interfaces/ILBFactory.sol": {
			"keccak256": "0xf6ec8a22aeb373cb135407e49b43b5c0025c028ba36c81c773ad776bffcafe99",
			"license": "MIT",
			"urls": [
				"bzz-raw://6d88b893d9e13c3b71029a9dd7d13c1173cc5aa8617f37cbd9b53df111872a4e",
				"dweb:/ipfs/QmVCa2tMCYCEiBXjz88hvSf8q7cgVDL7yRxnQsuRe6FShD"
			]
		},
		"Midas/joe-v2-main/src/interfaces/ILBFlashLoanCallback.sol": {
			"keccak256": "0x0ad4de9217ea804336d10f8200c442f1be75a22fed5d64e0d9d5334f6fcc7f55",
			"license": "MIT",
			"urls": [
				"bzz-raw://aab52dd79579de997ec44e79275ea8d08bd2da05cf6b3ba821bea01e5639748d",
				"dweb:/ipfs/QmazDbWMPGanUbq3iVuSAbZtpLCihy3HYSbH5RvHsLUqRt"
			]
		},
		"Midas/joe-v2-main/src/interfaces/ILBPair.sol": {
			"keccak256": "0xa1820d518ee8446623cc021b4b9d66e49b23cbdc28c5a49b2877d5d63312a6f6",
			"license": "MIT",
			"urls": [
				"bzz-raw://5c9e58707685d956b641ddbce959720d61922e359141411c980da549bdf20c31",
				"dweb:/ipfs/QmVozer8dDmhy72YQTNYeavXoXTU3cvinX4aXWpQp9QRPk"
			]
		},
		"Midas/joe-v2-main/src/interfaces/ILBToken.sol": {
			"keccak256": "0xde04a8cc8ff40a180aa1cb6fa1a9eb8717ee0b98e14e49aee847a5f6de9df55c",
			"license": "MIT",
			"urls": [
				"bzz-raw://0be14cc501106c758b4e87a64ac512cf4eeafca2bf20c01b7fdec11b284901ed",
				"dweb:/ipfs/QmRYNdM3GXFXsqVm8aHKbvi6Hfm8F4ohv3wxkoFKbN56Zz"
			]
		},
		"Midas/joe-v2-main/src/interfaces/IPendingOwnable.sol": {
			"keccak256": "0x4c51408f2586a703c922f504c61f92811c53680d2f604aa436baa7dda89f10cd",
			"license": "MIT",
			"urls": [
				"bzz-raw://893108ef6befefd6a154d754271dba3505df7c55f53ed3af7c700cbcc1c5ed42",
				"dweb:/ipfs/QmURW3zDuVNdgi2n8GEihihbTZ8mxvpjUrbQAqs2t4pKnP"
			]
		},
		"Midas/joe-v2-main/src/libraries/BinHelper.sol": {
			"keccak256": "0xe364497f7c55d363711aea744090c9e6e0270a62b6a350074f3db9d9b7f13aec",
			"license": "MIT",
			"urls": [
				"bzz-raw://38ca88d51bbef9b3b26b629af0df9c9572599d6f6d8dfdf2111f4626b34a49f9",
				"dweb:/ipfs/QmamJBBBqh4D3LNg3cJLaiJdryMjfa8LTVuMPR2iwvpe81"
			]
		},
		"Midas/joe-v2-main/src/libraries/BitMath.sol": {
			"keccak256": "0xf6a2d3055de0fa5f3ba8791901f7694a40dbfca7d6a447a17c70993325fc02f0",
			"license": "MIT",
			"urls": [
				"bzz-raw://b551bc04ac6e4c6848d48bc83b941d5a2950ffe5a5cd57f8e42d66e82d1c1084",
				"dweb:/ipfs/QmZb8SGo4e3eiqrB62r1A4Txx3zMMZJtSavEXAcvbovL9J"
			]
		},
		"Midas/joe-v2-main/src/libraries/Buffer.sol": {
			"keccak256": "0x36edf2141d17dd426dad41fe7feadabc6a4f0206c74f6bfec7ae7a8cd7560e68",
			"license": "MIT",
			"urls": [
				"bzz-raw://43b9cc7bc322edc5c2a2d1d6a04d0ca41b283f37fcc5daa5d83ed9f32f731000",
				"dweb:/ipfs/Qme23hcAkQLCjoM6mvTZGYpqGw81KRJmVrzy6q9oxWFMtu"
			]
		},
		"Midas/joe-v2-main/src/libraries/Constants.sol": {
			"keccak256": "0xb6d9ce63d36b945ca698438d9e3a2d0b3d2713b7d57f1ff63009965ea2ef78ad",
			"license": "MIT",
			"urls": [
				"bzz-raw://e54db847ce3ef1bfbea2a4303b1f6bf7d7614b90a6b496a47699e18069826c83",
				"dweb:/ipfs/QmSTuGvKLWVCgvZN32t3XH6zzj3rmYis7EizMSWgNFpRdN"
			]
		},
		"Midas/joe-v2-main/src/libraries/Decoder.sol": {
			"keccak256": "0xe12ecacbd1d520251a148fb671f682fac728e48ec3e7bfcfdd8f9765fe2b5e46",
			"license": "MIT",
			"urls": [
				"bzz-raw://5e63ed2ea395acf3a99ef623c94740ebf4b1b2fff1913b6cff3b305950862210",
				"dweb:/ipfs/QmfPcMVaAwJ7nGhhgpNg7bxXHPKPi4NeShtzuy1wX8n9MZ"
			]
		},
		"Midas/joe-v2-main/src/libraries/Encoder.sol": {
			"keccak256": "0xf0d8d1fa36901a5c3e5384462fe86225b3ec9451263be8919c8f0e23e4320d11",
			"license": "MIT",
			"urls": [
				"bzz-raw://cbbe0f3c8e627da4bfc7ab940ecbe92c78e41cf283519c44e2db323f94e673f7",
				"dweb:/ipfs/Qmbd7vFVU617bYAtFXhXNQm499qr1Qkoo1FKnjBVerNpZJ"
			]
		},
		"Midas/joe-v2-main/src/libraries/FeeDistributionHelper.sol": {
			"keccak256": "0x388759a86992f874dd66102f3270bb272d7d3470f89b2742ce16fd59c0437f1b",
			"license": "MIT",
			"urls": [
				"bzz-raw://4b872c7f7bee73bb23a9d578cd9ed74e90993d14e7e66d7a98d393a75d678cb0",
				"dweb:/ipfs/QmXee99JjK3SJX5xS3eMHwnyJ51bYCvT6j5qkuvg11t8wn"
			]
		},
		"Midas/joe-v2-main/src/libraries/FeeHelper.sol": {
			"keccak256": "0x05fa546412c82d738c03919239bbbe83c1caaf8982af3e85d4ef72709c3e62bc",
			"license": "MIT",
			"urls": [
				"bzz-raw://d893bed925dd278876702a8cb9fab494bf754fadd82d008224600bd902aabb2a",
				"dweb:/ipfs/QmYgjkHieFSK8zFv2M3UNdNKRspgJuF4S4qNDbvweBQj79"
			]
		},
		"Midas/joe-v2-main/src/libraries/Math128x128.sol": {
			"keccak256": "0x33202d8738fe0334bff67f2ad4568f2669ef00b86ad252803a217cd9a913921f",
			"license": "MIT",
			"urls": [
				"bzz-raw://0e32450665cc7ae8c0b9907ea0451dbe5ea29aea21f3967ccb764729d54bff30",
				"dweb:/ipfs/QmPh5GkHYYCqf2328usjFpGi3BLKgKakjsFHBKjp7regK1"
			]
		},
		"Midas/joe-v2-main/src/libraries/Math512Bits.sol": {
			"keccak256": "0x2a00e56dc0280a311b6c750dcd753a67cf0e67dc27a18b6ac531773275d7e389",
			"license": "MIT",
			"urls": [
				"bzz-raw://d5dac5d5f31b457992dadc950b1a00019360c0a8999e6b49533d1f45fa4a4f9f",
				"dweb:/ipfs/QmbahMDjLC33HNSciBSJDta4TBHokJfyDvAhnWDRem4dzm"
			]
		},
		"Midas/joe-v2-main/src/libraries/Oracle.sol": {
			"keccak256": "0xa34656921f96354a76ffd928de3d6a0b5c1304cb7bb973c385d34e600b35a20f",
			"license": "MIT",
			"urls": [
				"bzz-raw://85929d794ffc6aededb476f499b25a6dfcec15945487be05b13fcd7bf561c051",
				"dweb:/ipfs/Qmeiy8DpE6AGEx7YStGXNpoEzgt6yCaNukLVSusLQX2ZZu"
			]
		},
		"Midas/joe-v2-main/src/libraries/ReentrancyGuardUpgradeable.sol": {
			"keccak256": "0x97a417fe1716e01447c857ed7415341312fbddd83174a32b5fc9d3259a36b9c3",
			"license": "MIT",
			"urls": [
				"bzz-raw://da56633c46ef626094f9938f8cb1388a94c035fa854c2d3ec48e3614dc5aecca",
				"dweb:/ipfs/QmUsvU5rHvbKK7xEproA2C1TMxvz8Pk2VeUbtE7DrTEdHJ"
			]
		},
		"Midas/joe-v2-main/src/libraries/SafeCast.sol": {
			"keccak256": "0x171ac968ef2f498a9ff6f8aca58eaa6070bfa245781d701f74cfca62f7ff85f7",
			"license": "MIT",
			"urls": [
				"bzz-raw://b4fca7527eb62b9f1bd20ab72fe5024f64e03de0666991b3a54fc63864ff78d6",
				"dweb:/ipfs/QmWBxZ4BXd3SMm9XSWmCzULCNpyj5ocTohr26mPoye7vJq"
			]
		},
		"Midas/joe-v2-main/src/libraries/SafeMath.sol": {
			"keccak256": "0x38fad00f0157c59a0d9a97b50447d8331ba2e9dc3292e6b7386429782d611e46",
			"license": "MIT",
			"urls": [
				"bzz-raw://a054f7c5e5794febebf102168f350d8f37814a8fcfac5b9e7916784a379bed47",
				"dweb:/ipfs/Qmbnh882A1FRvsv2bwXdVoeebxCn3PiUKQKag6uc15dGaW"
			]
		},
		"Midas/joe-v2-main/src/libraries/Samples.sol": {
			"keccak256": "0xc10478b358710ef0c558c3c52c1ead881d3bccccc7d951923aca53d21f2ffafe",
			"license": "MIT",
			"urls": [
				"bzz-raw://29beee63e29b37a3717ef08af651d7fa240723ca04a7d0755e035b32a47d05bd",
				"dweb:/ipfs/QmUjjtEQAH6ZaLoUUrsDrPyJf4FbtTiGDaMSYkCAWEfinw"
			]
		},
		"Midas/joe-v2-main/src/libraries/SwapHelper.sol": {
			"keccak256": "0xa42042f94baa8275ec12a18eaaa370313e8763b0bc2e24594f2343e7cb382143",
			"license": "MIT",
			"urls": [
				"bzz-raw://a0a61653f607ee720eb9f94ddcdcd42035a01dae383db456821d573b9c6c11e6",
				"dweb:/ipfs/QmdF35iTxbdnqe9kUCtdULNaHgrG7NyDW4JaLCRK5cxBFH"
			]
		},
		"Midas/joe-v2-main/src/libraries/TokenHelper.sol": {
			"keccak256": "0x1e637d2fb808f03d2eb4d871420bb175aaca4ee3370a0e0c54bb8dd06d06767c",
			"license": "MIT",
			"urls": [
				"bzz-raw://daa21bd5e2f99c4a93aa0b0fc2311bf12080da473089325130285f1dcc99e814",
				"dweb:/ipfs/QmYjoxAVkAAJeQYydLi9xEH7ATDJoBYMZ3WDe8hZ2cbyZM"
			]
		},
		"Midas/joe-v2-main/src/libraries/TreeMath.sol": {
			"keccak256": "0x8234651689fec87f4d9f2c23af650384f4722beabcf07141df06c1054f344d7f",
			"license": "MIT",
			"urls": [
				"bzz-raw://fb60a4491237ba71d02ebfeb2d019c0a1ae7e2481f5e4df30ee5197a86942214",
				"dweb:/ipfs/QmfCctmt86bUpAPf5rkt2oSXcLy1kh581RjjLM8kyys9PY"
			]
		}
	},
	"version": 1
}