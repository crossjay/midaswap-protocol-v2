{
	"id": "db1d39219ebcbbe52d51b2caf485cb0a",
	"_format": "hh-sol-build-info-1",
	"solcVersion": "0.8.10",
	"solcLongVersion": "0.8.10+commit.fc410830",
	"input": {
		"language": "Solidity",
		"sources": {
			"Midas/Midas_main/src/LPToken.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/ERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\";\nimport \"@openzeppelin/contracts/utils/Address.sol\";\nimport \"@openzeppelin/contracts/utils/Context.sol\";\nimport \"@openzeppelin/contracts/utils/Strings.sol\";\nimport \"@openzeppelin/contracts/utils/introspection/ERC165.sol\";\n\n/// @title Midas ERC721 LP Token\n/// @author midaswap\n/// @notice LP token wrapped the Midaswap position information which provides interfaces to liquidity providers from Midaswap Pair.\n\ncontract LPToken is Context, ERC165, IERC721, IERC721Metadata {\n    using Address for address;\n    using Strings for uint256;\n\n    // Token name\n    string private _name;\n\n    // Token symbol\n    string private _symbol;\n\n    // Pair address\n    address private _pair;\n\n    // Factory address\n    address private _factory;\n\n    // Mapping from token ID to owner address\n    mapping(uint256 => address) private _owners;\n\n    // Mapping owner address to token count\n    mapping(address => uint256) private _balances;\n\n    // Mapping from token ID to approved address\n    mapping(uint256 => address) private _tokenApprovals;\n\n    // Mapping from owner to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    /**\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\n     */\n    constructor(string memory name_, string memory symbol_, address factory_) {\n        _name = name_;\n        _symbol = symbol_;\n        _factory = factory_;\n    }\n    \n    modifier onlyPair {\n        require(msg.sender == _pair);\n        _;\n    }\n\n    modifier onlyFactory {\n        require(msg.sender == _factory);\n        _;\n    }\n\n    function initialize(address pair) public virtual onlyFactory {\n        _pair = pair;\n    }\n    \n    function mint(address to, uint256 tokenId) public virtual onlyPair {\n        _safeMint(to, tokenId);\n    }\n\n    function burn(uint256 tokenId) public virtual onlyPair {\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"LPToken: caller is not token owner or approved\");\n        _burn(tokenId);\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return\n            interfaceId == type(IERC721).interfaceId ||\n            interfaceId == type(IERC721Metadata).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721-balanceOf}.\n     */\n    function balanceOf(address owner) public view virtual override returns (uint256) {\n        require(owner != address(0), \"LPToken: address zero is not a valid owner\");\n        return _balances[owner];\n    }\n\n    /**\n     * @dev See {IERC721-ownerOf}.\n     */\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\n        address owner = _ownerOf(tokenId);\n        require(owner != address(0), \"LPToken: invalid token ID\");\n        return owner;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-name}.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-symbol}.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        _requireMinted(tokenId);\n\n        string memory baseURI = _baseURI();\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \"\";\n    }\n\n    /**\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n     * by default, can be overridden in child contracts.\n     */\n    function _baseURI() internal view virtual returns (string memory) {\n        return \"\";\n    }\n\n    /**\n     * @dev See {IERC721-approve}.\n     */\n    function approve(address to, uint256 tokenId) public virtual override {\n        address owner = LPToken.ownerOf(tokenId);\n        require(to != owner, \"LPToken: approval to current owner\");\n\n        require(\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\n            \"LPToken: approve caller is not token owner or approved for all\"\n        );\n\n        _approve(to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-getApproved}.\n     */\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\n        _requireMinted(tokenId);\n\n        return _tokenApprovals[tokenId];\n    }\n\n    /**\n     * @dev See {IERC721-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        _setApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC721-isApprovedForAll}.\n     */\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[owner][operator];\n    }\n\n    /**\n     * @dev See {IERC721-transferFrom}.\n     */\n    function transferFrom(address from, address to, uint256 tokenId) public virtual override {\n        //solhint-disable-next-line max-line-length\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"LPToken: caller is not token owner or approved\");\n\n        _transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId) public virtual override {\n        safeTransferFrom(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public virtual override {\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"LPToken: caller is not token owner or approved\");\n        _safeTransfer(from, to, tokenId, data);\n    }\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\n     *\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory data) internal virtual {\n        _transfer(from, to, tokenId);\n        require(_checkOnERC721Received(from, to, tokenId, data), \"LPToken: transfer to non ERC721Receiver implementer\");\n    }\n\n    /**\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\n     */\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\n        return _owners[tokenId];\n    }\n\n    /**\n     * @dev Returns whether `tokenId` exists.\n     *\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n     *\n     * Tokens start existing when they are minted (`_mint`),\n     * and stop existing when they are burned (`_burn`).\n     */\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\n        return _ownerOf(tokenId) != address(0);\n    }\n\n    /**\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\n        address owner = LPToken.ownerOf(tokenId);\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\n    }\n\n    /**\n     * @dev Safely mints `tokenId` and transfers it to `to`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeMint(address to, uint256 tokenId) internal virtual {\n        _safeMint(to, tokenId, \"\");\n    }\n\n    /**\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\n     */\n    function _safeMint(address to, uint256 tokenId, bytes memory data) internal virtual {\n        _mint(to, tokenId);\n        require(\n            _checkOnERC721Received(address(0), to, tokenId, data),\n            \"LPToken: transfer to non ERC721Receiver implementer\"\n        );\n    }\n\n    /**\n     * @dev Mints `tokenId` and transfers it to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - `to` cannot be the zero address.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _mint(address to, uint256 tokenId) internal virtual {\n        require(to != address(0), \"LPToken: mint to the zero address\");\n        require(!_exists(tokenId), \"LPToken: token already minted\");\n\n        _beforeTokenTransfer(address(0), to, tokenId, 1);\n\n        // Check that tokenId was not minted by `_beforeTokenTransfer` hook\n        require(!_exists(tokenId), \"LPToken: token already minted\");\n\n        unchecked {\n            // Will not overflow unless all 2**256 token ids are minted to the same owner.\n            // Given that tokens are minted one by one, it is impossible in practice that\n            // this ever happens. Might change if we allow batch minting.\n            // The ERC fails to describe this case.\n            _balances[to] += 1;\n        }\n\n        _owners[tokenId] = to;\n\n        emit Transfer(address(0), to, tokenId);\n\n        _afterTokenTransfer(address(0), to, tokenId, 1);\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId) internal virtual {\n        address owner = LPToken.ownerOf(tokenId);\n\n        _beforeTokenTransfer(owner, address(0), tokenId, 1);\n\n        // Update ownership in case tokenId was transferred by `_beforeTokenTransfer` hook\n        owner = LPToken.ownerOf(tokenId);\n\n        // Clear approvals\n        delete _tokenApprovals[tokenId];\n\n        unchecked {\n            // Cannot overflow, as that would require more tokens to be burned/transferred\n            // out than the owner initially received through minting and transferring in.\n            _balances[owner] -= 1;\n        }\n        delete _owners[tokenId];\n\n        emit Transfer(owner, address(0), tokenId);\n\n        _afterTokenTransfer(owner, address(0), tokenId, 1);\n    }\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _transfer(address from, address to, uint256 tokenId) internal virtual {\n        require(LPToken.ownerOf(tokenId) == from, \"LPToken: transfer from incorrect owner\");\n        require(to != address(0), \"LPToken: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, tokenId, 1);\n\n        // Check that tokenId was not transferred by `_beforeTokenTransfer` hook\n        require(LPToken.ownerOf(tokenId) == from, \"ERC721: transfer from incorrect owner\");\n\n        // Clear approvals from the previous owner\n        delete _tokenApprovals[tokenId];\n\n        unchecked {\n            // `_balances[from]` cannot overflow for the same reason as described in `_burn`:\n            // `from`'s balance is the number of token held, which is at least one before the current\n            // transfer.\n            // `_balances[to]` could overflow in the conditions described in `_mint`. That would require\n            // all 2**256 token ids to be minted, which in practice is impossible.\n            _balances[from] -= 1;\n            _balances[to] += 1;\n        }\n        _owners[tokenId] = to;\n\n        emit Transfer(from, to, tokenId);\n\n        _afterTokenTransfer(from, to, tokenId, 1);\n    }\n\n    /**\n     * @dev Approve `to` to operate on `tokenId`\n     *\n     * Emits an {Approval} event.\n     */\n    function _approve(address to, uint256 tokenId) internal virtual {\n        _tokenApprovals[tokenId] = to;\n        emit Approval(LPToken.ownerOf(tokenId), to, tokenId);\n    }\n\n    /**\n     * @dev Approve `operator` to operate on all of `owner` tokens\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {\n        require(owner != operator, \"LPToken: approve to caller\");\n        _operatorApprovals[owner][operator] = approved;\n        emit ApprovalForAll(owner, operator, approved);\n    }\n\n    /**\n     * @dev Reverts if the `tokenId` has not been minted yet.\n     */\n    function _requireMinted(uint256 tokenId) internal view virtual {\n        require(_exists(tokenId), \"LPToken: invalid token ID\");\n    }\n\n    /**\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\n     * The call is not executed if the target address is not a contract.\n     *\n     * @param from address representing the previous owner of the given token ID\n     * @param to target address that will receive the tokens\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param data bytes optional data to send along with the call\n     * @return bool whether the call correctly returned the expected magic value\n     */\n    function _checkOnERC721Received(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) private returns (bool) {\n        if (to.isContract()) {\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\n                return retval == IERC721Receiver.onERC721Received.selector;\n            } catch (bytes memory reason) {\n                if (reason.length == 0) {\n                    revert(\"LPToken: transfer to non ERC721Receiver implementer\");\n                } else {\n                    /// @solidity memory-safe-assembly\n                    assembly {\n                        revert(add(32, reason), mload(reason))\n                    }\n                }\n            }\n        } else {\n            return true;\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.\n     * - When `from` is zero, the tokens will be minted for `to`.\n     * - When `to` is zero, ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     * - `batchSize` is non-zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 /* firstTokenId */,\n        uint256 batchSize\n    ) internal virtual {\n        if (batchSize > 1) {\n            if (from != address(0)) {\n                _balances[from] -= batchSize;\n            }\n            if (to != address(0)) {\n                _balances[to] += batchSize;\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.\n     * - When `from` is zero, the tokens were minted for `to`.\n     * - When `to` is zero, ``from``'s tokens were burned.\n     * - `from` and `to` are never both zero.\n     * - `batchSize` is non-zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(address from, address to, uint256 firstTokenId, uint256 batchSize) internal virtual {}\n}\n"
			},
			"@openzeppelin/contracts/utils/introspection/ERC165.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
			},
			"@openzeppelin/contracts/utils/Strings.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./math/Math.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = Math.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            /// @solidity memory-safe-assembly\n            assembly {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                /// @solidity memory-safe-assembly\n                assembly {\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, Math.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n}\n"
			},
			"@openzeppelin/contracts/utils/Context.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
			},
			"@openzeppelin/contracts/utils/Address.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"
			},
			"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Metadata is IERC721 {\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"
			},
			"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
			},
			"@openzeppelin/contracts/token/ERC721/IERC721.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"
			},
			"@openzeppelin/contracts/utils/introspection/IERC165.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
			},
			"@openzeppelin/contracts/utils/math/Math.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator\n    ) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1);\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator,\n        Rounding rounding\n    ) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10**64) {\n                value /= 10**64;\n                result += 64;\n            }\n            if (value >= 10**32) {\n                value /= 10**32;\n                result += 32;\n            }\n            if (value >= 10**16) {\n                value /= 10**16;\n                result += 16;\n            }\n            if (value >= 10**8) {\n                value /= 10**8;\n                result += 8;\n            }\n            if (value >= 10**4) {\n                value /= 10**4;\n                result += 4;\n            }\n            if (value >= 10**2) {\n                value /= 10**2;\n                result += 2;\n            }\n            if (value >= 10**1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\n        }\n    }\n}\n"
			}
		},
		"settings": {
			"optimizer": {
				"enabled": true,
				"runs": 10
			},
			"outputSelection": {
				"*": {
					"": [
						"ast"
					],
					"*": [
						"abi",
						"metadata",
						"devdoc",
						"userdoc",
						"storageLayout",
						"evm.legacyAssembly",
						"evm.bytecode",
						"evm.deployedBytecode",
						"evm.methodIdentifiers",
						"evm.gasEstimates",
						"evm.assembly"
					]
				}
			}
		}
	},
	"output": {
		"contracts": {
			"@openzeppelin/contracts/token/ERC721/IERC721.sol": {
				"IERC721": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "approved",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "bool",
									"name": "approved",
									"type": "bool"
								}
							],
							"name": "ApprovalForAll",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "balance",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "getApproved",
							"outputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"name": "isApprovedForAll",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "ownerOf",
							"outputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "safeTransferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "safeTransferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"internalType": "bool",
									"name": "_approved",
									"type": "bool"
								}
							],
							"name": "setApprovalForAll",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes4",
									"name": "interfaceId",
									"type": "bytes4"
								}
							],
							"name": "supportsInterface",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Required interface of an ERC721 compliant contract.",
						"events": {
							"Approval(address,address,uint256)": {
								"details": "Emitted when `owner` enables `approved` to manage the `tokenId` token."
							},
							"ApprovalForAll(address,address,bool)": {
								"details": "Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."
							},
							"Transfer(address,address,uint256)": {
								"details": "Emitted when `tokenId` token is transferred from `from` to `to`."
							}
						},
						"kind": "dev",
						"methods": {
							"approve(address,uint256)": {
								"details": "Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event."
							},
							"balanceOf(address)": {
								"details": "Returns the number of tokens in ``owner``'s account."
							},
							"getApproved(uint256)": {
								"details": "Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist."
							},
							"isApprovedForAll(address,address)": {
								"details": "Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}"
							},
							"ownerOf(uint256)": {
								"details": "Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist."
							},
							"safeTransferFrom(address,address,uint256)": {
								"details": "Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."
							},
							"safeTransferFrom(address,address,uint256,bytes)": {
								"details": "Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."
							},
							"setApprovalForAll(address,bool)": {
								"details": "Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event."
							},
							"supportsInterface(bytes4)": {
								"details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
							},
							"transferFrom(address,address,uint256)": {
								"details": "Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"getApproved(uint256)": "081812fc",
							"isApprovedForAll(address,address)": "e985e9c5",
							"ownerOf(uint256)": "6352211e",
							"safeTransferFrom(address,address,uint256)": "42842e0e",
							"safeTransferFrom(address,address,uint256,bytes)": "b88d4fde",
							"setApprovalForAll(address,bool)": "a22cb465",
							"supportsInterface(bytes4)": "01ffc9a7",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Required interface of an ERC721 compliant contract.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when `owner` enables `approved` to manage the `tokenId` token.\"},\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `tokenId` token is transferred from `from` to `to`.\"}},\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the number of tokens in ``owner``'s account.\"},\"getApproved(uint256)\":{\"details\":\"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist.\"},\"isApprovedForAll(address,address)\":{\"details\":\"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}\"},\"ownerOf(uint256)\":{\"details\":\"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":\"IERC721\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":10},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"keccak256\":\"0xab28a56179c1db258c9bf5235b382698cb650debecb51b23d12be9e241374b68\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://daae589a9d6fa7e55f99f86c0a16796ca490f243fb3693632c3711c0646c1d56\",\"dweb:/ipfs/QmR3zpd7wNw3rcUdekwiv6FYHJqksuTCXLVioTxu6Fbxk3\"]},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://be161e54f24e5c6fae81a12db1a8ae87bc5ae1b0ddc805d82a1440a68455088f\",\"dweb:/ipfs/QmP7C3CHdY9urF4dEMb9wmsp1wMxHF6nhA2yQE5SKiPAdy\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {
				"IERC721Receiver": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "onERC721Received",
							"outputs": [
								{
									"internalType": "bytes4",
									"name": "",
									"type": "bytes4"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Interface for any contract that wants to support safeTransfers from ERC721 asset contracts.",
						"kind": "dev",
						"methods": {
							"onERC721Received(address,address,uint256,bytes)": {
								"details": "Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom} by `operator` from `from`, this function is called. It must return its Solidity selector to confirm the token transfer. If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted. The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`."
							}
						},
						"title": "ERC721 token receiver interface",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"onERC721Received(address,address,uint256,bytes)": "150b7a02"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface for any contract that wants to support safeTransfers from ERC721 asset contracts.\",\"kind\":\"dev\",\"methods\":{\"onERC721Received(address,address,uint256,bytes)\":{\"details\":\"Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom} by `operator` from `from`, this function is called. It must return its Solidity selector to confirm the token transfer. If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted. The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\"}},\"title\":\"ERC721 token receiver interface\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":\"IERC721Receiver\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":10},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6e75cf83beb757b8855791088546b8337e9d4684e169400c20d44a515353b708\",\"dweb:/ipfs/QmYvPafLfoquiDMEj7CKHtvbgHu7TJNPSVPSCjrtjV8HjV\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol": {
				"IERC721Metadata": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "approved",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "bool",
									"name": "approved",
									"type": "bool"
								}
							],
							"name": "ApprovalForAll",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "balance",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "getApproved",
							"outputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"name": "isApprovedForAll",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "name",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "ownerOf",
							"outputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "safeTransferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "safeTransferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"internalType": "bool",
									"name": "_approved",
									"type": "bool"
								}
							],
							"name": "setApprovalForAll",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes4",
									"name": "interfaceId",
									"type": "bytes4"
								}
							],
							"name": "supportsInterface",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "symbol",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "tokenURI",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "See https://eips.ethereum.org/EIPS/eip-721",
						"kind": "dev",
						"methods": {
							"approve(address,uint256)": {
								"details": "Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event."
							},
							"balanceOf(address)": {
								"details": "Returns the number of tokens in ``owner``'s account."
							},
							"getApproved(uint256)": {
								"details": "Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist."
							},
							"isApprovedForAll(address,address)": {
								"details": "Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}"
							},
							"name()": {
								"details": "Returns the token collection name."
							},
							"ownerOf(uint256)": {
								"details": "Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist."
							},
							"safeTransferFrom(address,address,uint256)": {
								"details": "Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."
							},
							"safeTransferFrom(address,address,uint256,bytes)": {
								"details": "Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."
							},
							"setApprovalForAll(address,bool)": {
								"details": "Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event."
							},
							"supportsInterface(bytes4)": {
								"details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
							},
							"symbol()": {
								"details": "Returns the token collection symbol."
							},
							"tokenURI(uint256)": {
								"details": "Returns the Uniform Resource Identifier (URI) for `tokenId` token."
							},
							"transferFrom(address,address,uint256)": {
								"details": "Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event."
							}
						},
						"title": "ERC-721 Non-Fungible Token Standard, optional metadata extension",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"getApproved(uint256)": "081812fc",
							"isApprovedForAll(address,address)": "e985e9c5",
							"name()": "06fdde03",
							"ownerOf(uint256)": "6352211e",
							"safeTransferFrom(address,address,uint256)": "42842e0e",
							"safeTransferFrom(address,address,uint256,bytes)": "b88d4fde",
							"setApprovalForAll(address,bool)": "a22cb465",
							"supportsInterface(bytes4)": "01ffc9a7",
							"symbol()": "95d89b41",
							"tokenURI(uint256)": "c87b56dd",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"See https://eips.ethereum.org/EIPS/eip-721\",\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the number of tokens in ``owner``'s account.\"},\"getApproved(uint256)\":{\"details\":\"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist.\"},\"isApprovedForAll(address,address)\":{\"details\":\"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}\"},\"name()\":{\"details\":\"Returns the token collection name.\"},\"ownerOf(uint256)\":{\"details\":\"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"},\"symbol()\":{\"details\":\"Returns the token collection symbol.\"},\"tokenURI(uint256)\":{\"details\":\"Returns the Uniform Resource Identifier (URI) for `tokenId` token.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event.\"}},\"title\":\"ERC-721 Non-Fungible Token Standard, optional metadata extension\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":\"IERC721Metadata\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":10},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"keccak256\":\"0xab28a56179c1db258c9bf5235b382698cb650debecb51b23d12be9e241374b68\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://daae589a9d6fa7e55f99f86c0a16796ca490f243fb3693632c3711c0646c1d56\",\"dweb:/ipfs/QmR3zpd7wNw3rcUdekwiv6FYHJqksuTCXLVioTxu6Fbxk3\"]},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://a0a107160525724f9e1bbbab031defc2f298296dd9e331f16a6f7130cec32146\",\"dweb:/ipfs/QmemujxSd7gX8A9M8UwmNbz4Ms3U9FG9QfudUgxwvTmPWf\"]},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://be161e54f24e5c6fae81a12db1a8ae87bc5ae1b0ddc805d82a1440a68455088f\",\"dweb:/ipfs/QmP7C3CHdY9urF4dEMb9wmsp1wMxHF6nhA2yQE5SKiPAdy\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/utils/Address.sol": {
				"Address": {
					"abi": [],
					"devdoc": {
						"details": "Collection of functions related to the address type",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"@openzeppelin/contracts/utils/Address.sol\":194:9158  library Address {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  mstore(0x00, shl(0xe0, 0x4e487b71))\n  mstore(0x04, 0x00)\n  revert(0x00, 0x24)\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"@openzeppelin/contracts/utils/Address.sol\":194:9158  library Address {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa264697066735822122011805d07c3dae9eb884adcfdc888fd97f6bde5eaef4f34bf034b89cb4a39bc4f64736f6c634300080a0033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122011805d07c3dae9eb884adcfdc888fd97f6bde5eaef4f34bf034b89cb4a39bc4f64736f6c634300080a0033",
							"opcodes": "PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 GT DUP1 0x5D SMOD 0xC3 0xDA 0xE9 0xEB DUP9 0x4A 0xDC REVERT 0xC8 DUP9 REVERT SWAP8 0xF6 0xBD 0xE5 0xEA 0xEF 0x4F CALLVALUE 0xBF SUB 0x4B DUP10 0xCB 0x4A CODECOPY 0xBC 0x4F PUSH5 0x736F6C6343 STOP ADDMOD EXP STOP CALLER ",
							"sourceMap": "194:8964:3:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;194:8964:3;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122011805d07c3dae9eb884adcfdc888fd97f6bde5eaef4f34bf034b89cb4a39bc4f64736f6c634300080a0033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 GT DUP1 0x5D SMOD 0xC3 0xDA 0xE9 0xEB DUP9 0x4A 0xDC REVERT 0xC8 DUP9 REVERT SWAP8 0xF6 0xBD 0xE5 0xEA 0xEF 0x4F CALLVALUE 0xBF SUB 0x4B DUP10 0xCB 0x4A CODECOPY 0xBC 0x4F PUSH5 0x736F6C6343 STOP ADDMOD EXP STOP CALLER ",
							"sourceMap": "194:8964:3:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17200",
								"executionCost": "103",
								"totalCost": "17303"
							},
							"internal": {
								"_revert(bytes memory,string memory)": "infinite",
								"functionCall(address,bytes memory)": "infinite",
								"functionCall(address,bytes memory,string memory)": "infinite",
								"functionCallWithValue(address,bytes memory,uint256)": "infinite",
								"functionCallWithValue(address,bytes memory,uint256,string memory)": "infinite",
								"functionDelegateCall(address,bytes memory)": "infinite",
								"functionDelegateCall(address,bytes memory,string memory)": "infinite",
								"functionStaticCall(address,bytes memory)": "infinite",
								"functionStaticCall(address,bytes memory,string memory)": "infinite",
								"isContract(address)": "infinite",
								"sendValue(address payable,uint256)": "infinite",
								"verifyCallResult(bool,bytes memory,string memory)": "infinite",
								"verifyCallResultFromTarget(address,bool,bytes memory,string memory)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 194,
									"end": 9158,
									"name": "PUSH #[$]",
									"source": 3,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "PUSH [$]",
									"source": 3,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "PUSH",
									"source": 3,
									"value": "B"
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "DUP3",
									"source": 3
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "DUP3",
									"source": 3
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "DUP3",
									"source": 3
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "CODECOPY",
									"source": 3
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "DUP1",
									"source": 3
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "MLOAD",
									"source": 3
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "PUSH",
									"source": 3,
									"value": "0"
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "BYTE",
									"source": 3
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "PUSH",
									"source": 3,
									"value": "73"
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "EQ",
									"source": 3
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "PUSH [tag]",
									"source": 3,
									"value": "1"
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "JUMPI",
									"source": 3
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "4E487B71"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "E0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "PUSH",
									"source": 3,
									"value": "0"
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "MSTORE",
									"source": 3
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "PUSH",
									"source": 3,
									"value": "0"
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "PUSH",
									"source": 3,
									"value": "4"
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "MSTORE",
									"source": 3
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "PUSH",
									"source": 3,
									"value": "24"
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "PUSH",
									"source": 3,
									"value": "0"
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "REVERT",
									"source": 3
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "tag",
									"source": 3,
									"value": "1"
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "JUMPDEST",
									"source": 3
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "ADDRESS",
									"source": 3
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "PUSH",
									"source": 3,
									"value": "0"
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "MSTORE",
									"source": 3
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "PUSH",
									"source": 3,
									"value": "73"
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "DUP2",
									"source": 3
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "MSTORE8",
									"source": 3
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "DUP3",
									"source": 3
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "DUP2",
									"source": 3
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "RETURN",
									"source": 3
								}
							],
							".data": {
								"0": {
									".auxdata": "a264697066735822122011805d07c3dae9eb884adcfdc888fd97f6bde5eaef4f34bf034b89cb4a39bc4f64736f6c634300080a0033",
									".code": [
										{
											"begin": 194,
											"end": 9158,
											"name": "PUSHDEPLOYADDRESS",
											"source": 3
										},
										{
											"begin": 194,
											"end": 9158,
											"name": "ADDRESS",
											"source": 3
										},
										{
											"begin": 194,
											"end": 9158,
											"name": "EQ",
											"source": 3
										},
										{
											"begin": 194,
											"end": 9158,
											"name": "PUSH",
											"source": 3,
											"value": "80"
										},
										{
											"begin": 194,
											"end": 9158,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 194,
											"end": 9158,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 194,
											"end": 9158,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 194,
											"end": 9158,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 194,
											"end": 9158,
											"name": "REVERT",
											"source": 3
										}
									]
								}
							}
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Collection of functions related to the address type\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Address.sol\":\"Address\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":10},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Address.sol\":{\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ec772b45a624be516f1c81970caa8a2e144301e9d0921cbc1a2789fef39a1269\",\"dweb:/ipfs/QmNyjwxCrGhQMyzLD93oUobJXVe9ceJvRvfXwbEtuxPiEj\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/utils/Context.sol": {
				"Context": {
					"abi": [],
					"devdoc": {
						"details": "Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Context.sol\":\"Context\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":10},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6df0ddf21ce9f58271bdfaa85cde98b200ef242a05a3f85c2bc10a8294800a92\",\"dweb:/ipfs/QmRK2Y5Yc6BK7tGKkgsgn3aJEQGi5aakeSPZvS65PV8Xp3\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/utils/Strings.sol": {
				"Strings": {
					"abi": [],
					"devdoc": {
						"details": "String operations.",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"@openzeppelin/contracts/utils/Strings.sol\":188:2253  library Strings {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  mstore(0x00, shl(0xe0, 0x4e487b71))\n  mstore(0x04, 0x00)\n  revert(0x00, 0x24)\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":188:2253  library Strings {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa2646970667358221220073e852cb047cd21400c76bf03856d3ffa3909670ca0fb003f3e7eb769f95f6164736f6c634300080a0033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220073e852cb047cd21400c76bf03856d3ffa3909670ca0fb003f3e7eb769f95f6164736f6c634300080a0033",
							"opcodes": "PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SMOD RETURNDATACOPY DUP6 0x2C 0xB0 SELFBALANCE 0xCD 0x21 BLOCKHASH 0xC PUSH23 0xBF03856D3FFA3909670CA0FB003F3E7EB769F95F616473 PUSH16 0x6C634300080A00330000000000000000 ",
							"sourceMap": "188:2065:5:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;188:2065:5;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220073e852cb047cd21400c76bf03856d3ffa3909670ca0fb003f3e7eb769f95f6164736f6c634300080a0033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SMOD RETURNDATACOPY DUP6 0x2C 0xB0 SELFBALANCE 0xCD 0x21 BLOCKHASH 0xC PUSH23 0xBF03856D3FFA3909670CA0FB003F3E7EB769F95F616473 PUSH16 0x6C634300080A00330000000000000000 ",
							"sourceMap": "188:2065:5:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17200",
								"executionCost": "103",
								"totalCost": "17303"
							},
							"internal": {
								"toHexString(address)": "infinite",
								"toHexString(uint256)": "infinite",
								"toHexString(uint256,uint256)": "infinite",
								"toString(uint256)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 188,
									"end": 2253,
									"name": "PUSH #[$]",
									"source": 5,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 188,
									"end": 2253,
									"name": "PUSH [$]",
									"source": 5,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 188,
									"end": 2253,
									"name": "PUSH",
									"source": 5,
									"value": "B"
								},
								{
									"begin": 188,
									"end": 2253,
									"name": "DUP3",
									"source": 5
								},
								{
									"begin": 188,
									"end": 2253,
									"name": "DUP3",
									"source": 5
								},
								{
									"begin": 188,
									"end": 2253,
									"name": "DUP3",
									"source": 5
								},
								{
									"begin": 188,
									"end": 2253,
									"name": "CODECOPY",
									"source": 5
								},
								{
									"begin": 188,
									"end": 2253,
									"name": "DUP1",
									"source": 5
								},
								{
									"begin": 188,
									"end": 2253,
									"name": "MLOAD",
									"source": 5
								},
								{
									"begin": 188,
									"end": 2253,
									"name": "PUSH",
									"source": 5,
									"value": "0"
								},
								{
									"begin": 188,
									"end": 2253,
									"name": "BYTE",
									"source": 5
								},
								{
									"begin": 188,
									"end": 2253,
									"name": "PUSH",
									"source": 5,
									"value": "73"
								},
								{
									"begin": 188,
									"end": 2253,
									"name": "EQ",
									"source": 5
								},
								{
									"begin": 188,
									"end": 2253,
									"name": "PUSH [tag]",
									"source": 5,
									"value": "1"
								},
								{
									"begin": 188,
									"end": 2253,
									"name": "JUMPI",
									"source": 5
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "4E487B71"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "E0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": 188,
									"end": 2253,
									"name": "PUSH",
									"source": 5,
									"value": "0"
								},
								{
									"begin": 188,
									"end": 2253,
									"name": "MSTORE",
									"source": 5
								},
								{
									"begin": 188,
									"end": 2253,
									"name": "PUSH",
									"source": 5,
									"value": "0"
								},
								{
									"begin": 188,
									"end": 2253,
									"name": "PUSH",
									"source": 5,
									"value": "4"
								},
								{
									"begin": 188,
									"end": 2253,
									"name": "MSTORE",
									"source": 5
								},
								{
									"begin": 188,
									"end": 2253,
									"name": "PUSH",
									"source": 5,
									"value": "24"
								},
								{
									"begin": 188,
									"end": 2253,
									"name": "PUSH",
									"source": 5,
									"value": "0"
								},
								{
									"begin": 188,
									"end": 2253,
									"name": "REVERT",
									"source": 5
								},
								{
									"begin": 188,
									"end": 2253,
									"name": "tag",
									"source": 5,
									"value": "1"
								},
								{
									"begin": 188,
									"end": 2253,
									"name": "JUMPDEST",
									"source": 5
								},
								{
									"begin": 188,
									"end": 2253,
									"name": "ADDRESS",
									"source": 5
								},
								{
									"begin": 188,
									"end": 2253,
									"name": "PUSH",
									"source": 5,
									"value": "0"
								},
								{
									"begin": 188,
									"end": 2253,
									"name": "MSTORE",
									"source": 5
								},
								{
									"begin": 188,
									"end": 2253,
									"name": "PUSH",
									"source": 5,
									"value": "73"
								},
								{
									"begin": 188,
									"end": 2253,
									"name": "DUP2",
									"source": 5
								},
								{
									"begin": 188,
									"end": 2253,
									"name": "MSTORE8",
									"source": 5
								},
								{
									"begin": 188,
									"end": 2253,
									"name": "DUP3",
									"source": 5
								},
								{
									"begin": 188,
									"end": 2253,
									"name": "DUP2",
									"source": 5
								},
								{
									"begin": 188,
									"end": 2253,
									"name": "RETURN",
									"source": 5
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220073e852cb047cd21400c76bf03856d3ffa3909670ca0fb003f3e7eb769f95f6164736f6c634300080a0033",
									".code": [
										{
											"begin": 188,
											"end": 2253,
											"name": "PUSHDEPLOYADDRESS",
											"source": 5
										},
										{
											"begin": 188,
											"end": 2253,
											"name": "ADDRESS",
											"source": 5
										},
										{
											"begin": 188,
											"end": 2253,
											"name": "EQ",
											"source": 5
										},
										{
											"begin": 188,
											"end": 2253,
											"name": "PUSH",
											"source": 5,
											"value": "80"
										},
										{
											"begin": 188,
											"end": 2253,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 188,
											"end": 2253,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 188,
											"end": 2253,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 188,
											"end": 2253,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 188,
											"end": 2253,
											"name": "REVERT",
											"source": 5
										}
									]
								}
							}
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"String operations.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Strings.sol\":\"Strings\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":10},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Strings.sol\":{\"keccak256\":\"0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8c969013129ba9e651a20735ef659fef6d8a1139ea3607bd4b26ddea2d645634\",\"dweb:/ipfs/QmVhVa6LGuzAcB8qgDtVHRkucn4ihj5UZr8xBLcJkP6ucb\"]},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://33bbf48cc069be677705037ba7520c22b1b622c23b33e1a71495f2d36549d40b\",\"dweb:/ipfs/Qmct36zWXv3j7LZB83uwbg7TXwnZSN1fqHNDZ93GG98bGz\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/utils/introspection/ERC165.sol": {
				"ERC165": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "bytes4",
									"name": "interfaceId",
									"type": "bytes4"
								}
							],
							"name": "supportsInterface",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Implementation of the {IERC165} interface. Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check for the additional interface id that will be supported. For example: ```solidity function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId); } ``` Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.",
						"kind": "dev",
						"methods": {
							"supportsInterface(bytes4)": {
								"details": "See {IERC165-supportsInterface}."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"supportsInterface(bytes4)": "01ffc9a7"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Implementation of the {IERC165} interface. Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check for the additional interface id that will be supported. For example: ```solidity function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId); } ``` Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\",\"kind\":\"dev\",\"methods\":{\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":\"ERC165\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":10},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://fb0048dee081f6fffa5f74afc3fb328483c2a30504e94a0ddd2a5114d731ec4d\",\"dweb:/ipfs/QmZptt1nmYoA5SgjwnSgWqgUSDgm4q52Yos3xhnMv3MV43\"]},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://be161e54f24e5c6fae81a12db1a8ae87bc5ae1b0ddc805d82a1440a68455088f\",\"dweb:/ipfs/QmP7C3CHdY9urF4dEMb9wmsp1wMxHF6nhA2yQE5SKiPAdy\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/utils/introspection/IERC165.sol": {
				"IERC165": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "bytes4",
									"name": "interfaceId",
									"type": "bytes4"
								}
							],
							"name": "supportsInterface",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Interface of the ERC165 standard, as defined in the https://eips.ethereum.org/EIPS/eip-165[EIP]. Implementers can declare support of contract interfaces, which can then be queried by others ({ERC165Checker}). For an implementation, see {ERC165}.",
						"kind": "dev",
						"methods": {
							"supportsInterface(bytes4)": {
								"details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"supportsInterface(bytes4)": "01ffc9a7"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC165 standard, as defined in the https://eips.ethereum.org/EIPS/eip-165[EIP]. Implementers can declare support of contract interfaces, which can then be queried by others ({ERC165Checker}). For an implementation, see {ERC165}.\",\"kind\":\"dev\",\"methods\":{\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":\"IERC165\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":10},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://be161e54f24e5c6fae81a12db1a8ae87bc5ae1b0ddc805d82a1440a68455088f\",\"dweb:/ipfs/QmP7C3CHdY9urF4dEMb9wmsp1wMxHF6nhA2yQE5SKiPAdy\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/utils/math/Math.sol": {
				"Math": {
					"abi": [],
					"devdoc": {
						"details": "Standard math utilities missing in the Solidity language.",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"@openzeppelin/contracts/utils/math/Math.sol\":202:12504  library Math {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  mstore(0x00, shl(0xe0, 0x4e487b71))\n  mstore(0x04, 0x00)\n  revert(0x00, 0x24)\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":202:12504  library Math {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa2646970667358221220f051a41e8b27df193892dd35ef868654a97c47f85ccda2730175c9b207b1f66264736f6c634300080a0033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220f051a41e8b27df193892dd35ef868654a97c47f85ccda2730175c9b207b1f66264736f6c634300080a0033",
							"opcodes": "PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 CREATE MLOAD LOG4 0x1E DUP12 0x27 0xDF NOT CODESIZE SWAP3 0xDD CALLDATALOAD 0xEF DUP7 DUP7 SLOAD 0xA9 PUSH29 0x47F85CCDA2730175C9B207B1F66264736F6C634300080A003300000000 ",
							"sourceMap": "202:12302:8:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;202:12302:8;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220f051a41e8b27df193892dd35ef868654a97c47f85ccda2730175c9b207b1f66264736f6c634300080a0033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 CREATE MLOAD LOG4 0x1E DUP12 0x27 0xDF NOT CODESIZE SWAP3 0xDD CALLDATALOAD 0xEF DUP7 DUP7 SLOAD 0xA9 PUSH29 0x47F85CCDA2730175C9B207B1F66264736F6C634300080A003300000000 ",
							"sourceMap": "202:12302:8:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17200",
								"executionCost": "103",
								"totalCost": "17303"
							},
							"internal": {
								"average(uint256,uint256)": "infinite",
								"ceilDiv(uint256,uint256)": "infinite",
								"log10(uint256)": "infinite",
								"log10(uint256,enum Math.Rounding)": "infinite",
								"log2(uint256)": "infinite",
								"log2(uint256,enum Math.Rounding)": "infinite",
								"log256(uint256)": "infinite",
								"log256(uint256,enum Math.Rounding)": "infinite",
								"max(uint256,uint256)": "infinite",
								"min(uint256,uint256)": "infinite",
								"mulDiv(uint256,uint256,uint256)": "infinite",
								"mulDiv(uint256,uint256,uint256,enum Math.Rounding)": "infinite",
								"sqrt(uint256)": "infinite",
								"sqrt(uint256,enum Math.Rounding)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 202,
									"end": 12504,
									"name": "PUSH #[$]",
									"source": 8,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 202,
									"end": 12504,
									"name": "PUSH [$]",
									"source": 8,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 202,
									"end": 12504,
									"name": "PUSH",
									"source": 8,
									"value": "B"
								},
								{
									"begin": 202,
									"end": 12504,
									"name": "DUP3",
									"source": 8
								},
								{
									"begin": 202,
									"end": 12504,
									"name": "DUP3",
									"source": 8
								},
								{
									"begin": 202,
									"end": 12504,
									"name": "DUP3",
									"source": 8
								},
								{
									"begin": 202,
									"end": 12504,
									"name": "CODECOPY",
									"source": 8
								},
								{
									"begin": 202,
									"end": 12504,
									"name": "DUP1",
									"source": 8
								},
								{
									"begin": 202,
									"end": 12504,
									"name": "MLOAD",
									"source": 8
								},
								{
									"begin": 202,
									"end": 12504,
									"name": "PUSH",
									"source": 8,
									"value": "0"
								},
								{
									"begin": 202,
									"end": 12504,
									"name": "BYTE",
									"source": 8
								},
								{
									"begin": 202,
									"end": 12504,
									"name": "PUSH",
									"source": 8,
									"value": "73"
								},
								{
									"begin": 202,
									"end": 12504,
									"name": "EQ",
									"source": 8
								},
								{
									"begin": 202,
									"end": 12504,
									"name": "PUSH [tag]",
									"source": 8,
									"value": "1"
								},
								{
									"begin": 202,
									"end": 12504,
									"name": "JUMPI",
									"source": 8
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "4E487B71"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "E0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": 202,
									"end": 12504,
									"name": "PUSH",
									"source": 8,
									"value": "0"
								},
								{
									"begin": 202,
									"end": 12504,
									"name": "MSTORE",
									"source": 8
								},
								{
									"begin": 202,
									"end": 12504,
									"name": "PUSH",
									"source": 8,
									"value": "0"
								},
								{
									"begin": 202,
									"end": 12504,
									"name": "PUSH",
									"source": 8,
									"value": "4"
								},
								{
									"begin": 202,
									"end": 12504,
									"name": "MSTORE",
									"source": 8
								},
								{
									"begin": 202,
									"end": 12504,
									"name": "PUSH",
									"source": 8,
									"value": "24"
								},
								{
									"begin": 202,
									"end": 12504,
									"name": "PUSH",
									"source": 8,
									"value": "0"
								},
								{
									"begin": 202,
									"end": 12504,
									"name": "REVERT",
									"source": 8
								},
								{
									"begin": 202,
									"end": 12504,
									"name": "tag",
									"source": 8,
									"value": "1"
								},
								{
									"begin": 202,
									"end": 12504,
									"name": "JUMPDEST",
									"source": 8
								},
								{
									"begin": 202,
									"end": 12504,
									"name": "ADDRESS",
									"source": 8
								},
								{
									"begin": 202,
									"end": 12504,
									"name": "PUSH",
									"source": 8,
									"value": "0"
								},
								{
									"begin": 202,
									"end": 12504,
									"name": "MSTORE",
									"source": 8
								},
								{
									"begin": 202,
									"end": 12504,
									"name": "PUSH",
									"source": 8,
									"value": "73"
								},
								{
									"begin": 202,
									"end": 12504,
									"name": "DUP2",
									"source": 8
								},
								{
									"begin": 202,
									"end": 12504,
									"name": "MSTORE8",
									"source": 8
								},
								{
									"begin": 202,
									"end": 12504,
									"name": "DUP3",
									"source": 8
								},
								{
									"begin": 202,
									"end": 12504,
									"name": "DUP2",
									"source": 8
								},
								{
									"begin": 202,
									"end": 12504,
									"name": "RETURN",
									"source": 8
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220f051a41e8b27df193892dd35ef868654a97c47f85ccda2730175c9b207b1f66264736f6c634300080a0033",
									".code": [
										{
											"begin": 202,
											"end": 12504,
											"name": "PUSHDEPLOYADDRESS",
											"source": 8
										},
										{
											"begin": 202,
											"end": 12504,
											"name": "ADDRESS",
											"source": 8
										},
										{
											"begin": 202,
											"end": 12504,
											"name": "EQ",
											"source": 8
										},
										{
											"begin": 202,
											"end": 12504,
											"name": "PUSH",
											"source": 8,
											"value": "80"
										},
										{
											"begin": 202,
											"end": 12504,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 202,
											"end": 12504,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 202,
											"end": 12504,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 202,
											"end": 12504,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 202,
											"end": 12504,
											"name": "REVERT",
											"source": 8
										}
									]
								}
							}
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Standard math utilities missing in the Solidity language.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/math/Math.sol\":\"Math\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":10},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/math/Math.sol\":{\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://33bbf48cc069be677705037ba7520c22b1b622c23b33e1a71495f2d36549d40b\",\"dweb:/ipfs/Qmct36zWXv3j7LZB83uwbg7TXwnZSN1fqHNDZ93GG98bGz\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"Midas/Midas_main/src/LPToken.sol": {
				"LPToken": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "string",
									"name": "name_",
									"type": "string"
								},
								{
									"internalType": "string",
									"name": "symbol_",
									"type": "string"
								},
								{
									"internalType": "address",
									"name": "factory_",
									"type": "address"
								}
							],
							"stateMutability": "nonpayable",
							"type": "constructor"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "approved",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "bool",
									"name": "approved",
									"type": "bool"
								}
							],
							"name": "ApprovalForAll",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "burn",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "getApproved",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "pair",
									"type": "address"
								}
							],
							"name": "initialize",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"name": "isApprovedForAll",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "mint",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "name",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "ownerOf",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "safeTransferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "safeTransferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"internalType": "bool",
									"name": "approved",
									"type": "bool"
								}
							],
							"name": "setApprovalForAll",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes4",
									"name": "interfaceId",
									"type": "bytes4"
								}
							],
							"name": "supportsInterface",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "symbol",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "tokenURI",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"author": "midaswap",
						"kind": "dev",
						"methods": {
							"approve(address,uint256)": {
								"details": "See {IERC721-approve}."
							},
							"balanceOf(address)": {
								"details": "See {IERC721-balanceOf}."
							},
							"constructor": {
								"details": "Initializes the contract by setting a `name` and a `symbol` to the token collection."
							},
							"getApproved(uint256)": {
								"details": "See {IERC721-getApproved}."
							},
							"isApprovedForAll(address,address)": {
								"details": "See {IERC721-isApprovedForAll}."
							},
							"name()": {
								"details": "See {IERC721Metadata-name}."
							},
							"ownerOf(uint256)": {
								"details": "See {IERC721-ownerOf}."
							},
							"safeTransferFrom(address,address,uint256)": {
								"details": "See {IERC721-safeTransferFrom}."
							},
							"safeTransferFrom(address,address,uint256,bytes)": {
								"details": "See {IERC721-safeTransferFrom}."
							},
							"setApprovalForAll(address,bool)": {
								"details": "See {IERC721-setApprovalForAll}."
							},
							"supportsInterface(bytes4)": {
								"details": "See {IERC165-supportsInterface}."
							},
							"symbol()": {
								"details": "See {IERC721Metadata-symbol}."
							},
							"tokenURI(uint256)": {
								"details": "See {IERC721Metadata-tokenURI}."
							},
							"transferFrom(address,address,uint256)": {
								"details": "See {IERC721-transferFrom}."
							}
						},
						"title": "Midas ERC721 LP Token",
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"Midas/Midas_main/src/LPToken.sol\":745:17565  contract LPToken is Context, ERC165, IERC721, IERC721Metadata {... */\n  mstore(0x40, 0x80)\n    /* \"Midas/Midas_main/src/LPToken.sol\":1610:1770  constructor(string memory name_, string memory symbol_, address factory_) {... */\n  callvalue\n  dup1\n  iszero\n  tag_1\n  jumpi\n  0x00\n  dup1\n  revert\ntag_1:\n  pop\n  mload(0x40)\n  sub(codesize, bytecodeSize)\n  dup1\n  bytecodeSize\n  dup4\n  codecopy\n  dup2\n  add\n  0x40\n  dup2\n  swap1\n  mstore\n  tag_2\n  swap2\n  tag_3\n  jump\t// in\ntag_2:\n    /* \"Midas/Midas_main/src/LPToken.sol\":1694:1707  _name = name_ */\n  dup3\n  mload\n  tag_6\n  swap1\n    /* \"Midas/Midas_main/src/LPToken.sol\":1694:1699  _name */\n  0x00\n  swap1\n    /* \"Midas/Midas_main/src/LPToken.sol\":1694:1707  _name = name_ */\n  0x20\n  dup7\n  add\n  swap1\n  tag_7\n  jump\t// in\ntag_6:\n  pop\n    /* \"Midas/Midas_main/src/LPToken.sol\":1717:1734  _symbol = symbol_ */\n  dup2\n  mload\n  tag_8\n  swap1\n    /* \"Midas/Midas_main/src/LPToken.sol\":1717:1724  _symbol */\n  0x01\n  swap1\n    /* \"Midas/Midas_main/src/LPToken.sol\":1717:1734  _symbol = symbol_ */\n  0x20\n  dup6\n  add\n  swap1\n  tag_7\n  jump\t// in\ntag_8:\n  pop\n    /* \"Midas/Midas_main/src/LPToken.sol\":1744:1752  _factory */\n  0x03\n    /* \"Midas/Midas_main/src/LPToken.sol\":1744:1763  _factory = factory_ */\n  dup1\n  sload\n  not(sub(shl(0xa0, 0x01), 0x01))\n  and\n  sub(shl(0xa0, 0x01), 0x01)\n  swap3\n  swap1\n  swap3\n  and\n  swap2\n  swap1\n  swap2\n  or\n  swap1\n  sstore\n  pop\n    /* \"Midas/Midas_main/src/LPToken.sol\":745:17565  contract LPToken is Context, ERC165, IERC721, IERC721Metadata {... */\n  tag_23\n  swap1\n  pop\n  jump\ntag_7:\n  dup3\n  dup1\n  sload\n  tag_10\n  swap1\n  tag_11\n  jump\t// in\ntag_10:\n  swap1\n  0x00\n  mstore\n  keccak256(0x00, 0x20)\n  swap1\n  0x1f\n  add\n  0x20\n  swap1\n  div\n  dup2\n  add\n  swap3\n  dup3\n  tag_13\n  jumpi\n  0x00\n  dup6\n  sstore\n  jump(tag_16)\ntag_13:\n  dup3\n  0x1f\n  lt\n  tag_14\n  jumpi\n  dup1\n  mload\n  not(0xff)\n  and\n  dup4\n  dup1\n  add\n  or\n  dup6\n  sstore\n  jump(tag_16)\ntag_14:\n  dup3\n  dup1\n  add\n  0x01\n  add\n  dup6\n  sstore\n  dup3\n  iszero\n  tag_16\n  jumpi\n  swap2\n  dup3\n  add\ntag_15:\n  dup3\n  dup2\n  gt\n  iszero\n  tag_16\n  jumpi\n  dup3\n  mload\n  dup3\n  sstore\n  swap2\n  0x20\n  add\n  swap2\n  swap1\n  0x01\n  add\n  swap1\n  jump(tag_15)\ntag_16:\n  pop\n  tag_17\n  swap3\n  swap2\n  pop\n  tag_18\n  jump\t// in\ntag_17:\n  pop\n  swap1\n  jump\t// out\ntag_18:\ntag_19:\n  dup1\n  dup3\n  gt\n  iszero\n  tag_17\n  jumpi\n  0x00\n  dup2\n  sstore\n  0x01\n  add\n  jump(tag_19)\n    /* \"#utility.yul\":14:141   */\ntag_21:\n    /* \"#utility.yul\":75:85   */\n  0x4e487b71\n    /* \"#utility.yul\":70:73   */\n  0xe0\n    /* \"#utility.yul\":66:86   */\n  shl\n    /* \"#utility.yul\":63:64   */\n  0x00\n    /* \"#utility.yul\":56:87   */\n  mstore\n    /* \"#utility.yul\":106:110   */\n  0x41\n    /* \"#utility.yul\":103:104   */\n  0x04\n    /* \"#utility.yul\":96:111   */\n  mstore\n    /* \"#utility.yul\":130:134   */\n  0x24\n    /* \"#utility.yul\":127:128   */\n  0x00\n    /* \"#utility.yul\":120:135   */\n  revert\n    /* \"#utility.yul\":146:1031   */\ntag_22:\n    /* \"#utility.yul\":200:205   */\n  0x00\n    /* \"#utility.yul\":253:256   */\n  dup3\n    /* \"#utility.yul\":246:250   */\n  0x1f\n    /* \"#utility.yul\":238:244   */\n  dup4\n    /* \"#utility.yul\":234:251   */\n  add\n    /* \"#utility.yul\":230:257   */\n  slt\n    /* \"#utility.yul\":220:275   */\n  tag_26\n  jumpi\n    /* \"#utility.yul\":271:272   */\n  0x00\n    /* \"#utility.yul\":268:269   */\n  dup1\n    /* \"#utility.yul\":261:273   */\n  revert\n    /* \"#utility.yul\":220:275   */\ntag_26:\n    /* \"#utility.yul\":294:307   */\n  dup2\n  mload\n  sub(shl(0x40, 0x01), 0x01)\n    /* \"#utility.yul\":356:366   */\n  dup1\n  dup3\n  gt\n    /* \"#utility.yul\":353:389   */\n  iszero\n  tag_28\n  jumpi\n    /* \"#utility.yul\":369:387   */\n  tag_28\n  tag_21\n  jump\t// in\ntag_28:\n    /* \"#utility.yul\":444:446   */\n  0x40\n    /* \"#utility.yul\":438:447   */\n  mload\n    /* \"#utility.yul\":412:414   */\n  0x1f\n    /* \"#utility.yul\":498:511   */\n  dup4\n  add\n  not(0x1f)\n    /* \"#utility.yul\":494:516   */\n  swap1\n  dup2\n  and\n    /* \"#utility.yul\":518:520   */\n  0x3f\n    /* \"#utility.yul\":490:521   */\n  add\n    /* \"#utility.yul\":486:526   */\n  and\n    /* \"#utility.yul\":474:527   */\n  dup2\n  add\n  swap1\n    /* \"#utility.yul\":542:560   */\n  dup3\n  dup3\n  gt\n    /* \"#utility.yul\":562:584   */\n  dup2\n  dup4\n  lt\n    /* \"#utility.yul\":539:585   */\n  or\n    /* \"#utility.yul\":536:608   */\n  iszero\n  tag_30\n  jumpi\n    /* \"#utility.yul\":588:606   */\n  tag_30\n  tag_21\n  jump\t// in\ntag_30:\n    /* \"#utility.yul\":628:638   */\n  dup2\n    /* \"#utility.yul\":624:626   */\n  0x40\n    /* \"#utility.yul\":617:639   */\n  mstore\n    /* \"#utility.yul\":663:665   */\n  dup4\n    /* \"#utility.yul\":655:661   */\n  dup2\n    /* \"#utility.yul\":648:666   */\n  mstore\n    /* \"#utility.yul\":685:689   */\n  0x20\n    /* \"#utility.yul\":675:689   */\n  swap3\n  pop\n    /* \"#utility.yul\":730:733   */\n  dup7\n    /* \"#utility.yul\":725:727   */\n  dup4\n    /* \"#utility.yul\":720:722   */\n  dup6\n    /* \"#utility.yul\":712:718   */\n  dup9\n    /* \"#utility.yul\":708:723   */\n  add\n    /* \"#utility.yul\":704:728   */\n  add\n    /* \"#utility.yul\":701:734   */\n  gt\n    /* \"#utility.yul\":698:751   */\n  iszero\n  tag_31\n  jumpi\n    /* \"#utility.yul\":747:748   */\n  0x00\n    /* \"#utility.yul\":744:745   */\n  dup1\n    /* \"#utility.yul\":737:749   */\n  revert\n    /* \"#utility.yul\":698:751   */\ntag_31:\n    /* \"#utility.yul\":769:770   */\n  0x00\n    /* \"#utility.yul\":760:770   */\n  swap2\n  pop\n    /* \"#utility.yul\":779:912   */\ntag_32:\n    /* \"#utility.yul\":793:795   */\n  dup4\n    /* \"#utility.yul\":790:791   */\n  dup3\n    /* \"#utility.yul\":787:796   */\n  lt\n    /* \"#utility.yul\":779:912   */\n  iszero\n  tag_34\n  jumpi\n    /* \"#utility.yul\":881:895   */\n  dup6\n  dup3\n  add\n    /* \"#utility.yul\":877:900   */\n  dup4\n  add\n    /* \"#utility.yul\":871:901   */\n  mload\n    /* \"#utility.yul\":850:864   */\n  dup2\n  dup4\n  add\n    /* \"#utility.yul\":846:869   */\n  dup5\n  add\n    /* \"#utility.yul\":839:902   */\n  mstore\n    /* \"#utility.yul\":804:814   */\n  swap1\n  dup3\n  add\n  swap1\n    /* \"#utility.yul\":779:912   */\n  jump(tag_32)\ntag_34:\n    /* \"#utility.yul\":930:932   */\n  dup4\n    /* \"#utility.yul\":927:928   */\n  dup3\n    /* \"#utility.yul\":924:933   */\n  gt\n    /* \"#utility.yul\":921:1001   */\n  iszero\n  tag_35\n  jumpi\n    /* \"#utility.yul\":989:990   */\n  0x00\n    /* \"#utility.yul\":984:986   */\n  dup4\n    /* \"#utility.yul\":979:981   */\n  dup6\n    /* \"#utility.yul\":971:977   */\n  dup4\n    /* \"#utility.yul\":967:982   */\n  add\n    /* \"#utility.yul\":963:987   */\n  add\n    /* \"#utility.yul\":956:991   */\n  mstore\n    /* \"#utility.yul\":921:1001   */\ntag_35:\n    /* \"#utility.yul\":1019:1025   */\n  swap7\n    /* \"#utility.yul\":146:1031   */\n  swap6\n  pop\n  pop\n  pop\n  pop\n  pop\n  pop\n  jump\t// out\n    /* \"#utility.yul\":1036:1765   */\ntag_3:\n    /* \"#utility.yul\":1144:1150   */\n  0x00\n    /* \"#utility.yul\":1152:1158   */\n  dup1\n    /* \"#utility.yul\":1160:1166   */\n  0x00\n    /* \"#utility.yul\":1213:1215   */\n  0x60\n    /* \"#utility.yul\":1201:1210   */\n  dup5\n    /* \"#utility.yul\":1192:1199   */\n  dup7\n    /* \"#utility.yul\":1188:1211   */\n  sub\n    /* \"#utility.yul\":1184:1216   */\n  slt\n    /* \"#utility.yul\":1181:1233   */\n  iszero\n  tag_37\n  jumpi\n    /* \"#utility.yul\":1229:1230   */\n  0x00\n    /* \"#utility.yul\":1226:1227   */\n  dup1\n    /* \"#utility.yul\":1219:1231   */\n  revert\n    /* \"#utility.yul\":1181:1233   */\ntag_37:\n    /* \"#utility.yul\":1256:1272   */\n  dup4\n  mload\n  sub(shl(0x40, 0x01), 0x01)\n    /* \"#utility.yul\":1321:1335   */\n  dup1\n  dup3\n  gt\n    /* \"#utility.yul\":1318:1352   */\n  iszero\n  tag_38\n  jumpi\n    /* \"#utility.yul\":1348:1349   */\n  0x00\n    /* \"#utility.yul\":1345:1346   */\n  dup1\n    /* \"#utility.yul\":1338:1350   */\n  revert\n    /* \"#utility.yul\":1318:1352   */\ntag_38:\n    /* \"#utility.yul\":1371:1432   */\n  tag_39\n    /* \"#utility.yul\":1424:1431   */\n  dup8\n    /* \"#utility.yul\":1415:1421   */\n  dup4\n    /* \"#utility.yul\":1404:1413   */\n  dup9\n    /* \"#utility.yul\":1400:1422   */\n  add\n    /* \"#utility.yul\":1371:1432   */\n  tag_22\n  jump\t// in\ntag_39:\n    /* \"#utility.yul\":1361:1432   */\n  swap5\n  pop\n    /* \"#utility.yul\":1478:1480   */\n  0x20\n    /* \"#utility.yul\":1467:1476   */\n  dup7\n    /* \"#utility.yul\":1463:1481   */\n  add\n    /* \"#utility.yul\":1457:1482   */\n  mload\n    /* \"#utility.yul\":1441:1482   */\n  swap2\n  pop\n    /* \"#utility.yul\":1507:1509   */\n  dup1\n    /* \"#utility.yul\":1497:1505   */\n  dup3\n    /* \"#utility.yul\":1494:1510   */\n  gt\n    /* \"#utility.yul\":1491:1527   */\n  iszero\n  tag_40\n  jumpi\n    /* \"#utility.yul\":1523:1524   */\n  0x00\n    /* \"#utility.yul\":1520:1521   */\n  dup1\n    /* \"#utility.yul\":1513:1525   */\n  revert\n    /* \"#utility.yul\":1491:1527   */\ntag_40:\n  pop\n    /* \"#utility.yul\":1546:1609   */\n  tag_41\n    /* \"#utility.yul\":1601:1608   */\n  dup7\n    /* \"#utility.yul\":1590:1598   */\n  dup3\n    /* \"#utility.yul\":1579:1588   */\n  dup8\n    /* \"#utility.yul\":1575:1599   */\n  add\n    /* \"#utility.yul\":1546:1609   */\n  tag_22\n  jump\t// in\ntag_41:\n    /* \"#utility.yul\":1652:1654   */\n  0x40\n    /* \"#utility.yul\":1637:1655   */\n  dup7\n  add\n    /* \"#utility.yul\":1631:1656   */\n  mload\n    /* \"#utility.yul\":1536:1609   */\n  swap1\n  swap4\n  pop\n    /* \"#utility.yul\":1631:1656   */\n  swap1\n  pop\n  sub(shl(0xa0, 0x01), 0x01)\n    /* \"#utility.yul\":1685:1716   */\n  dup2\n  and\n    /* \"#utility.yul\":1675:1717   */\n  dup2\n  eq\n    /* \"#utility.yul\":1665:1735   */\n  tag_42\n  jumpi\n    /* \"#utility.yul\":1731:1732   */\n  0x00\n    /* \"#utility.yul\":1728:1729   */\n  dup1\n    /* \"#utility.yul\":1721:1733   */\n  revert\n    /* \"#utility.yul\":1665:1735   */\ntag_42:\n    /* \"#utility.yul\":1754:1759   */\n  dup1\n    /* \"#utility.yul\":1744:1759   */\n  swap2\n  pop\n  pop\n    /* \"#utility.yul\":1036:1765   */\n  swap3\n  pop\n  swap3\n  pop\n  swap3\n  jump\t// out\n    /* \"#utility.yul\":1770:2150   */\ntag_11:\n    /* \"#utility.yul\":1849:1850   */\n  0x01\n    /* \"#utility.yul\":1845:1857   */\n  dup2\n  dup2\n  shr\n  swap1\n    /* \"#utility.yul\":1892:1904   */\n  dup3\n  and\n  dup1\n    /* \"#utility.yul\":1913:1974   */\n  tag_44\n  jumpi\n    /* \"#utility.yul\":1967:1971   */\n  0x7f\n    /* \"#utility.yul\":1959:1965   */\n  dup3\n    /* \"#utility.yul\":1955:1972   */\n  and\n    /* \"#utility.yul\":1945:1972   */\n  swap2\n  pop\n    /* \"#utility.yul\":1913:1974   */\ntag_44:\n    /* \"#utility.yul\":2020:2022   */\n  0x20\n    /* \"#utility.yul\":2012:2018   */\n  dup3\n    /* \"#utility.yul\":2009:2023   */\n  lt\n    /* \"#utility.yul\":1989:2007   */\n  dup2\n    /* \"#utility.yul\":1986:2024   */\n  eq\n    /* \"#utility.yul\":1983:2144   */\n  iszero\n  tag_45\n  jumpi\n    /* \"#utility.yul\":2066:2076   */\n  0x4e487b71\n    /* \"#utility.yul\":2061:2064   */\n  0xe0\n    /* \"#utility.yul\":2057:2077   */\n  shl\n    /* \"#utility.yul\":2054:2055   */\n  0x00\n    /* \"#utility.yul\":2047:2078   */\n  mstore\n    /* \"#utility.yul\":2101:2105   */\n  0x22\n    /* \"#utility.yul\":2098:2099   */\n  0x04\n    /* \"#utility.yul\":2091:2106   */\n  mstore\n    /* \"#utility.yul\":2129:2133   */\n  0x24\n    /* \"#utility.yul\":2126:2127   */\n  0x00\n    /* \"#utility.yul\":2119:2134   */\n  revert\n    /* \"#utility.yul\":1983:2144   */\ntag_45:\n  pop\n    /* \"#utility.yul\":1770:2150   */\n  swap2\n  swap1\n  pop\n  jump\t// out\ntag_23:\n    /* \"Midas/Midas_main/src/LPToken.sol\":745:17565  contract LPToken is Context, ERC165, IERC721, IERC721Metadata {... */\n  dataSize(sub_0)\n  dup1\n  dataOffset(sub_0)\n  0x00\n  codecopy\n  0x00\n  return\nstop\n\nsub_0: assembly {\n        /* \"Midas/Midas_main/src/LPToken.sol\":745:17565  contract LPToken is Context, ERC165, IERC721, IERC721Metadata {... */\n      mstore(0x40, 0x80)\n      callvalue\n      dup1\n      iszero\n      tag_1\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_1:\n      pop\n      jumpi(tag_2, lt(calldatasize, 0x04))\n      shr(0xe0, calldataload(0x00))\n      dup1\n      0x01ffc9a7\n      eq\n      tag_3\n      jumpi\n      dup1\n      0x06fdde03\n      eq\n      tag_4\n      jumpi\n      dup1\n      0x081812fc\n      eq\n      tag_5\n      jumpi\n      dup1\n      0x095ea7b3\n      eq\n      tag_6\n      jumpi\n      dup1\n      0x23b872dd\n      eq\n      tag_7\n      jumpi\n      dup1\n      0x40c10f19\n      eq\n      tag_8\n      jumpi\n      dup1\n      0x42842e0e\n      eq\n      tag_9\n      jumpi\n      dup1\n      0x42966c68\n      eq\n      tag_10\n      jumpi\n      dup1\n      0x6352211e\n      eq\n      tag_11\n      jumpi\n      dup1\n      0x70a08231\n      eq\n      tag_12\n      jumpi\n      dup1\n      0x95d89b41\n      eq\n      tag_13\n      jumpi\n      dup1\n      0xa22cb465\n      eq\n      tag_14\n      jumpi\n      dup1\n      0xb88d4fde\n      eq\n      tag_15\n      jumpi\n      dup1\n      0xc4d66de8\n      eq\n      tag_16\n      jumpi\n      dup1\n      0xc87b56dd\n      eq\n      tag_17\n      jumpi\n      dup1\n      0xe985e9c5\n      eq\n      tag_18\n      jumpi\n    tag_2:\n      0x00\n      dup1\n      revert\n        /* \"Midas/Midas_main/src/LPToken.sol\":2421:2721  function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {... */\n    tag_3:\n      tag_19\n      tag_20\n      calldatasize\n      0x04\n      tag_21\n      jump\t// in\n    tag_20:\n      tag_22\n      jump\t// in\n    tag_19:\n      mload(0x40)\n        /* \"#utility.yul\":565:579   */\n      swap1\n      iszero\n        /* \"#utility.yul\":558:580   */\n      iszero\n        /* \"#utility.yul\":540:581   */\n      dup2\n      mstore\n        /* \"#utility.yul\":528:530   */\n      0x20\n        /* \"#utility.yul\":513:531   */\n      add\n        /* \"Midas/Midas_main/src/LPToken.sol\":2421:2721  function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {... */\n    tag_23:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"Midas/Midas_main/src/LPToken.sol\":3324:3422  function name() public view virtual override returns (string memory) {... */\n    tag_4:\n      tag_25\n      tag_26\n      jump\t// in\n    tag_25:\n      mload(0x40)\n      tag_23\n      swap2\n      swap1\n      tag_28\n      jump\t// in\n        /* \"Midas/Midas_main/src/LPToken.sol\":4791:4958  function getApproved(uint256 tokenId) public view virtual override returns (address) {... */\n    tag_5:\n      tag_29\n      tag_30\n      calldatasize\n      0x04\n      tag_31\n      jump\t// in\n    tag_30:\n      tag_32\n      jump\t// in\n    tag_29:\n      mload(0x40)\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"#utility.yul\":1692:1724   */\n      swap1\n      swap2\n      and\n        /* \"#utility.yul\":1674:1725   */\n      dup2\n      mstore\n        /* \"#utility.yul\":1662:1664   */\n      0x20\n        /* \"#utility.yul\":1647:1665   */\n      add\n        /* \"Midas/Midas_main/src/LPToken.sol\":4791:4958  function getApproved(uint256 tokenId) public view virtual override returns (address) {... */\n      tag_23\n        /* \"#utility.yul\":1528:1731   */\n      jump\n        /* \"Midas/Midas_main/src/LPToken.sol\":4321:4730  function approve(address to, uint256 tokenId) public virtual override {... */\n    tag_6:\n      tag_35\n      tag_36\n      calldatasize\n      0x04\n      tag_37\n      jump\t// in\n    tag_36:\n      tag_38\n      jump\t// in\n    tag_35:\n      stop\n        /* \"Midas/Midas_main/src/LPToken.sol\":5468:5765  function transferFrom(address from, address to, uint256 tokenId) public virtual override {... */\n    tag_7:\n      tag_35\n      tag_40\n      calldatasize\n      0x04\n      tag_41\n      jump\t// in\n    tag_40:\n      tag_42\n      jump\t// in\n        /* \"Midas/Midas_main/src/LPToken.sol\":2046:2152  function mint(address to, uint256 tokenId) public virtual onlyPair {... */\n    tag_8:\n      tag_35\n      tag_44\n      calldatasize\n      0x04\n      tag_37\n      jump\t// in\n    tag_44:\n      tag_45\n      jump\t// in\n        /* \"Midas/Midas_main/src/LPToken.sol\":5831:5980  function safeTransferFrom(address from, address to, uint256 tokenId) public virtual override {... */\n    tag_9:\n      tag_35\n      tag_47\n      calldatasize\n      0x04\n      tag_41\n      jump\t// in\n    tag_47:\n      tag_48\n      jump\t// in\n        /* \"Midas/Midas_main/src/LPToken.sol\":2158:2354  function burn(uint256 tokenId) public virtual onlyPair {... */\n    tag_10:\n      tag_35\n      tag_50\n      calldatasize\n      0x04\n      tag_31\n      jump\t// in\n    tag_50:\n      tag_51\n      jump\t// in\n        /* \"Midas/Midas_main/src/LPToken.sol\":3042:3262  function ownerOf(uint256 tokenId) public view virtual override returns (address) {... */\n    tag_11:\n      tag_29\n      tag_53\n      calldatasize\n      0x04\n      tag_31\n      jump\t// in\n    tag_53:\n      tag_54\n      jump\t// in\n        /* \"Midas/Midas_main/src/LPToken.sol\":2780:2985  function balanceOf(address owner) public view virtual override returns (uint256) {... */\n    tag_12:\n      tag_56\n      tag_57\n      calldatasize\n      0x04\n      tag_58\n      jump\t// in\n    tag_57:\n      tag_59\n      jump\t// in\n    tag_56:\n      mload(0x40)\n        /* \"#utility.yul\":2843:2868   */\n      swap1\n      dup2\n      mstore\n        /* \"#utility.yul\":2831:2833   */\n      0x20\n        /* \"#utility.yul\":2816:2834   */\n      add\n        /* \"Midas/Midas_main/src/LPToken.sol\":2780:2985  function balanceOf(address owner) public view virtual override returns (uint256) {... */\n      tag_23\n        /* \"#utility.yul\":2697:2874   */\n      jump\n        /* \"Midas/Midas_main/src/LPToken.sol\":3486:3588  function symbol() public view virtual override returns (string memory) {... */\n    tag_13:\n      tag_25\n      tag_63\n      jump\t// in\n        /* \"Midas/Midas_main/src/LPToken.sol\":5025:5178  function setApprovalForAll(address operator, bool approved) public virtual override {... */\n    tag_14:\n      tag_35\n      tag_66\n      calldatasize\n      0x04\n      tag_67\n      jump\t// in\n    tag_66:\n      tag_68\n      jump\t// in\n        /* \"Midas/Midas_main/src/LPToken.sol\":6046:6323  function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public virtual override {... */\n    tag_15:\n      tag_35\n      tag_70\n      calldatasize\n      0x04\n      tag_71\n      jump\t// in\n    tag_70:\n      tag_72\n      jump\t// in\n        /* \"Midas/Midas_main/src/LPToken.sol\":1946:2036  function initialize(address pair) public virtual onlyFactory {... */\n    tag_16:\n      tag_35\n      tag_74\n      calldatasize\n      0x04\n      tag_58\n      jump\t// in\n    tag_74:\n      tag_75\n      jump\t// in\n        /* \"Midas/Midas_main/src/LPToken.sol\":3654:3930  function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {... */\n    tag_17:\n      tag_25\n      tag_77\n      calldatasize\n      0x04\n      tag_31\n      jump\t// in\n    tag_77:\n      tag_78\n      jump\t// in\n        /* \"Midas/Midas_main/src/LPToken.sol\":5244:5406  function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {... */\n    tag_18:\n      tag_19\n      tag_81\n      calldatasize\n      0x04\n      tag_82\n      jump\t// in\n    tag_81:\n      tag_83\n      jump\t// in\n        /* \"Midas/Midas_main/src/LPToken.sol\":2421:2721  function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {... */\n    tag_22:\n        /* \"Midas/Midas_main/src/LPToken.sol\":2523:2527  bool */\n      0x00\n      not(sub(shl(0xe0, 0x01), 0x01))\n        /* \"Midas/Midas_main/src/LPToken.sol\":2558:2598  interfaceId == type(IERC721).interfaceId */\n      dup3\n      and\n      shl(0xe0, 0x80ac58cd)\n      eq\n      dup1\n        /* \"Midas/Midas_main/src/LPToken.sol\":2558:2662  interfaceId == type(IERC721).interfaceId ||... */\n      tag_86\n      jumpi\n      pop\n      not(sub(shl(0xe0, 0x01), 0x01))\n        /* \"Midas/Midas_main/src/LPToken.sol\":2614:2662  interfaceId == type(IERC721Metadata).interfaceId */\n      dup3\n      and\n      shl(0xe0, 0x5b5e139f)\n      eq\n        /* \"Midas/Midas_main/src/LPToken.sol\":2558:2662  interfaceId == type(IERC721).interfaceId ||... */\n    tag_86:\n        /* \"Midas/Midas_main/src/LPToken.sol\":2558:2714  interfaceId == type(IERC721).interfaceId ||... */\n      dup1\n      tag_88\n      jumpi\n      pop\n      shl(0xe0, 0x01ffc9a7)\n      not(sub(shl(0xe0, 0x01), 0x01))\n        /* \"@openzeppelin/contracts/utils/introspection/ERC165.sol\":937:977  interfaceId == type(IERC165).interfaceId */\n      dup4\n      and\n      eq\n        /* \"Midas/Midas_main/src/LPToken.sol\":2678:2714  super.supportsInterface(interfaceId) */\n    tag_88:\n        /* \"Midas/Midas_main/src/LPToken.sol\":2539:2714  return... */\n      swap3\n        /* \"Midas/Midas_main/src/LPToken.sol\":2421:2721  function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {... */\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"Midas/Midas_main/src/LPToken.sol\":3324:3422  function name() public view virtual override returns (string memory) {... */\n    tag_26:\n        /* \"Midas/Midas_main/src/LPToken.sol\":3378:3391  string memory */\n      0x60\n        /* \"Midas/Midas_main/src/LPToken.sol\":3410:3415  _name */\n      0x00\n        /* \"Midas/Midas_main/src/LPToken.sol\":3403:3415  return _name */\n      dup1\n      sload\n      tag_91\n      swap1\n      tag_92\n      jump\t// in\n    tag_91:\n      dup1\n      0x1f\n      add\n      0x20\n      dup1\n      swap2\n      div\n      mul\n      0x20\n      add\n      mload(0x40)\n      swap1\n      dup2\n      add\n      0x40\n      mstore\n      dup1\n      swap3\n      swap2\n      swap1\n      dup2\n      dup2\n      mstore\n      0x20\n      add\n      dup3\n      dup1\n      sload\n      tag_93\n      swap1\n      tag_92\n      jump\t// in\n    tag_93:\n      dup1\n      iszero\n      tag_94\n      jumpi\n      dup1\n      0x1f\n      lt\n      tag_95\n      jumpi\n      0x0100\n      dup1\n      dup4\n      sload\n      div\n      mul\n      dup4\n      mstore\n      swap2\n      0x20\n      add\n      swap2\n      jump(tag_94)\n    tag_95:\n      dup3\n      add\n      swap2\n      swap1\n      0x00\n      mstore\n      keccak256(0x00, 0x20)\n      swap1\n    tag_96:\n      dup2\n      sload\n      dup2\n      mstore\n      swap1\n      0x01\n      add\n      swap1\n      0x20\n      add\n      dup1\n      dup4\n      gt\n      tag_96\n      jumpi\n      dup3\n      swap1\n      sub\n      0x1f\n      and\n      dup3\n      add\n      swap2\n    tag_94:\n      pop\n      pop\n      pop\n      pop\n      pop\n      swap1\n      pop\n        /* \"Midas/Midas_main/src/LPToken.sol\":3324:3422  function name() public view virtual override returns (string memory) {... */\n      swap1\n      jump\t// out\n        /* \"Midas/Midas_main/src/LPToken.sol\":4791:4958  function getApproved(uint256 tokenId) public view virtual override returns (address) {... */\n    tag_32:\n        /* \"Midas/Midas_main/src/LPToken.sol\":4867:4874  address */\n      0x00\n        /* \"Midas/Midas_main/src/LPToken.sol\":4886:4909  _requireMinted(tokenId) */\n      tag_98\n        /* \"Midas/Midas_main/src/LPToken.sol\":4901:4908  tokenId */\n      dup3\n        /* \"Midas/Midas_main/src/LPToken.sol\":4886:4900  _requireMinted */\n      tag_99\n        /* \"Midas/Midas_main/src/LPToken.sol\":4886:4909  _requireMinted(tokenId) */\n      jump\t// in\n    tag_98:\n      pop\n        /* \"Midas/Midas_main/src/LPToken.sol\":4927:4951  _tokenApprovals[tokenId] */\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"Midas/Midas_main/src/LPToken.sol\":4927:4942  _tokenApprovals */\n      0x06\n        /* \"Midas/Midas_main/src/LPToken.sol\":4927:4951  _tokenApprovals[tokenId] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n      sload\n      sub(shl(0xa0, 0x01), 0x01)\n      and\n      swap1\n        /* \"Midas/Midas_main/src/LPToken.sol\":4791:4958  function getApproved(uint256 tokenId) public view virtual override returns (address) {... */\n      jump\t// out\n        /* \"Midas/Midas_main/src/LPToken.sol\":4321:4730  function approve(address to, uint256 tokenId) public virtual override {... */\n    tag_38:\n        /* \"Midas/Midas_main/src/LPToken.sol\":4401:4414  address owner */\n      0x00\n        /* \"Midas/Midas_main/src/LPToken.sol\":4417:4441  LPToken.ownerOf(tokenId) */\n      tag_101\n        /* \"Midas/Midas_main/src/LPToken.sol\":4433:4440  tokenId */\n      dup3\n        /* \"Midas/Midas_main/src/LPToken.sol\":4417:4432  LPToken.ownerOf */\n      tag_54\n        /* \"Midas/Midas_main/src/LPToken.sol\":4417:4441  LPToken.ownerOf(tokenId) */\n      jump\t// in\n    tag_101:\n        /* \"Midas/Midas_main/src/LPToken.sol\":4401:4441  address owner = LPToken.ownerOf(tokenId) */\n      swap1\n      pop\n        /* \"Midas/Midas_main/src/LPToken.sol\":4465:4470  owner */\n      dup1\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"Midas/Midas_main/src/LPToken.sol\":4459:4470  to != owner */\n      and\n        /* \"Midas/Midas_main/src/LPToken.sol\":4459:4461  to */\n      dup4\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"Midas/Midas_main/src/LPToken.sol\":4459:4470  to != owner */\n      and\n      eq\n      iszero\n        /* \"Midas/Midas_main/src/LPToken.sol\":4451:4509  require(to != owner, \"LPToken: approval to current owner\") */\n      tag_102\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":5358:5360   */\n      0x20\n        /* \"Midas/Midas_main/src/LPToken.sol\":4451:4509  require(to != owner, \"LPToken: approval to current owner\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":5340:5361   */\n      mstore\n        /* \"#utility.yul\":5397:5399   */\n      0x22\n        /* \"#utility.yul\":5377:5395   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":5370:5400   */\n      mstore\n        /* \"#utility.yul\":5436:5470   */\n      0x4c50546f6b656e3a20617070726f76616c20746f2063757272656e74206f776e\n        /* \"#utility.yul\":5416:5434   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":5409:5471   */\n      mstore\n      shl(0xf1, 0x32b9)\n        /* \"#utility.yul\":5487:5505   */\n      0x64\n      dup3\n      add\n        /* \"#utility.yul\":5480:5512   */\n      mstore\n        /* \"#utility.yul\":5529:5548   */\n      0x84\n      add\n        /* \"Midas/Midas_main/src/LPToken.sol\":4451:4509  require(to != owner, \"LPToken: approval to current owner\") */\n    tag_103:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_102:\n        /* \"@openzeppelin/contracts/utils/Context.sol\":719:729  msg.sender */\n      caller\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"Midas/Midas_main/src/LPToken.sol\":4541:4562  _msgSender() == owner */\n      dup3\n      and\n      eq\n      dup1\n        /* \"Midas/Midas_main/src/LPToken.sol\":4541:4603  _msgSender() == owner || isApprovedForAll(owner, _msgSender()) */\n      tag_108\n      jumpi\n      pop\n        /* \"Midas/Midas_main/src/LPToken.sol\":4566:4603  isApprovedForAll(owner, _msgSender()) */\n      tag_108\n        /* \"Midas/Midas_main/src/LPToken.sol\":4583:4588  owner */\n      dup2\n        /* \"@openzeppelin/contracts/utils/Context.sol\":719:729  msg.sender */\n      caller\n        /* \"Midas/Midas_main/src/LPToken.sol\":5244:5406  function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {... */\n      tag_83\n      jump\t// in\n        /* \"Midas/Midas_main/src/LPToken.sol\":4566:4603  isApprovedForAll(owner, _msgSender()) */\n    tag_108:\n        /* \"Midas/Midas_main/src/LPToken.sol\":4520:4691  require(... */\n      tag_110\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":5761:5763   */\n      0x20\n        /* \"Midas/Midas_main/src/LPToken.sol\":4520:4691  require(... */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":5743:5764   */\n      mstore\n        /* \"#utility.yul\":5800:5802   */\n      0x3e\n        /* \"#utility.yul\":5780:5798   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":5773:5803   */\n      mstore\n        /* \"#utility.yul\":5839:5873   */\n      0x4c50546f6b656e3a20617070726f76652063616c6c6572206973206e6f742074\n        /* \"#utility.yul\":5819:5837   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":5812:5874   */\n      mstore\n        /* \"#utility.yul\":5910:5942   */\n      0x6f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c0000\n        /* \"#utility.yul\":5890:5908   */\n      0x64\n      dup3\n      add\n        /* \"#utility.yul\":5883:5943   */\n      mstore\n        /* \"#utility.yul\":5960:5979   */\n      0x84\n      add\n        /* \"Midas/Midas_main/src/LPToken.sol\":4520:4691  require(... */\n      tag_103\n        /* \"#utility.yul\":5559:5985   */\n      jump\n        /* \"Midas/Midas_main/src/LPToken.sol\":4520:4691  require(... */\n    tag_110:\n        /* \"Midas/Midas_main/src/LPToken.sol\":4702:4723  _approve(to, tokenId) */\n      tag_113\n        /* \"Midas/Midas_main/src/LPToken.sol\":4711:4713  to */\n      dup4\n        /* \"Midas/Midas_main/src/LPToken.sol\":4715:4722  tokenId */\n      dup4\n        /* \"Midas/Midas_main/src/LPToken.sol\":4702:4710  _approve */\n      tag_114\n        /* \"Midas/Midas_main/src/LPToken.sol\":4702:4723  _approve(to, tokenId) */\n      jump\t// in\n    tag_113:\n        /* \"Midas/Midas_main/src/LPToken.sol\":4391:4730  {... */\n      pop\n        /* \"Midas/Midas_main/src/LPToken.sol\":4321:4730  function approve(address to, uint256 tokenId) public virtual override {... */\n      pop\n      pop\n      jump\t// out\n        /* \"Midas/Midas_main/src/LPToken.sol\":5468:5765  function transferFrom(address from, address to, uint256 tokenId) public virtual override {... */\n    tag_42:\n        /* \"Midas/Midas_main/src/LPToken.sol\":5627:5668  _isApprovedOrOwner(_msgSender(), tokenId) */\n      tag_116\n        /* \"@openzeppelin/contracts/utils/Context.sol\":719:729  msg.sender */\n      caller\n        /* \"Midas/Midas_main/src/LPToken.sol\":5646:5658  _msgSender() */\n    tag_117:\n        /* \"Midas/Midas_main/src/LPToken.sol\":5660:5667  tokenId */\n      dup3\n        /* \"Midas/Midas_main/src/LPToken.sol\":5627:5645  _isApprovedOrOwner */\n      tag_118\n        /* \"Midas/Midas_main/src/LPToken.sol\":5627:5668  _isApprovedOrOwner(_msgSender(), tokenId) */\n      jump\t// in\n    tag_116:\n        /* \"Midas/Midas_main/src/LPToken.sol\":5619:5719  require(_isApprovedOrOwner(_msgSender(), tokenId), \"LPToken: caller is not token owner or approved\") */\n      tag_119\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_103\n      swap1\n      tag_121\n      jump\t// in\n    tag_119:\n        /* \"Midas/Midas_main/src/LPToken.sol\":5730:5758  _transfer(from, to, tokenId) */\n      tag_113\n        /* \"Midas/Midas_main/src/LPToken.sol\":5740:5744  from */\n      dup4\n        /* \"Midas/Midas_main/src/LPToken.sol\":5746:5748  to */\n      dup4\n        /* \"Midas/Midas_main/src/LPToken.sol\":5750:5757  tokenId */\n      dup4\n        /* \"Midas/Midas_main/src/LPToken.sol\":5730:5739  _transfer */\n      tag_123\n        /* \"Midas/Midas_main/src/LPToken.sol\":5730:5758  _transfer(from, to, tokenId) */\n      jump\t// in\n        /* \"Midas/Midas_main/src/LPToken.sol\":2046:2152  function mint(address to, uint256 tokenId) public virtual onlyPair {... */\n    tag_45:\n        /* \"Midas/Midas_main/src/LPToken.sol\":1830:1835  _pair */\n      and(sub(shl(0xa0, 0x01), 0x01), sload(0x02))\n        /* \"Midas/Midas_main/src/LPToken.sol\":1816:1826  msg.sender */\n      caller\n        /* \"Midas/Midas_main/src/LPToken.sol\":1816:1835  msg.sender == _pair */\n      eq\n        /* \"Midas/Midas_main/src/LPToken.sol\":1808:1836  require(msg.sender == _pair) */\n      tag_125\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_125:\n        /* \"Midas/Midas_main/src/LPToken.sol\":2123:2145  _safeMint(to, tokenId) */\n      tag_127\n        /* \"Midas/Midas_main/src/LPToken.sol\":2133:2135  to */\n      dup3\n        /* \"Midas/Midas_main/src/LPToken.sol\":2137:2144  tokenId */\n      dup3\n        /* \"Midas/Midas_main/src/LPToken.sol\":2123:2132  _safeMint */\n      tag_128\n        /* \"Midas/Midas_main/src/LPToken.sol\":2123:2145  _safeMint(to, tokenId) */\n      jump\t// in\n    tag_127:\n        /* \"Midas/Midas_main/src/LPToken.sol\":2046:2152  function mint(address to, uint256 tokenId) public virtual onlyPair {... */\n      pop\n      pop\n      jump\t// out\n        /* \"Midas/Midas_main/src/LPToken.sol\":5831:5980  function safeTransferFrom(address from, address to, uint256 tokenId) public virtual override {... */\n    tag_48:\n        /* \"Midas/Midas_main/src/LPToken.sol\":5934:5973  safeTransferFrom(from, to, tokenId, \"\") */\n      tag_113\n        /* \"Midas/Midas_main/src/LPToken.sol\":5951:5955  from */\n      dup4\n        /* \"Midas/Midas_main/src/LPToken.sol\":5957:5959  to */\n      dup4\n        /* \"Midas/Midas_main/src/LPToken.sol\":5961:5968  tokenId */\n      dup4\n        /* \"Midas/Midas_main/src/LPToken.sol\":5934:5973  safeTransferFrom(from, to, tokenId, \"\") */\n      mload(0x40)\n      dup1\n      0x20\n      add\n      0x40\n      mstore\n      dup1\n      0x00\n      dup2\n      mstore\n      pop\n        /* \"Midas/Midas_main/src/LPToken.sol\":5934:5950  safeTransferFrom */\n      tag_72\n        /* \"Midas/Midas_main/src/LPToken.sol\":5934:5973  safeTransferFrom(from, to, tokenId, \"\") */\n      jump\t// in\n        /* \"Midas/Midas_main/src/LPToken.sol\":2158:2354  function burn(uint256 tokenId) public virtual onlyPair {... */\n    tag_51:\n        /* \"Midas/Midas_main/src/LPToken.sol\":1830:1835  _pair */\n      and(sub(shl(0xa0, 0x01), 0x01), sload(0x02))\n        /* \"Midas/Midas_main/src/LPToken.sol\":1816:1826  msg.sender */\n      caller\n        /* \"Midas/Midas_main/src/LPToken.sol\":1816:1835  msg.sender == _pair */\n      eq\n        /* \"Midas/Midas_main/src/LPToken.sol\":1808:1836  require(msg.sender == _pair) */\n      tag_132\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_132:\n        /* \"Midas/Midas_main/src/LPToken.sol\":2231:2272  _isApprovedOrOwner(_msgSender(), tokenId) */\n      tag_134\n        /* \"@openzeppelin/contracts/utils/Context.sol\":719:729  msg.sender */\n      caller\n        /* \"Midas/Midas_main/src/LPToken.sol\":2250:2262  _msgSender() */\n      tag_117\n        /* \"@openzeppelin/contracts/utils/Context.sol\":640:736  function _msgSender() internal view virtual returns (address) {... */\n      jump\n        /* \"Midas/Midas_main/src/LPToken.sol\":2231:2272  _isApprovedOrOwner(_msgSender(), tokenId) */\n    tag_134:\n        /* \"Midas/Midas_main/src/LPToken.sol\":2223:2323  require(_isApprovedOrOwner(_msgSender(), tokenId), \"LPToken: caller is not token owner or approved\") */\n      tag_136\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_103\n      swap1\n      tag_121\n      jump\t// in\n    tag_136:\n        /* \"Midas/Midas_main/src/LPToken.sol\":2333:2347  _burn(tokenId) */\n      tag_138\n        /* \"Midas/Midas_main/src/LPToken.sol\":2339:2346  tokenId */\n      dup2\n        /* \"Midas/Midas_main/src/LPToken.sol\":2333:2338  _burn */\n      tag_139\n        /* \"Midas/Midas_main/src/LPToken.sol\":2333:2347  _burn(tokenId) */\n      jump\t// in\n    tag_138:\n        /* \"Midas/Midas_main/src/LPToken.sol\":2158:2354  function burn(uint256 tokenId) public virtual onlyPair {... */\n      pop\n      jump\t// out\n        /* \"Midas/Midas_main/src/LPToken.sol\":3042:3262  function ownerOf(uint256 tokenId) public view virtual override returns (address) {... */\n    tag_54:\n        /* \"Midas/Midas_main/src/LPToken.sol\":3114:3121  address */\n      0x00\n        /* \"Midas/Midas_main/src/LPToken.sol\":3133:3146  address owner */\n      dup1\n        /* \"Midas/Midas_main/src/LPToken.sol\":3149:3166  _ownerOf(tokenId) */\n      tag_141\n        /* \"Midas/Midas_main/src/LPToken.sol\":3158:3165  tokenId */\n      dup4\n        /* \"Midas/Midas_main/src/LPToken.sol\":3149:3157  _ownerOf */\n      tag_142\n        /* \"Midas/Midas_main/src/LPToken.sol\":3149:3166  _ownerOf(tokenId) */\n      jump\t// in\n    tag_141:\n        /* \"Midas/Midas_main/src/LPToken.sol\":3133:3166  address owner = _ownerOf(tokenId) */\n      swap1\n      pop\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"Midas/Midas_main/src/LPToken.sol\":3184:3203  owner != address(0) */\n      dup2\n      and\n        /* \"Midas/Midas_main/src/LPToken.sol\":3176:3233  require(owner != address(0), \"LPToken: invalid token ID\") */\n      tag_88\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_103\n      swap1\n      tag_145\n      jump\t// in\n        /* \"Midas/Midas_main/src/LPToken.sol\":2780:2985  function balanceOf(address owner) public view virtual override returns (uint256) {... */\n    tag_59:\n        /* \"Midas/Midas_main/src/LPToken.sol\":2852:2859  uint256 */\n      0x00\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"Midas/Midas_main/src/LPToken.sol\":2879:2898  owner != address(0) */\n      dup3\n      and\n        /* \"Midas/Midas_main/src/LPToken.sol\":2871:2945  require(owner != address(0), \"LPToken: address zero is not a valid owner\") */\n      tag_147\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":6961:6963   */\n      0x20\n        /* \"Midas/Midas_main/src/LPToken.sol\":2871:2945  require(owner != address(0), \"LPToken: address zero is not a valid owner\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":6943:6964   */\n      mstore\n        /* \"#utility.yul\":7000:7002   */\n      0x2a\n        /* \"#utility.yul\":6980:6998   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":6973:7003   */\n      mstore\n        /* \"#utility.yul\":7039:7073   */\n      0x4c50546f6b656e3a2061646472657373207a65726f206973206e6f7420612076\n        /* \"#utility.yul\":7019:7037   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":7012:7074   */\n      mstore\n      shl(0xb1, 0x30b634b21037bbb732b9)\n        /* \"#utility.yul\":7090:7108   */\n      0x64\n      dup3\n      add\n        /* \"#utility.yul\":7083:7123   */\n      mstore\n        /* \"#utility.yul\":7140:7159   */\n      0x84\n      add\n        /* \"Midas/Midas_main/src/LPToken.sol\":2871:2945  require(owner != address(0), \"LPToken: address zero is not a valid owner\") */\n      tag_103\n        /* \"#utility.yul\":6759:7165   */\n      jump\n        /* \"Midas/Midas_main/src/LPToken.sol\":2871:2945  require(owner != address(0), \"LPToken: address zero is not a valid owner\") */\n    tag_147:\n      pop\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"Midas/Midas_main/src/LPToken.sol\":2962:2978  _balances[owner] */\n      and\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"Midas/Midas_main/src/LPToken.sol\":2962:2971  _balances */\n      0x05\n        /* \"Midas/Midas_main/src/LPToken.sol\":2962:2978  _balances[owner] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n      sload\n      swap1\n        /* \"Midas/Midas_main/src/LPToken.sol\":2780:2985  function balanceOf(address owner) public view virtual override returns (uint256) {... */\n      jump\t// out\n        /* \"Midas/Midas_main/src/LPToken.sol\":3486:3588  function symbol() public view virtual override returns (string memory) {... */\n    tag_63:\n        /* \"Midas/Midas_main/src/LPToken.sol\":3542:3555  string memory */\n      0x60\n        /* \"Midas/Midas_main/src/LPToken.sol\":3574:3581  _symbol */\n      0x01\n        /* \"Midas/Midas_main/src/LPToken.sol\":3567:3581  return _symbol */\n      dup1\n      sload\n      tag_91\n      swap1\n      tag_92\n      jump\t// in\n        /* \"Midas/Midas_main/src/LPToken.sol\":5025:5178  function setApprovalForAll(address operator, bool approved) public virtual override {... */\n    tag_68:\n        /* \"Midas/Midas_main/src/LPToken.sol\":5119:5171  _setApprovalForAll(_msgSender(), operator, approved) */\n      tag_127\n        /* \"@openzeppelin/contracts/utils/Context.sol\":719:729  msg.sender */\n      caller\n        /* \"Midas/Midas_main/src/LPToken.sol\":5152:5160  operator */\n      dup4\n        /* \"Midas/Midas_main/src/LPToken.sol\":5162:5170  approved */\n      dup4\n        /* \"Midas/Midas_main/src/LPToken.sol\":5119:5137  _setApprovalForAll */\n      tag_159\n        /* \"Midas/Midas_main/src/LPToken.sol\":5119:5171  _setApprovalForAll(_msgSender(), operator, approved) */\n      jump\t// in\n        /* \"Midas/Midas_main/src/LPToken.sol\":6046:6323  function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public virtual override {... */\n    tag_72:\n        /* \"Midas/Midas_main/src/LPToken.sol\":6176:6217  _isApprovedOrOwner(_msgSender(), tokenId) */\n      tag_161\n        /* \"@openzeppelin/contracts/utils/Context.sol\":719:729  msg.sender */\n      caller\n        /* \"Midas/Midas_main/src/LPToken.sol\":6209:6216  tokenId */\n      dup4\n        /* \"Midas/Midas_main/src/LPToken.sol\":6176:6194  _isApprovedOrOwner */\n      tag_118\n        /* \"Midas/Midas_main/src/LPToken.sol\":6176:6217  _isApprovedOrOwner(_msgSender(), tokenId) */\n      jump\t// in\n    tag_161:\n        /* \"Midas/Midas_main/src/LPToken.sol\":6168:6268  require(_isApprovedOrOwner(_msgSender(), tokenId), \"LPToken: caller is not token owner or approved\") */\n      tag_163\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_103\n      swap1\n      tag_121\n      jump\t// in\n    tag_163:\n        /* \"Midas/Midas_main/src/LPToken.sol\":6278:6316  _safeTransfer(from, to, tokenId, data) */\n      tag_165\n        /* \"Midas/Midas_main/src/LPToken.sol\":6292:6296  from */\n      dup5\n        /* \"Midas/Midas_main/src/LPToken.sol\":6298:6300  to */\n      dup5\n        /* \"Midas/Midas_main/src/LPToken.sol\":6302:6309  tokenId */\n      dup5\n        /* \"Midas/Midas_main/src/LPToken.sol\":6311:6315  data */\n      dup5\n        /* \"Midas/Midas_main/src/LPToken.sol\":6278:6291  _safeTransfer */\n      tag_166\n        /* \"Midas/Midas_main/src/LPToken.sol\":6278:6316  _safeTransfer(from, to, tokenId, data) */\n      jump\t// in\n    tag_165:\n        /* \"Midas/Midas_main/src/LPToken.sol\":6046:6323  function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public virtual override {... */\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"Midas/Midas_main/src/LPToken.sol\":1946:2036  function initialize(address pair) public virtual onlyFactory {... */\n    tag_75:\n        /* \"Midas/Midas_main/src/LPToken.sol\":1913:1921  _factory */\n      and(sub(shl(0xa0, 0x01), 0x01), sload(0x03))\n        /* \"Midas/Midas_main/src/LPToken.sol\":1899:1909  msg.sender */\n      caller\n        /* \"Midas/Midas_main/src/LPToken.sol\":1899:1921  msg.sender == _factory */\n      eq\n        /* \"Midas/Midas_main/src/LPToken.sol\":1891:1922  require(msg.sender == _factory) */\n      tag_168\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_168:\n        /* \"Midas/Midas_main/src/LPToken.sol\":2017:2022  _pair */\n      0x02\n        /* \"Midas/Midas_main/src/LPToken.sol\":2017:2029  _pair = pair */\n      dup1\n      sload\n      not(sub(shl(0xa0, 0x01), 0x01))\n      and\n      sub(shl(0xa0, 0x01), 0x01)\n      swap3\n      swap1\n      swap3\n      and\n      swap2\n      swap1\n      swap2\n      or\n      swap1\n      sstore\n        /* \"Midas/Midas_main/src/LPToken.sol\":1946:2036  function initialize(address pair) public virtual onlyFactory {... */\n      jump\t// out\n        /* \"Midas/Midas_main/src/LPToken.sol\":3654:3930  function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {... */\n    tag_78:\n        /* \"Midas/Midas_main/src/LPToken.sol\":3727:3740  string memory */\n      0x60\n        /* \"Midas/Midas_main/src/LPToken.sol\":3752:3775  _requireMinted(tokenId) */\n      tag_171\n        /* \"Midas/Midas_main/src/LPToken.sol\":3767:3774  tokenId */\n      dup3\n        /* \"Midas/Midas_main/src/LPToken.sol\":3752:3766  _requireMinted */\n      tag_99\n        /* \"Midas/Midas_main/src/LPToken.sol\":3752:3775  _requireMinted(tokenId) */\n      jump\t// in\n    tag_171:\n        /* \"Midas/Midas_main/src/LPToken.sol\":3786:3807  string memory baseURI */\n      0x00\n        /* \"Midas/Midas_main/src/LPToken.sol\":3810:3820  _baseURI() */\n      tag_172\n        /* \"Midas/Midas_main/src/LPToken.sol\":4248:4257  return \"\" */\n      0x40\n      dup1\n      mload\n      0x20\n      dup2\n      add\n      swap1\n      swap2\n      mstore\n      0x00\n      dup2\n      mstore\n      swap1\n        /* \"Midas/Midas_main/src/LPToken.sol\":4172:4264  function _baseURI() internal view virtual returns (string memory) {... */\n      jump\n        /* \"Midas/Midas_main/src/LPToken.sol\":3810:3820  _baseURI() */\n    tag_172:\n        /* \"Midas/Midas_main/src/LPToken.sol\":3786:3820  string memory baseURI = _baseURI() */\n      swap1\n      pop\n        /* \"Midas/Midas_main/src/LPToken.sol\":3861:3862  0 */\n      0x00\n        /* \"Midas/Midas_main/src/LPToken.sol\":3843:3850  baseURI */\n      dup2\n        /* \"Midas/Midas_main/src/LPToken.sol\":3837:3858  bytes(baseURI).length */\n      mload\n        /* \"Midas/Midas_main/src/LPToken.sol\":3837:3862  bytes(baseURI).length > 0 */\n      gt\n        /* \"Midas/Midas_main/src/LPToken.sol\":3837:3923  bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \"\" */\n      tag_174\n      jumpi\n      mload(0x40)\n      dup1\n      0x20\n      add\n      0x40\n      mstore\n      dup1\n      0x00\n      dup2\n      mstore\n      pop\n      jump(tag_175)\n    tag_174:\n        /* \"Midas/Midas_main/src/LPToken.sol\":3889:3896  baseURI */\n      dup1\n        /* \"Midas/Midas_main/src/LPToken.sol\":3898:3916  tokenId.toString() */\n      tag_176\n        /* \"Midas/Midas_main/src/LPToken.sol\":3898:3905  tokenId */\n      dup5\n        /* \"Midas/Midas_main/src/LPToken.sol\":3898:3914  tokenId.toString */\n      tag_177\n        /* \"Midas/Midas_main/src/LPToken.sol\":3898:3916  tokenId.toString() */\n      jump\t// in\n    tag_176:\n        /* \"Midas/Midas_main/src/LPToken.sol\":3872:3917  abi.encodePacked(baseURI, tokenId.toString()) */\n      add(0x20, mload(0x40))\n      tag_178\n      swap3\n      swap2\n      swap1\n      tag_179\n      jump\t// in\n    tag_178:\n      mload(0x40)\n      0x20\n      dup2\n      dup4\n      sub\n      sub\n      dup2\n      mstore\n      swap1\n      0x40\n      mstore\n        /* \"Midas/Midas_main/src/LPToken.sol\":3837:3923  bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \"\" */\n    tag_175:\n        /* \"Midas/Midas_main/src/LPToken.sol\":3830:3923  return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \"\" */\n      swap4\n        /* \"Midas/Midas_main/src/LPToken.sol\":3654:3930  function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {... */\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"Midas/Midas_main/src/LPToken.sol\":5244:5406  function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {... */\n    tag_83:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"Midas/Midas_main/src/LPToken.sol\":5364:5389  _operatorApprovals[owner] */\n      swap2\n      dup3\n      and\n        /* \"Midas/Midas_main/src/LPToken.sol\":5341:5345  bool */\n      0x00\n        /* \"Midas/Midas_main/src/LPToken.sol\":5364:5389  _operatorApprovals[owner] */\n      swap1\n      dup2\n      mstore\n        /* \"Midas/Midas_main/src/LPToken.sol\":5364:5382  _operatorApprovals */\n      0x07\n        /* \"Midas/Midas_main/src/LPToken.sol\":5364:5389  _operatorApprovals[owner] */\n      0x20\n      swap1\n      dup2\n      mstore\n      0x40\n      dup1\n      dup4\n      keccak256\n        /* \"Midas/Midas_main/src/LPToken.sol\":5364:5399  _operatorApprovals[owner][operator] */\n      swap4\n      swap1\n      swap5\n      and\n      dup3\n      mstore\n      swap2\n      swap1\n      swap2\n      mstore\n      keccak256\n      sload\n      0xff\n      and\n      swap1\n        /* \"Midas/Midas_main/src/LPToken.sol\":5244:5406  function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {... */\n      jump\t// out\n        /* \"Midas/Midas_main/src/LPToken.sol\":14112:14246  function _requireMinted(uint256 tokenId) internal view virtual {... */\n    tag_99:\n        /* \"Midas/Midas_main/src/LPToken.sol\":14193:14209  _exists(tokenId) */\n      tag_183\n        /* \"Midas/Midas_main/src/LPToken.sol\":14201:14208  tokenId */\n      dup2\n        /* \"Midas/Midas_main/src/LPToken.sol\":14193:14200  _exists */\n      tag_184\n        /* \"Midas/Midas_main/src/LPToken.sol\":14193:14209  _exists(tokenId) */\n      jump\t// in\n    tag_183:\n        /* \"Midas/Midas_main/src/LPToken.sol\":14185:14239  require(_exists(tokenId), \"LPToken: invalid token ID\") */\n      tag_138\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_103\n      swap1\n      tag_145\n      jump\t// in\n        /* \"Midas/Midas_main/src/LPToken.sol\":13442:13614  function _approve(address to, uint256 tokenId) internal virtual {... */\n    tag_114:\n        /* \"Midas/Midas_main/src/LPToken.sol\":13516:13540  _tokenApprovals[tokenId] */\n      0x00\n      dup2\n      dup2\n      mstore\n        /* \"Midas/Midas_main/src/LPToken.sol\":13516:13531  _tokenApprovals */\n      0x06\n        /* \"Midas/Midas_main/src/LPToken.sol\":13516:13540  _tokenApprovals[tokenId] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n        /* \"Midas/Midas_main/src/LPToken.sol\":13516:13545  _tokenApprovals[tokenId] = to */\n      dup1\n      sload\n      not(sub(shl(0xa0, 0x01), 0x01))\n      and\n      sub(shl(0xa0, 0x01), 0x01)\n      dup5\n      and\n      swap1\n      dup2\n      or\n      swap1\n      swap2\n      sstore\n        /* \"Midas/Midas_main/src/LPToken.sol\":13516:13540  _tokenApprovals[tokenId] */\n      dup2\n      swap1\n        /* \"Midas/Midas_main/src/LPToken.sol\":13569:13593  LPToken.ownerOf(tokenId) */\n      tag_189\n        /* \"Midas/Midas_main/src/LPToken.sol\":13516:13540  _tokenApprovals[tokenId] */\n      dup3\n        /* \"Midas/Midas_main/src/LPToken.sol\":13569:13584  LPToken.ownerOf */\n      tag_54\n        /* \"Midas/Midas_main/src/LPToken.sol\":13569:13593  LPToken.ownerOf(tokenId) */\n      jump\t// in\n    tag_189:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"Midas/Midas_main/src/LPToken.sol\":13560:13607  Approval(LPToken.ownerOf(tokenId), to, tokenId) */\n      and\n      0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925\n      mload(0x40)\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log4\n        /* \"Midas/Midas_main/src/LPToken.sol\":13442:13614  function _approve(address to, uint256 tokenId) internal virtual {... */\n      pop\n      pop\n      jump\t// out\n        /* \"Midas/Midas_main/src/LPToken.sol\":8263:8525  function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {... */\n    tag_118:\n        /* \"Midas/Midas_main/src/LPToken.sol\":8356:8360  bool */\n      0x00\n        /* \"Midas/Midas_main/src/LPToken.sol\":8372:8385  address owner */\n      dup1\n        /* \"Midas/Midas_main/src/LPToken.sol\":8388:8412  LPToken.ownerOf(tokenId) */\n      tag_191\n        /* \"Midas/Midas_main/src/LPToken.sol\":8404:8411  tokenId */\n      dup4\n        /* \"Midas/Midas_main/src/LPToken.sol\":8388:8403  LPToken.ownerOf */\n      tag_54\n        /* \"Midas/Midas_main/src/LPToken.sol\":8388:8412  LPToken.ownerOf(tokenId) */\n      jump\t// in\n    tag_191:\n        /* \"Midas/Midas_main/src/LPToken.sol\":8372:8412  address owner = LPToken.ownerOf(tokenId) */\n      swap1\n      pop\n        /* \"Midas/Midas_main/src/LPToken.sol\":8441:8446  owner */\n      dup1\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"Midas/Midas_main/src/LPToken.sol\":8430:8446  spender == owner */\n      and\n        /* \"Midas/Midas_main/src/LPToken.sol\":8430:8437  spender */\n      dup5\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"Midas/Midas_main/src/LPToken.sol\":8430:8446  spender == owner */\n      and\n      eq\n        /* \"Midas/Midas_main/src/LPToken.sol\":8430:8482  spender == owner || isApprovedForAll(owner, spender) */\n      dup1\n      tag_193\n      jumpi\n      pop\n        /* \"Midas/Midas_main/src/LPToken.sol\":8450:8482  isApprovedForAll(owner, spender) */\n      tag_193\n        /* \"Midas/Midas_main/src/LPToken.sol\":8467:8472  owner */\n      dup2\n        /* \"Midas/Midas_main/src/LPToken.sol\":8474:8481  spender */\n      dup6\n        /* \"Midas/Midas_main/src/LPToken.sol\":8450:8466  isApprovedForAll */\n      tag_83\n        /* \"Midas/Midas_main/src/LPToken.sol\":8450:8482  isApprovedForAll(owner, spender) */\n      jump\t// in\n    tag_193:\n        /* \"Midas/Midas_main/src/LPToken.sol\":8430:8517  spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender */\n      dup1\n      tag_194\n      jumpi\n      pop\n        /* \"Midas/Midas_main/src/LPToken.sol\":8510:8517  spender */\n      dup4\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"Midas/Midas_main/src/LPToken.sol\":8486:8517  getApproved(tokenId) == spender */\n      and\n        /* \"Midas/Midas_main/src/LPToken.sol\":8486:8506  getApproved(tokenId) */\n      tag_195\n        /* \"Midas/Midas_main/src/LPToken.sol\":8498:8505  tokenId */\n      dup5\n        /* \"Midas/Midas_main/src/LPToken.sol\":8486:8497  getApproved */\n      tag_32\n        /* \"Midas/Midas_main/src/LPToken.sol\":8486:8506  getApproved(tokenId) */\n      jump\t// in\n    tag_195:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"Midas/Midas_main/src/LPToken.sol\":8486:8517  getApproved(tokenId) == spender */\n      and\n      eq\n        /* \"Midas/Midas_main/src/LPToken.sol\":8430:8517  spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender */\n    tag_194:\n        /* \"Midas/Midas_main/src/LPToken.sol\":8422:8518  return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender) */\n      swap5\n        /* \"Midas/Midas_main/src/LPToken.sol\":8263:8525  function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {... */\n      swap4\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"Midas/Midas_main/src/LPToken.sol\":12123:13330  function _transfer(address from, address to, uint256 tokenId) internal virtual {... */\n    tag_123:\n        /* \"Midas/Midas_main/src/LPToken.sol\":12248:12252  from */\n      dup3\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"Midas/Midas_main/src/LPToken.sol\":12220:12252  LPToken.ownerOf(tokenId) == from */\n      and\n        /* \"Midas/Midas_main/src/LPToken.sol\":12220:12244  LPToken.ownerOf(tokenId) */\n      tag_197\n        /* \"Midas/Midas_main/src/LPToken.sol\":12236:12243  tokenId */\n      dup3\n        /* \"Midas/Midas_main/src/LPToken.sol\":12220:12235  LPToken.ownerOf */\n      tag_54\n        /* \"Midas/Midas_main/src/LPToken.sol\":12220:12244  LPToken.ownerOf(tokenId) */\n      jump\t// in\n    tag_197:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"Midas/Midas_main/src/LPToken.sol\":12220:12252  LPToken.ownerOf(tokenId) == from */\n      and\n      eq\n        /* \"Midas/Midas_main/src/LPToken.sol\":12212:12295  require(LPToken.ownerOf(tokenId) == from, \"LPToken: transfer from incorrect owner\") */\n      tag_198\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":7847:7849   */\n      0x20\n        /* \"Midas/Midas_main/src/LPToken.sol\":12212:12295  require(LPToken.ownerOf(tokenId) == from, \"LPToken: transfer from incorrect owner\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":7829:7850   */\n      mstore\n        /* \"#utility.yul\":7886:7888   */\n      0x26\n        /* \"#utility.yul\":7866:7884   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":7859:7889   */\n      mstore\n        /* \"#utility.yul\":7925:7959   */\n      0x4c50546f6b656e3a207472616e736665722066726f6d20696e636f7272656374\n        /* \"#utility.yul\":7905:7923   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":7898:7960   */\n      mstore\n      shl(0xd1, 0x1037bbb732b9)\n        /* \"#utility.yul\":7976:7994   */\n      0x64\n      dup3\n      add\n        /* \"#utility.yul\":7969:8005   */\n      mstore\n        /* \"#utility.yul\":8022:8041   */\n      0x84\n      add\n        /* \"Midas/Midas_main/src/LPToken.sol\":12212:12295  require(LPToken.ownerOf(tokenId) == from, \"LPToken: transfer from incorrect owner\") */\n      tag_103\n        /* \"#utility.yul\":7645:8047   */\n      jump\n        /* \"Midas/Midas_main/src/LPToken.sol\":12212:12295  require(LPToken.ownerOf(tokenId) == from, \"LPToken: transfer from incorrect owner\") */\n    tag_198:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"Midas/Midas_main/src/LPToken.sol\":12313:12329  to != address(0) */\n      dup3\n      and\n        /* \"Midas/Midas_main/src/LPToken.sol\":12305:12371  require(to != address(0), \"LPToken: transfer to the zero address\") */\n      tag_201\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":8254:8256   */\n      0x20\n        /* \"Midas/Midas_main/src/LPToken.sol\":12305:12371  require(to != address(0), \"LPToken: transfer to the zero address\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":8236:8257   */\n      mstore\n        /* \"#utility.yul\":8293:8295   */\n      0x25\n        /* \"#utility.yul\":8273:8291   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":8266:8296   */\n      mstore\n        /* \"#utility.yul\":8332:8366   */\n      0x4c50546f6b656e3a207472616e7366657220746f20746865207a65726f206164\n        /* \"#utility.yul\":8312:8330   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":8305:8367   */\n      mstore\n      shl(0xd8, 0x6472657373)\n        /* \"#utility.yul\":8383:8401   */\n      0x64\n      dup3\n      add\n        /* \"#utility.yul\":8376:8411   */\n      mstore\n        /* \"#utility.yul\":8428:8447   */\n      0x84\n      add\n        /* \"Midas/Midas_main/src/LPToken.sol\":12305:12371  require(to != address(0), \"LPToken: transfer to the zero address\") */\n      tag_103\n        /* \"#utility.yul\":8052:8453   */\n      jump\n        /* \"Midas/Midas_main/src/LPToken.sol\":12305:12371  require(to != address(0), \"LPToken: transfer to the zero address\") */\n    tag_201:\n        /* \"Midas/Midas_main/src/LPToken.sol\":12382:12424  _beforeTokenTransfer(from, to, tokenId, 1) */\n      tag_204\n        /* \"Midas/Midas_main/src/LPToken.sol\":12403:12407  from */\n      dup4\n        /* \"Midas/Midas_main/src/LPToken.sol\":12409:12411  to */\n      dup4\n        /* \"Midas/Midas_main/src/LPToken.sol\":12413:12420  tokenId */\n      dup4\n        /* \"Midas/Midas_main/src/LPToken.sol\":12422:12423  1 */\n      0x01\n        /* \"Midas/Midas_main/src/LPToken.sol\":12382:12402  _beforeTokenTransfer */\n      tag_205\n        /* \"Midas/Midas_main/src/LPToken.sol\":12382:12424  _beforeTokenTransfer(from, to, tokenId, 1) */\n      jump\t// in\n    tag_204:\n        /* \"Midas/Midas_main/src/LPToken.sol\":12552:12556  from */\n      dup3\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"Midas/Midas_main/src/LPToken.sol\":12524:12556  LPToken.ownerOf(tokenId) == from */\n      and\n        /* \"Midas/Midas_main/src/LPToken.sol\":12524:12548  LPToken.ownerOf(tokenId) */\n      tag_206\n        /* \"Midas/Midas_main/src/LPToken.sol\":12540:12547  tokenId */\n      dup3\n        /* \"Midas/Midas_main/src/LPToken.sol\":12524:12539  LPToken.ownerOf */\n      tag_54\n        /* \"Midas/Midas_main/src/LPToken.sol\":12524:12548  LPToken.ownerOf(tokenId) */\n      jump\t// in\n    tag_206:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"Midas/Midas_main/src/LPToken.sol\":12524:12556  LPToken.ownerOf(tokenId) == from */\n      and\n      eq\n        /* \"Midas/Midas_main/src/LPToken.sol\":12516:12598  require(LPToken.ownerOf(tokenId) == from, \"ERC721: transfer from incorrect owner\") */\n      tag_207\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":8660:8662   */\n      0x20\n        /* \"Midas/Midas_main/src/LPToken.sol\":12516:12598  require(LPToken.ownerOf(tokenId) == from, \"ERC721: transfer from incorrect owner\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":8642:8663   */\n      mstore\n        /* \"#utility.yul\":8699:8701   */\n      0x25\n        /* \"#utility.yul\":8679:8697   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":8672:8702   */\n      mstore\n        /* \"#utility.yul\":8738:8772   */\n      0x4552433732313a207472616e736665722066726f6d20696e636f727265637420\n        /* \"#utility.yul\":8718:8736   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":8711:8773   */\n      mstore\n      shl(0xd9, 0x37bbb732b9)\n        /* \"#utility.yul\":8789:8807   */\n      0x64\n      dup3\n      add\n        /* \"#utility.yul\":8782:8817   */\n      mstore\n        /* \"#utility.yul\":8834:8853   */\n      0x84\n      add\n        /* \"Midas/Midas_main/src/LPToken.sol\":12516:12598  require(LPToken.ownerOf(tokenId) == from, \"ERC721: transfer from incorrect owner\") */\n      tag_103\n        /* \"#utility.yul\":8458:8859   */\n      jump\n        /* \"Midas/Midas_main/src/LPToken.sol\":12516:12598  require(LPToken.ownerOf(tokenId) == from, \"ERC721: transfer from incorrect owner\") */\n    tag_207:\n        /* \"Midas/Midas_main/src/LPToken.sol\":12667:12691  _tokenApprovals[tokenId] */\n      0x00\n      dup2\n      dup2\n      mstore\n        /* \"Midas/Midas_main/src/LPToken.sol\":12667:12682  _tokenApprovals */\n      0x06\n        /* \"Midas/Midas_main/src/LPToken.sol\":12667:12691  _tokenApprovals[tokenId] */\n      0x20\n      swap1\n      dup2\n      mstore\n      0x40\n      dup1\n      dup4\n      keccak256\n        /* \"Midas/Midas_main/src/LPToken.sol\":12660:12691  delete _tokenApprovals[tokenId] */\n      dup1\n      sload\n      not(sub(shl(0xa0, 0x01), 0x01))\n      swap1\n      dup2\n      and\n      swap1\n      swap2\n      sstore\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"Midas/Midas_main/src/LPToken.sol\":13135:13150  _balances[from] */\n      dup8\n      dup2\n      and\n      dup1\n      dup7\n      mstore\n        /* \"Midas/Midas_main/src/LPToken.sol\":13135:13144  _balances */\n      0x05\n        /* \"Midas/Midas_main/src/LPToken.sol\":13135:13150  _balances[from] */\n      dup6\n      mstore\n      dup4\n      dup7\n      keccak256\n        /* \"Midas/Midas_main/src/LPToken.sol\":13135:13155  _balances[from] -= 1 */\n      dup1\n      sload\n      not(0x00)\n      add\n      swap1\n      sstore\n        /* \"Midas/Midas_main/src/LPToken.sol\":13169:13182  _balances[to] */\n      swap1\n      dup8\n      and\n      dup1\n      dup7\n      mstore\n      dup4\n      dup7\n      keccak256\n        /* \"Midas/Midas_main/src/LPToken.sol\":13169:13187  _balances[to] += 1 */\n      dup1\n      sload\n        /* \"Midas/Midas_main/src/LPToken.sol\":12660:12691  delete _tokenApprovals[tokenId] */\n      0x01\n        /* \"Midas/Midas_main/src/LPToken.sol\":13169:13187  _balances[to] += 1 */\n      add\n      swap1\n      sstore\n        /* \"Midas/Midas_main/src/LPToken.sol\":13207:13223  _owners[tokenId] */\n      dup7\n      dup7\n      mstore\n        /* \"Midas/Midas_main/src/LPToken.sol\":13207:13214  _owners */\n      0x04\n        /* \"Midas/Midas_main/src/LPToken.sol\":13207:13223  _owners[tokenId] */\n      swap1\n      swap5\n      mstore\n      dup3\n      dup6\n      keccak256\n        /* \"Midas/Midas_main/src/LPToken.sol\":13207:13228  _owners[tokenId] = to */\n      dup1\n      sload\n      swap1\n      swap3\n      and\n      dup5\n      or\n      swap1\n      swap2\n      sstore\n        /* \"Midas/Midas_main/src/LPToken.sol\":13244:13271  Transfer(from, to, tokenId) */\n      swap1\n      mload\n        /* \"Midas/Midas_main/src/LPToken.sol\":12683:12690  tokenId */\n      dup5\n      swap4\n      0x00\n      dup1\n      mload\n      0x20\n      data_ada389e1fc24a8587c776340efb91b36e675792ab631816100d55df0b5cf3cbc\n      dup4\n      codecopy\n      dup2\n      mload\n      swap2\n      mstore\n        /* \"Midas/Midas_main/src/LPToken.sol\":13244:13271  Transfer(from, to, tokenId) */\n      swap2\n      log4\n        /* \"Midas/Midas_main/src/LPToken.sol\":4391:4730  {... */\n      pop\n        /* \"Midas/Midas_main/src/LPToken.sol\":4321:4730  function approve(address to, uint256 tokenId) public virtual override {... */\n      pop\n      pop\n      jump\t// out\n        /* \"Midas/Midas_main/src/LPToken.sol\":8855:8963  function _safeMint(address to, uint256 tokenId) internal virtual {... */\n    tag_128:\n        /* \"Midas/Midas_main/src/LPToken.sol\":8930:8956  _safeMint(to, tokenId, \"\") */\n      tag_127\n        /* \"Midas/Midas_main/src/LPToken.sol\":8940:8942  to */\n      dup3\n        /* \"Midas/Midas_main/src/LPToken.sol\":8944:8951  tokenId */\n      dup3\n        /* \"Midas/Midas_main/src/LPToken.sol\":8930:8956  _safeMint(to, tokenId, \"\") */\n      mload(0x40)\n      dup1\n      0x20\n      add\n      0x40\n      mstore\n      dup1\n      0x00\n      dup2\n      mstore\n      pop\n        /* \"Midas/Midas_main/src/LPToken.sol\":8930:8939  _safeMint */\n      tag_214\n        /* \"Midas/Midas_main/src/LPToken.sol\":8930:8956  _safeMint(to, tokenId, \"\") */\n      jump\t// in\n        /* \"Midas/Midas_main/src/LPToken.sol\":11035:11799  function _burn(uint256 tokenId) internal virtual {... */\n    tag_139:\n        /* \"Midas/Midas_main/src/LPToken.sol\":11094:11107  address owner */\n      0x00\n        /* \"Midas/Midas_main/src/LPToken.sol\":11110:11134  LPToken.ownerOf(tokenId) */\n      tag_216\n        /* \"Midas/Midas_main/src/LPToken.sol\":11126:11133  tokenId */\n      dup3\n        /* \"Midas/Midas_main/src/LPToken.sol\":11110:11125  LPToken.ownerOf */\n      tag_54\n        /* \"Midas/Midas_main/src/LPToken.sol\":11110:11134  LPToken.ownerOf(tokenId) */\n      jump\t// in\n    tag_216:\n        /* \"Midas/Midas_main/src/LPToken.sol\":11094:11134  address owner = LPToken.ownerOf(tokenId) */\n      swap1\n      pop\n        /* \"Midas/Midas_main/src/LPToken.sol\":11145:11196  _beforeTokenTransfer(owner, address(0), tokenId, 1) */\n      tag_217\n        /* \"Midas/Midas_main/src/LPToken.sol\":11166:11171  owner */\n      dup2\n        /* \"Midas/Midas_main/src/LPToken.sol\":11181:11182  0 */\n      0x00\n        /* \"Midas/Midas_main/src/LPToken.sol\":11185:11192  tokenId */\n      dup5\n        /* \"Midas/Midas_main/src/LPToken.sol\":11194:11195  1 */\n      0x01\n        /* \"Midas/Midas_main/src/LPToken.sol\":11145:11165  _beforeTokenTransfer */\n      tag_205\n        /* \"Midas/Midas_main/src/LPToken.sol\":11145:11196  _beforeTokenTransfer(owner, address(0), tokenId, 1) */\n      jump\t// in\n    tag_217:\n        /* \"Midas/Midas_main/src/LPToken.sol\":11306:11330  LPToken.ownerOf(tokenId) */\n      tag_218\n        /* \"Midas/Midas_main/src/LPToken.sol\":11322:11329  tokenId */\n      dup3\n        /* \"Midas/Midas_main/src/LPToken.sol\":11306:11321  LPToken.ownerOf */\n      tag_54\n        /* \"Midas/Midas_main/src/LPToken.sol\":11306:11330  LPToken.ownerOf(tokenId) */\n      jump\t// in\n    tag_218:\n        /* \"Midas/Midas_main/src/LPToken.sol\":11375:11399  _tokenApprovals[tokenId] */\n      0x00\n      dup4\n      dup2\n      mstore\n        /* \"Midas/Midas_main/src/LPToken.sol\":11375:11390  _tokenApprovals */\n      0x06\n        /* \"Midas/Midas_main/src/LPToken.sol\":11375:11399  _tokenApprovals[tokenId] */\n      0x20\n      swap1\n      dup2\n      mstore\n      0x40\n      dup1\n      dup4\n      keccak256\n        /* \"Midas/Midas_main/src/LPToken.sol\":11368:11399  delete _tokenApprovals[tokenId] */\n      dup1\n      sload\n      not(sub(shl(0xa0, 0x01), 0x01))\n      swap1\n      dup2\n      and\n      swap1\n      swap2\n      sstore\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"Midas/Midas_main/src/LPToken.sol\":11615:11631  _balances[owner] */\n      dup6\n      and\n      dup1\n      dup6\n      mstore\n        /* \"Midas/Midas_main/src/LPToken.sol\":11615:11624  _balances */\n      0x05\n        /* \"Midas/Midas_main/src/LPToken.sol\":11615:11631  _balances[owner] */\n      dup5\n      mstore\n      dup3\n      dup6\n      keccak256\n        /* \"Midas/Midas_main/src/LPToken.sol\":11615:11636  _balances[owner] -= 1 */\n      dup1\n      sload\n      not(0x00)\n      add\n      swap1\n      sstore\n        /* \"Midas/Midas_main/src/LPToken.sol\":11663:11679  _owners[tokenId] */\n      dup8\n      dup6\n      mstore\n        /* \"Midas/Midas_main/src/LPToken.sol\":11663:11670  _owners */\n      0x04\n        /* \"Midas/Midas_main/src/LPToken.sol\":11663:11679  _owners[tokenId] */\n      swap1\n      swap4\n      mstore\n      dup2\n      dup5\n      keccak256\n        /* \"Midas/Midas_main/src/LPToken.sol\":11656:11679  delete _owners[tokenId] */\n      dup1\n      sload\n      swap1\n      swap2\n      and\n      swap1\n      sstore\n        /* \"Midas/Midas_main/src/LPToken.sol\":11695:11731  Transfer(owner, address(0), tokenId) */\n      mload\n        /* \"Midas/Midas_main/src/LPToken.sol\":11298:11330  owner = LPToken.ownerOf(tokenId) */\n      swap3\n      swap4\n      pop\n        /* \"Midas/Midas_main/src/LPToken.sol\":11391:11398  tokenId */\n      dup5\n      swap3\n      0x00\n      dup1\n      mload\n      0x20\n      data_ada389e1fc24a8587c776340efb91b36e675792ab631816100d55df0b5cf3cbc\n      dup4\n      codecopy\n      dup2\n      mload\n      swap2\n      mstore\n        /* \"Midas/Midas_main/src/LPToken.sol\":11695:11731  Transfer(owner, address(0), tokenId) */\n      swap1\n        /* \"Midas/Midas_main/src/LPToken.sol\":11375:11399  _tokenApprovals[tokenId] */\n      dup4\n      swap1\n        /* \"Midas/Midas_main/src/LPToken.sol\":11695:11731  Transfer(owner, address(0), tokenId) */\n      log4\n        /* \"Midas/Midas_main/src/LPToken.sol\":2046:2152  function mint(address to, uint256 tokenId) public virtual onlyPair {... */\n      pop\n      pop\n      jump\t// out\n        /* \"Midas/Midas_main/src/LPToken.sol\":7561:7676  function _ownerOf(uint256 tokenId) internal view virtual returns (address) {... */\n    tag_142:\n        /* \"Midas/Midas_main/src/LPToken.sol\":7627:7634  address */\n      0x00\n        /* \"Midas/Midas_main/src/LPToken.sol\":7653:7669  _owners[tokenId] */\n      swap1\n      dup2\n      mstore\n        /* \"Midas/Midas_main/src/LPToken.sol\":7653:7660  _owners */\n      0x04\n        /* \"Midas/Midas_main/src/LPToken.sol\":7653:7669  _owners[tokenId] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n      sload\n      sub(shl(0xa0, 0x01), 0x01)\n      and\n      swap1\n        /* \"Midas/Midas_main/src/LPToken.sol\":7561:7676  function _ownerOf(uint256 tokenId) internal view virtual returns (address) {... */\n      jump\t// out\n        /* \"Midas/Midas_main/src/LPToken.sol\":13750:14028  function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {... */\n    tag_159:\n        /* \"Midas/Midas_main/src/LPToken.sol\":13870:13878  operator */\n      dup2\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"Midas/Midas_main/src/LPToken.sol\":13861:13878  owner != operator */\n      and\n        /* \"Midas/Midas_main/src/LPToken.sol\":13861:13866  owner */\n      dup4\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"Midas/Midas_main/src/LPToken.sol\":13861:13878  owner != operator */\n      and\n      eq\n      iszero\n        /* \"Midas/Midas_main/src/LPToken.sol\":13853:13909  require(owner != operator, \"LPToken: approve to caller\") */\n      tag_222\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":9066:9068   */\n      0x20\n        /* \"Midas/Midas_main/src/LPToken.sol\":13853:13909  require(owner != operator, \"LPToken: approve to caller\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":9048:9069   */\n      mstore\n        /* \"#utility.yul\":9105:9107   */\n      0x1a\n        /* \"#utility.yul\":9085:9103   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":9078:9108   */\n      mstore\n      shl(0x31, 0x26282a37b5b2b71d1030b8383937bb32903a379031b0b63632b9)\n        /* \"#utility.yul\":9124:9142   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":9117:9173   */\n      mstore\n        /* \"#utility.yul\":9190:9208   */\n      0x64\n      add\n        /* \"Midas/Midas_main/src/LPToken.sol\":13853:13909  require(owner != operator, \"LPToken: approve to caller\") */\n      tag_103\n        /* \"#utility.yul\":8864:9214   */\n      jump\n        /* \"Midas/Midas_main/src/LPToken.sol\":13853:13909  require(owner != operator, \"LPToken: approve to caller\") */\n    tag_222:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"Midas/Midas_main/src/LPToken.sol\":13919:13944  _operatorApprovals[owner] */\n      dup4\n      dup2\n      and\n      0x00\n      dup2\n      dup2\n      mstore\n        /* \"Midas/Midas_main/src/LPToken.sol\":13919:13937  _operatorApprovals */\n      0x07\n        /* \"Midas/Midas_main/src/LPToken.sol\":13919:13944  _operatorApprovals[owner] */\n      0x20\n      swap1\n      dup2\n      mstore\n      0x40\n      dup1\n      dup4\n      keccak256\n        /* \"Midas/Midas_main/src/LPToken.sol\":13919:13954  _operatorApprovals[owner][operator] */\n      swap5\n      dup8\n      and\n      dup1\n      dup5\n      mstore\n      swap5\n      dup3\n      mstore\n      swap2\n      dup3\n      swap1\n      keccak256\n        /* \"Midas/Midas_main/src/LPToken.sol\":13919:13965  _operatorApprovals[owner][operator] = approved */\n      dup1\n      sload\n      not(0xff)\n      and\n      dup7\n      iszero\n      iszero\n      swap1\n      dup2\n      or\n      swap1\n      swap2\n      sstore\n        /* \"Midas/Midas_main/src/LPToken.sol\":13980:14021  ApprovalForAll(owner, operator, approved) */\n      swap2\n      mload\n        /* \"#utility.yul\":540:581   */\n      swap2\n      dup3\n      mstore\n        /* \"Midas/Midas_main/src/LPToken.sol\":13980:14021  ApprovalForAll(owner, operator, approved) */\n      0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31\n      swap2\n        /* \"#utility.yul\":513:531   */\n      add\n        /* \"Midas/Midas_main/src/LPToken.sol\":13980:14021  ApprovalForAll(owner, operator, approved) */\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log3\n        /* \"Midas/Midas_main/src/LPToken.sol\":13750:14028  function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {... */\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"Midas/Midas_main/src/LPToken.sol\":7184:7452  function _safeTransfer(address from, address to, uint256 tokenId, bytes memory data) internal virtual {... */\n    tag_166:\n        /* \"Midas/Midas_main/src/LPToken.sol\":7296:7324  _transfer(from, to, tokenId) */\n      tag_227\n        /* \"Midas/Midas_main/src/LPToken.sol\":7306:7310  from */\n      dup5\n        /* \"Midas/Midas_main/src/LPToken.sol\":7312:7314  to */\n      dup5\n        /* \"Midas/Midas_main/src/LPToken.sol\":7316:7323  tokenId */\n      dup5\n        /* \"Midas/Midas_main/src/LPToken.sol\":7296:7305  _transfer */\n      tag_123\n        /* \"Midas/Midas_main/src/LPToken.sol\":7296:7324  _transfer(from, to, tokenId) */\n      jump\t// in\n    tag_227:\n        /* \"Midas/Midas_main/src/LPToken.sol\":7342:7389  _checkOnERC721Received(from, to, tokenId, data) */\n      tag_228\n        /* \"Midas/Midas_main/src/LPToken.sol\":7365:7369  from */\n      dup5\n        /* \"Midas/Midas_main/src/LPToken.sol\":7371:7373  to */\n      dup5\n        /* \"Midas/Midas_main/src/LPToken.sol\":7375:7382  tokenId */\n      dup5\n        /* \"Midas/Midas_main/src/LPToken.sol\":7384:7388  data */\n      dup5\n        /* \"Midas/Midas_main/src/LPToken.sol\":7342:7364  _checkOnERC721Received */\n      tag_229\n        /* \"Midas/Midas_main/src/LPToken.sol\":7342:7389  _checkOnERC721Received(from, to, tokenId, data) */\n      jump\t// in\n    tag_228:\n        /* \"Midas/Midas_main/src/LPToken.sol\":7334:7445  require(_checkOnERC721Received(from, to, tokenId, data), \"LPToken: transfer to non ERC721Receiver implementer\") */\n      tag_165\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_103\n      swap1\n      tag_232\n      jump\t// in\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":415:1111  function toString(uint256 value) internal pure returns (string memory) {... */\n    tag_177:\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":471:484  string memory */\n      0x60\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":520:534  uint256 length */\n      0x00\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":537:554  Math.log10(value) */\n      tag_235\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":548:553  value */\n      dup4\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":537:547  Math.log10 */\n      tag_236\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":537:554  Math.log10(value) */\n      jump\t// in\n    tag_235:\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":557:558  1 */\n      0x01\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":537:558  Math.log10(value) + 1 */\n      add\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":520:558  uint256 length = Math.log10(value) + 1 */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":572:592  string memory buffer */\n      0x00\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":606:612  length */\n      dup2\n      sub(shl(0x40, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":595:613  new string(length) */\n      dup2\n      gt\n      iszero\n      tag_238\n      jumpi\n      tag_238\n      tag_239\n      jump\t// in\n    tag_238:\n      mload(0x40)\n      swap1\n      dup1\n      dup3\n      mstore\n      dup1\n      0x1f\n      add\n      not(0x1f)\n      and\n      0x20\n      add\n      dup3\n      add\n      0x40\n      mstore\n      dup1\n      iszero\n      tag_240\n      jumpi\n      0x20\n      dup3\n      add\n      dup2\n      dup1\n      calldatasize\n      dup4\n      calldatacopy\n      add\n      swap1\n      pop\n    tag_240:\n      pop\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":572:613  string memory buffer = new string(length) */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":733:761  add(buffer, add(32, length)) */\n      dup2\n      dup2\n      add\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":749:751  32 */\n      0x20\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":733:761  add(buffer, add(32, length)) */\n      add\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":788:1068  while (true) {... */\n    tag_241:\n      not(0x00)\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":819:824  ptr-- */\n      add\n      shl(0x81, 0x181899199a1a9b1b9c1cb0b131b232b3)\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":953:955  10 */\n      0x0a\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":942:956  mod(value, 10) */\n      dup7\n      mod\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":937:967  byte(mod(value, 10), _SYMBOLS) */\n      byte\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":819:824  ptr-- */\n      dup2\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":924:968  mstore8(ptr, byte(mod(value, 10), _SYMBOLS)) */\n      mstore8\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":1012:1014  10 */\n      0x0a\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":1003:1014  value /= 10 */\n      dup6\n      div\n      swap5\n      pop\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":1036:1046  value == 0 */\n      dup5\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":1032:1053  if (value == 0) break */\n      tag_246\n      jumpi\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":1048:1053  break */\n      jump(tag_242)\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":1032:1053  if (value == 0) break */\n    tag_246:\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":788:1068  while (true) {... */\n      jump(tag_241)\n    tag_242:\n      pop\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":1088:1094  buffer */\n      swap4\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":415:1111  function toString(uint256 value) internal pure returns (string memory) {... */\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"Midas/Midas_main/src/LPToken.sol\":7979:8105  function _exists(uint256 tokenId) internal view virtual returns (bool) {... */\n    tag_184:\n        /* \"Midas/Midas_main/src/LPToken.sol\":8044:8048  bool */\n      0x00\n      dup1\n        /* \"Midas/Midas_main/src/LPToken.sol\":8067:8084  _ownerOf(tokenId) */\n      tag_248\n        /* \"Midas/Midas_main/src/LPToken.sol\":8076:8083  tokenId */\n      dup4\n        /* \"Midas/Midas_main/src/LPToken.sol\":8067:8075  _ownerOf */\n      tag_142\n        /* \"Midas/Midas_main/src/LPToken.sol\":8067:8084  _ownerOf(tokenId) */\n      jump\t// in\n    tag_248:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"Midas/Midas_main/src/LPToken.sol\":8067:8098  _ownerOf(tokenId) != address(0) */\n      and\n      eq\n      iszero\n      swap3\n        /* \"Midas/Midas_main/src/LPToken.sol\":7979:8105  function _exists(uint256 tokenId) internal view virtual returns (bool) {... */\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"Midas/Midas_main/src/LPToken.sol\":16346:16742  function _beforeTokenTransfer(... */\n    tag_205:\n        /* \"Midas/Midas_main/src/LPToken.sol\":16530:16531  1 */\n      0x01\n        /* \"Midas/Midas_main/src/LPToken.sol\":16518:16527  batchSize */\n      dup2\n        /* \"Midas/Midas_main/src/LPToken.sol\":16518:16531  batchSize > 1 */\n      gt\n        /* \"Midas/Midas_main/src/LPToken.sol\":16514:16736  if (batchSize > 1) {... */\n      iszero\n      tag_165\n      jumpi\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"Midas/Midas_main/src/LPToken.sol\":16551:16569  from != address(0) */\n      dup5\n      and\n      iszero\n        /* \"Midas/Midas_main/src/LPToken.sol\":16547:16632  if (from != address(0)) {... */\n      tag_251\n      jumpi\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"Midas/Midas_main/src/LPToken.sol\":16589:16604  _balances[from] */\n      dup5\n      and\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"Midas/Midas_main/src/LPToken.sol\":16589:16598  _balances */\n      0x05\n        /* \"Midas/Midas_main/src/LPToken.sol\":16589:16604  _balances[from] */\n      0x20\n      mstore\n      0x40\n      dup2\n      keccak256\n        /* \"Midas/Midas_main/src/LPToken.sol\":16589:16617  _balances[from] -= batchSize */\n      dup1\n      sload\n        /* \"Midas/Midas_main/src/LPToken.sol\":16608:16617  batchSize */\n      dup4\n      swap3\n        /* \"Midas/Midas_main/src/LPToken.sol\":16589:16604  _balances[from] */\n      swap1\n        /* \"Midas/Midas_main/src/LPToken.sol\":16589:16617  _balances[from] -= batchSize */\n      tag_252\n      swap1\n        /* \"Midas/Midas_main/src/LPToken.sol\":16608:16617  batchSize */\n      dup5\n      swap1\n        /* \"Midas/Midas_main/src/LPToken.sol\":16589:16617  _balances[from] -= batchSize */\n      tag_253\n      jump\t// in\n    tag_252:\n      swap1\n      swap2\n      sstore\n      pop\n      pop\n        /* \"Midas/Midas_main/src/LPToken.sol\":16547:16632  if (from != address(0)) {... */\n    tag_251:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"Midas/Midas_main/src/LPToken.sol\":16649:16665  to != address(0) */\n      dup4\n      and\n      iszero\n        /* \"Midas/Midas_main/src/LPToken.sol\":16645:16726  if (to != address(0)) {... */\n      tag_165\n      jumpi\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"Midas/Midas_main/src/LPToken.sol\":16685:16698  _balances[to] */\n      dup4\n      and\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"Midas/Midas_main/src/LPToken.sol\":16685:16694  _balances */\n      0x05\n        /* \"Midas/Midas_main/src/LPToken.sol\":16685:16698  _balances[to] */\n      0x20\n      mstore\n      0x40\n      dup2\n      keccak256\n        /* \"Midas/Midas_main/src/LPToken.sol\":16685:16711  _balances[to] += batchSize */\n      dup1\n      sload\n        /* \"Midas/Midas_main/src/LPToken.sol\":16702:16711  batchSize */\n      dup4\n      swap3\n        /* \"Midas/Midas_main/src/LPToken.sol\":16685:16698  _balances[to] */\n      swap1\n        /* \"Midas/Midas_main/src/LPToken.sol\":16685:16711  _balances[to] += batchSize */\n      tag_255\n      swap1\n        /* \"Midas/Midas_main/src/LPToken.sol\":16702:16711  batchSize */\n      dup5\n      swap1\n        /* \"Midas/Midas_main/src/LPToken.sol\":16685:16711  _balances[to] += batchSize */\n      tag_256\n      jump\t// in\n    tag_255:\n      swap1\n      swap2\n      sstore\n      pop\n      pop\n        /* \"Midas/Midas_main/src/LPToken.sol\":16346:16742  function _beforeTokenTransfer(... */\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"Midas/Midas_main/src/LPToken.sol\":9184:9464  function _safeMint(address to, uint256 tokenId, bytes memory data) internal virtual {... */\n    tag_214:\n        /* \"Midas/Midas_main/src/LPToken.sol\":9278:9296  _mint(to, tokenId) */\n      tag_259\n        /* \"Midas/Midas_main/src/LPToken.sol\":9284:9286  to */\n      dup4\n        /* \"Midas/Midas_main/src/LPToken.sol\":9288:9295  tokenId */\n      dup4\n        /* \"Midas/Midas_main/src/LPToken.sol\":9278:9283  _mint */\n      tag_260\n        /* \"Midas/Midas_main/src/LPToken.sol\":9278:9296  _mint(to, tokenId) */\n      jump\t// in\n    tag_259:\n        /* \"Midas/Midas_main/src/LPToken.sol\":9327:9380  _checkOnERC721Received(address(0), to, tokenId, data) */\n      tag_261\n        /* \"Midas/Midas_main/src/LPToken.sol\":9358:9359  0 */\n      0x00\n        /* \"Midas/Midas_main/src/LPToken.sol\":9362:9364  to */\n      dup5\n        /* \"Midas/Midas_main/src/LPToken.sol\":9366:9373  tokenId */\n      dup5\n        /* \"Midas/Midas_main/src/LPToken.sol\":9375:9379  data */\n      dup5\n        /* \"Midas/Midas_main/src/LPToken.sol\":9327:9349  _checkOnERC721Received */\n      tag_229\n        /* \"Midas/Midas_main/src/LPToken.sol\":9327:9380  _checkOnERC721Received(address(0), to, tokenId, data) */\n      jump\t// in\n    tag_261:\n        /* \"Midas/Midas_main/src/LPToken.sol\":9306:9457  require(... */\n      tag_113\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_103\n      swap1\n      tag_232\n      jump\t// in\n        /* \"Midas/Midas_main/src/LPToken.sol\":14798:15630  function _checkOnERC721Received(... */\n    tag_229:\n        /* \"Midas/Midas_main/src/LPToken.sol\":14947:14951  bool */\n      0x00\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"Midas/Midas_main/src/LPToken.sol\":14967:14980  to.isContract */\n      dup5\n      and\n        /* \"@openzeppelin/contracts/utils/Address.sol\":1465:1484  account.code.length */\n      extcodesize\n        /* \"@openzeppelin/contracts/utils/Address.sol\":1465:1488  account.code.length > 0 */\n      iszero\n        /* \"Midas/Midas_main/src/LPToken.sol\":14963:15624  if (to.isContract()) {... */\n      tag_267\n      jumpi\n        /* \"Midas/Midas_main/src/LPToken.sol\":15002:15073  IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) */\n      mload(0x40)\n      shl(0xe1, 0x0a85bd01)\n      dup2\n      mstore\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"Midas/Midas_main/src/LPToken.sol\":15002:15038  IERC721Receiver(to).onERC721Received */\n      dup6\n      and\n      swap1\n      0x150b7a02\n      swap1\n        /* \"Midas/Midas_main/src/LPToken.sol\":15002:15073  IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) */\n      tag_269\n      swap1\n        /* \"@openzeppelin/contracts/utils/Context.sol\":719:729  msg.sender */\n      caller\n      swap1\n        /* \"Midas/Midas_main/src/LPToken.sol\":15053:15057  from */\n      dup10\n      swap1\n        /* \"Midas/Midas_main/src/LPToken.sol\":15059:15066  tokenId */\n      dup9\n      swap1\n        /* \"Midas/Midas_main/src/LPToken.sol\":15068:15072  data */\n      dup9\n      swap1\n        /* \"Midas/Midas_main/src/LPToken.sol\":15002:15073  IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) */\n      0x04\n      add\n      tag_270\n      jump\t// in\n    tag_269:\n      0x20\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      0x00\n      dup8\n      gas\n      call\n      swap3\n      pop\n      pop\n      pop\n      dup1\n      iszero\n      tag_271\n      jumpi\n      pop\n      0x40\n      dup1\n      mload\n      0x1f\n      returndatasize\n      swap1\n      dup2\n      add\n      not(0x1f)\n      and\n      dup3\n      add\n      swap1\n      swap3\n      mstore\n      tag_272\n      swap2\n      dup2\n      add\n      swap1\n      tag_273\n      jump\t// in\n    tag_272:\n      0x01\n    tag_271:\n        /* \"Midas/Midas_main/src/LPToken.sol\":14998:15572  try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {... */\n      tag_274\n      jumpi\n      returndatasize\n      dup1\n      dup1\n      iszero\n      tag_279\n      jumpi\n      mload(0x40)\n      swap2\n      pop\n      and(add(returndatasize, 0x3f), not(0x1f))\n      dup3\n      add\n      0x40\n      mstore\n      returndatasize\n      dup3\n      mstore\n      returndatasize\n      0x00\n      0x20\n      dup5\n      add\n      returndatacopy\n      jump(tag_278)\n    tag_279:\n      0x60\n      swap2\n      pop\n    tag_278:\n      pop\n        /* \"Midas/Midas_main/src/LPToken.sol\":15240:15253  reason.length */\n      dup1\n      mload\n        /* \"Midas/Midas_main/src/LPToken.sol\":15236:15558  if (reason.length == 0) {... */\n      tag_280\n      jumpi\n        /* \"Midas/Midas_main/src/LPToken.sol\":15282:15343  revert(\"LPToken: transfer to non ERC721Receiver implementer\") */\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_103\n      swap1\n      tag_232\n      jump\t// in\n        /* \"Midas/Midas_main/src/LPToken.sol\":15236:15558  if (reason.length == 0) {... */\n    tag_280:\n        /* \"Midas/Midas_main/src/LPToken.sol\":15510:15516  reason */\n      dup1\n        /* \"Midas/Midas_main/src/LPToken.sol\":15504:15517  mload(reason) */\n      mload\n        /* \"Midas/Midas_main/src/LPToken.sol\":15495:15501  reason */\n      dup2\n        /* \"Midas/Midas_main/src/LPToken.sol\":15491:15493  32 */\n      0x20\n        /* \"Midas/Midas_main/src/LPToken.sol\":15487:15502  add(32, reason) */\n      add\n        /* \"Midas/Midas_main/src/LPToken.sol\":15480:15518  revert(add(32, reason), mload(reason)) */\n      revert\n        /* \"Midas/Midas_main/src/LPToken.sol\":14998:15572  try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {... */\n    tag_274:\n      not(sub(shl(0xe0, 0x01), 0x01))\n        /* \"Midas/Midas_main/src/LPToken.sol\":15123:15174  retval == IERC721Receiver.onERC721Received.selector */\n      and\n      shl(0xe1, 0x0a85bd01)\n      eq\n      swap1\n      pop\n        /* \"Midas/Midas_main/src/LPToken.sol\":15116:15174  return retval == IERC721Receiver.onERC721Received.selector */\n      jump(tag_194)\n        /* \"Midas/Midas_main/src/LPToken.sol\":14963:15624  if (to.isContract()) {... */\n    tag_267:\n      pop\n        /* \"Midas/Midas_main/src/LPToken.sol\":15609:15613  true */\n      0x01\n        /* \"Midas/Midas_main/src/LPToken.sol\":14798:15630  function _checkOnERC721Received(... */\n      swap5\n      swap4\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":9889:10779  function log10(uint256 value) internal pure returns (uint256) {... */\n    tag_236:\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":9942:9949  uint256 */\n      0x00\n      dup1\n      shl(0x40, 0x184f03e93ff9f4daa797ed6e38ed64bf6a1f01)\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":10017:10032  value >= 10**64 */\n      dup4\n      lt\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":10013:10112  if (value >= 10**64) {... */\n      tag_286\n      jumpi\n      shl(0x40, 0x184f03e93ff9f4daa797ed6e38ed64bf6a1f01)\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":10052:10067  value /= 10**64 */\n      dup4\n      div\n      swap3\n      pop\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":10095:10097  64 */\n      0x40\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":10085:10097  result += 64 */\n      add\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":10013:10112  if (value >= 10**64) {... */\n    tag_286:\n      shl(0x20, 0x04ee2d6d415b85acef81)\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":10129:10134  value */\n      dup4\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":10129:10144  value >= 10**32 */\n      lt\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":10125:10224  if (value >= 10**32) {... */\n      tag_289\n      jumpi\n      shl(0x20, 0x04ee2d6d415b85acef81)\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":10164:10179  value /= 10**32 */\n      dup4\n      div\n      swap3\n      pop\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":10207:10209  32 */\n      0x20\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":10197:10209  result += 32 */\n      add\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":10125:10224  if (value >= 10**32) {... */\n    tag_289:\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":10250:10256  10**16 */\n      0x2386f26fc10000\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":10241:10246  value */\n      dup4\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":10241:10256  value >= 10**16 */\n      lt\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":10237:10336  if (value >= 10**16) {... */\n      tag_292\n      jumpi\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":10285:10291  10**16 */\n      0x2386f26fc10000\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":10276:10291  value /= 10**16 */\n      dup4\n      div\n      swap3\n      pop\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":10319:10321  16 */\n      0x10\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":10309:10321  result += 16 */\n      add\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":10237:10336  if (value >= 10**16) {... */\n    tag_292:\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":10362:10367  10**8 */\n      0x05f5e100\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":10353:10358  value */\n      dup4\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":10353:10367  value >= 10**8 */\n      lt\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":10349:10445  if (value >= 10**8) {... */\n      tag_295\n      jumpi\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":10396:10401  10**8 */\n      0x05f5e100\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":10387:10401  value /= 10**8 */\n      dup4\n      div\n      swap3\n      pop\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":10429:10430  8 */\n      0x08\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":10419:10430  result += 8 */\n      add\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":10349:10445  if (value >= 10**8) {... */\n    tag_295:\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":10471:10476  10**4 */\n      0x2710\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":10462:10467  value */\n      dup4\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":10462:10476  value >= 10**4 */\n      lt\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":10458:10554  if (value >= 10**4) {... */\n      tag_298\n      jumpi\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":10505:10510  10**4 */\n      0x2710\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":10496:10510  value /= 10**4 */\n      dup4\n      div\n      swap3\n      pop\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":10538:10539  4 */\n      0x04\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":10528:10539  result += 4 */\n      add\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":10458:10554  if (value >= 10**4) {... */\n    tag_298:\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":10580:10585  10**2 */\n      0x64\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":10571:10576  value */\n      dup4\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":10571:10585  value >= 10**2 */\n      lt\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":10567:10663  if (value >= 10**2) {... */\n      tag_301\n      jumpi\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":10614:10619  10**2 */\n      0x64\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":10605:10619  value /= 10**2 */\n      dup4\n      div\n      swap3\n      pop\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":10647:10648  2 */\n      0x02\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":10637:10648  result += 2 */\n      add\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":10567:10663  if (value >= 10**2) {... */\n    tag_301:\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":10689:10694  10**1 */\n      0x0a\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":10680:10685  value */\n      dup4\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":10680:10694  value >= 10**1 */\n      lt\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":10676:10740  if (value >= 10**1) {... */\n      tag_88\n      jumpi\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":10724:10725  1 */\n      0x01\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":10714:10725  result += 1 */\n      add\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":10766:10772  result */\n      swap3\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":9889:10779  function log10(uint256 value) internal pure returns (uint256) {... */\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"Midas/Midas_main/src/LPToken.sol\":9786:10709  function _mint(address to, uint256 tokenId) internal virtual {... */\n    tag_260:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"Midas/Midas_main/src/LPToken.sol\":9865:9881  to != address(0) */\n      dup3\n      and\n        /* \"Midas/Midas_main/src/LPToken.sol\":9857:9919  require(to != address(0), \"LPToken: mint to the zero address\") */\n      tag_306\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":11116:11118   */\n      0x20\n        /* \"Midas/Midas_main/src/LPToken.sol\":9857:9919  require(to != address(0), \"LPToken: mint to the zero address\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":11098:11119   */\n      mstore\n        /* \"#utility.yul\":11155:11157   */\n      0x21\n        /* \"#utility.yul\":11135:11153   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":11128:11158   */\n      mstore\n        /* \"#utility.yul\":11194:11228   */\n      0x4c50546f6b656e3a206d696e7420746f20746865207a65726f20616464726573\n        /* \"#utility.yul\":11174:11192   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":11167:11229   */\n      mstore\n      shl(0xf8, 0x73)\n        /* \"#utility.yul\":11245:11263   */\n      0x64\n      dup3\n      add\n        /* \"#utility.yul\":11238:11269   */\n      mstore\n        /* \"#utility.yul\":11286:11305   */\n      0x84\n      add\n        /* \"Midas/Midas_main/src/LPToken.sol\":9857:9919  require(to != address(0), \"LPToken: mint to the zero address\") */\n      tag_103\n        /* \"#utility.yul\":10914:11311   */\n      jump\n        /* \"Midas/Midas_main/src/LPToken.sol\":9857:9919  require(to != address(0), \"LPToken: mint to the zero address\") */\n    tag_306:\n        /* \"Midas/Midas_main/src/LPToken.sol\":9938:9954  _exists(tokenId) */\n      tag_309\n        /* \"Midas/Midas_main/src/LPToken.sol\":9946:9953  tokenId */\n      dup2\n        /* \"Midas/Midas_main/src/LPToken.sol\":9938:9945  _exists */\n      tag_184\n        /* \"Midas/Midas_main/src/LPToken.sol\":9938:9954  _exists(tokenId) */\n      jump\t// in\n    tag_309:\n        /* \"Midas/Midas_main/src/LPToken.sol\":9937:9954  !_exists(tokenId) */\n      iszero\n        /* \"Midas/Midas_main/src/LPToken.sol\":9929:9988  require(!_exists(tokenId), \"LPToken: token already minted\") */\n      tag_310\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_103\n      swap1\n      tag_312\n      jump\t// in\n    tag_310:\n        /* \"Midas/Midas_main/src/LPToken.sol\":9999:10047  _beforeTokenTransfer(address(0), to, tokenId, 1) */\n      tag_313\n        /* \"Midas/Midas_main/src/LPToken.sol\":10028:10029  0 */\n      0x00\n        /* \"Midas/Midas_main/src/LPToken.sol\":10032:10034  to */\n      dup4\n        /* \"Midas/Midas_main/src/LPToken.sol\":10036:10043  tokenId */\n      dup4\n        /* \"Midas/Midas_main/src/LPToken.sol\":10045:10046  1 */\n      0x01\n        /* \"Midas/Midas_main/src/LPToken.sol\":9999:10019  _beforeTokenTransfer */\n      tag_205\n        /* \"Midas/Midas_main/src/LPToken.sol\":9999:10047  _beforeTokenTransfer(address(0), to, tokenId, 1) */\n      jump\t// in\n    tag_313:\n        /* \"Midas/Midas_main/src/LPToken.sol\":10143:10159  _exists(tokenId) */\n      tag_314\n        /* \"Midas/Midas_main/src/LPToken.sol\":10151:10158  tokenId */\n      dup2\n        /* \"Midas/Midas_main/src/LPToken.sol\":10143:10150  _exists */\n      tag_184\n        /* \"Midas/Midas_main/src/LPToken.sol\":10143:10159  _exists(tokenId) */\n      jump\t// in\n    tag_314:\n        /* \"Midas/Midas_main/src/LPToken.sol\":10142:10159  !_exists(tokenId) */\n      iszero\n        /* \"Midas/Midas_main/src/LPToken.sol\":10134:10193  require(!_exists(tokenId), \"LPToken: token already minted\") */\n      tag_315\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_103\n      swap1\n      tag_312\n      jump\t// in\n    tag_315:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"Midas/Midas_main/src/LPToken.sol\":10535:10548  _balances[to] */\n      dup3\n      and\n      0x00\n      dup2\n      dup2\n      mstore\n        /* \"Midas/Midas_main/src/LPToken.sol\":10535:10544  _balances */\n      0x05\n        /* \"Midas/Midas_main/src/LPToken.sol\":10535:10548  _balances[to] */\n      0x20\n      swap1\n      dup2\n      mstore\n      0x40\n      dup1\n      dup4\n      keccak256\n        /* \"Midas/Midas_main/src/LPToken.sol\":10535:10553  _balances[to] += 1 */\n      dup1\n      sload\n        /* \"Midas/Midas_main/src/LPToken.sol\":10552:10553  1 */\n      0x01\n        /* \"Midas/Midas_main/src/LPToken.sol\":10535:10553  _balances[to] += 1 */\n      add\n      swap1\n      sstore\n        /* \"Midas/Midas_main/src/LPToken.sol\":10574:10590  _owners[tokenId] */\n      dup5\n      dup4\n      mstore\n        /* \"Midas/Midas_main/src/LPToken.sol\":10574:10581  _owners */\n      0x04\n        /* \"Midas/Midas_main/src/LPToken.sol\":10574:10590  _owners[tokenId] */\n      swap1\n      swap2\n      mstore\n      dup1\n      dup3\n      keccak256\n        /* \"Midas/Midas_main/src/LPToken.sol\":10574:10595  _owners[tokenId] = to */\n      dup1\n      sload\n      not(sub(shl(0xa0, 0x01), 0x01))\n      and\n      dup5\n      or\n      swap1\n      sstore\n        /* \"Midas/Midas_main/src/LPToken.sol\":10611:10644  Transfer(address(0), to, tokenId) */\n      mload\n        /* \"Midas/Midas_main/src/LPToken.sol\":10582:10589  tokenId */\n      dup4\n      swap3\n        /* \"Midas/Midas_main/src/LPToken.sol\":10535:10548  _balances[to] */\n      swap2\n      swap1\n      0x00\n      dup1\n      mload\n      0x20\n      data_ada389e1fc24a8587c776340efb91b36e675792ab631816100d55df0b5cf3cbc\n      dup4\n      codecopy\n      dup2\n      mload\n      swap2\n      mstore\n        /* \"Midas/Midas_main/src/LPToken.sol\":10611:10644  Transfer(address(0), to, tokenId) */\n      swap1\n        /* \"Midas/Midas_main/src/LPToken.sol\":10535:10548  _balances[to] */\n      dup3\n      swap1\n        /* \"Midas/Midas_main/src/LPToken.sol\":10611:10644  Transfer(address(0), to, tokenId) */\n      log4\n        /* \"Midas/Midas_main/src/LPToken.sol\":2046:2152  function mint(address to, uint256 tokenId) public virtual onlyPair {... */\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":14:145   */\n    tag_319:\n      not(sub(shl(0xe0, 0x01), 0x01))\n        /* \"#utility.yul\":88:120   */\n      dup2\n      and\n        /* \"#utility.yul\":78:121   */\n      dup2\n      eq\n        /* \"#utility.yul\":68:139   */\n      tag_138\n      jumpi\n        /* \"#utility.yul\":135:136   */\n      0x00\n        /* \"#utility.yul\":132:133   */\n      dup1\n        /* \"#utility.yul\":125:137   */\n      revert\n        /* \"#utility.yul\":150:395   */\n    tag_21:\n        /* \"#utility.yul\":208:214   */\n      0x00\n        /* \"#utility.yul\":261:263   */\n      0x20\n        /* \"#utility.yul\":249:258   */\n      dup3\n        /* \"#utility.yul\":240:247   */\n      dup5\n        /* \"#utility.yul\":236:259   */\n      sub\n        /* \"#utility.yul\":232:264   */\n      slt\n        /* \"#utility.yul\":229:281   */\n      iszero\n      tag_328\n      jumpi\n        /* \"#utility.yul\":277:278   */\n      0x00\n        /* \"#utility.yul\":274:275   */\n      dup1\n        /* \"#utility.yul\":267:279   */\n      revert\n        /* \"#utility.yul\":229:281   */\n    tag_328:\n        /* \"#utility.yul\":316:325   */\n      dup2\n        /* \"#utility.yul\":303:326   */\n      calldataload\n        /* \"#utility.yul\":335:365   */\n      tag_175\n        /* \"#utility.yul\":359:364   */\n      dup2\n        /* \"#utility.yul\":335:365   */\n      tag_319\n      jump\t// in\n        /* \"#utility.yul\":592:850   */\n    tag_320:\n        /* \"#utility.yul\":664:665   */\n      0x00\n        /* \"#utility.yul\":674:787   */\n    tag_332:\n        /* \"#utility.yul\":688:694   */\n      dup4\n        /* \"#utility.yul\":685:686   */\n      dup2\n        /* \"#utility.yul\":682:695   */\n      lt\n        /* \"#utility.yul\":674:787   */\n      iszero\n      tag_334\n      jumpi\n        /* \"#utility.yul\":764:775   */\n      dup2\n      dup2\n      add\n        /* \"#utility.yul\":758:776   */\n      mload\n        /* \"#utility.yul\":745:756   */\n      dup4\n      dup3\n      add\n        /* \"#utility.yul\":738:777   */\n      mstore\n        /* \"#utility.yul\":710:712   */\n      0x20\n        /* \"#utility.yul\":703:713   */\n      add\n        /* \"#utility.yul\":674:787   */\n      jump(tag_332)\n    tag_334:\n        /* \"#utility.yul\":805:811   */\n      dup4\n        /* \"#utility.yul\":802:803   */\n      dup2\n        /* \"#utility.yul\":799:812   */\n      gt\n        /* \"#utility.yul\":796:844   */\n      iszero\n      tag_165\n      jumpi\n      pop\n      pop\n        /* \"#utility.yul\":840:841   */\n      0x00\n        /* \"#utility.yul\":822:838   */\n      swap2\n      add\n        /* \"#utility.yul\":815:842   */\n      mstore\n        /* \"#utility.yul\":592:850   */\n      jump\t// out\n        /* \"#utility.yul\":855:1113   */\n    tag_321:\n        /* \"#utility.yul\":897:900   */\n      0x00\n        /* \"#utility.yul\":935:940   */\n      dup2\n        /* \"#utility.yul\":929:941   */\n      mload\n        /* \"#utility.yul\":962:968   */\n      dup1\n        /* \"#utility.yul\":957:960   */\n      dup5\n        /* \"#utility.yul\":950:969   */\n      mstore\n        /* \"#utility.yul\":978:1041   */\n      tag_337\n        /* \"#utility.yul\":1034:1040   */\n      dup2\n        /* \"#utility.yul\":1027:1031   */\n      0x20\n        /* \"#utility.yul\":1022:1025   */\n      dup7\n        /* \"#utility.yul\":1018:1032   */\n      add\n        /* \"#utility.yul\":1011:1015   */\n      0x20\n        /* \"#utility.yul\":1004:1009   */\n      dup7\n        /* \"#utility.yul\":1000:1016   */\n      add\n        /* \"#utility.yul\":978:1041   */\n      tag_320\n      jump\t// in\n    tag_337:\n        /* \"#utility.yul\":1095:1097   */\n      0x1f\n        /* \"#utility.yul\":1074:1089   */\n      add\n      not(0x1f)\n        /* \"#utility.yul\":1070:1099   */\n      and\n        /* \"#utility.yul\":1061:1100   */\n      swap3\n      swap1\n      swap3\n      add\n        /* \"#utility.yul\":1102:1106   */\n      0x20\n        /* \"#utility.yul\":1057:1107   */\n      add\n      swap3\n        /* \"#utility.yul\":855:1113   */\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":1118:1338   */\n    tag_28:\n        /* \"#utility.yul\":1267:1269   */\n      0x20\n        /* \"#utility.yul\":1256:1265   */\n      dup2\n        /* \"#utility.yul\":1249:1270   */\n      mstore\n        /* \"#utility.yul\":1230:1234   */\n      0x00\n        /* \"#utility.yul\":1287:1332   */\n      tag_175\n        /* \"#utility.yul\":1328:1330   */\n      0x20\n        /* \"#utility.yul\":1317:1326   */\n      dup4\n        /* \"#utility.yul\":1313:1331   */\n      add\n        /* \"#utility.yul\":1305:1311   */\n      dup5\n        /* \"#utility.yul\":1287:1332   */\n      tag_321\n      jump\t// in\n        /* \"#utility.yul\":1343:1523   */\n    tag_31:\n        /* \"#utility.yul\":1402:1408   */\n      0x00\n        /* \"#utility.yul\":1455:1457   */\n      0x20\n        /* \"#utility.yul\":1443:1452   */\n      dup3\n        /* \"#utility.yul\":1434:1441   */\n      dup5\n        /* \"#utility.yul\":1430:1453   */\n      sub\n        /* \"#utility.yul\":1426:1458   */\n      slt\n        /* \"#utility.yul\":1423:1475   */\n      iszero\n      tag_341\n      jumpi\n        /* \"#utility.yul\":1471:1472   */\n      0x00\n        /* \"#utility.yul\":1468:1469   */\n      dup1\n        /* \"#utility.yul\":1461:1473   */\n      revert\n        /* \"#utility.yul\":1423:1475   */\n    tag_341:\n      pop\n        /* \"#utility.yul\":1494:1517   */\n      calldataload\n      swap2\n        /* \"#utility.yul\":1343:1523   */\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":1736:1909   */\n    tag_322:\n        /* \"#utility.yul\":1804:1824   */\n      dup1\n      calldataload\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"#utility.yul\":1853:1884   */\n      dup2\n      and\n        /* \"#utility.yul\":1843:1885   */\n      dup2\n      eq\n        /* \"#utility.yul\":1833:1903   */\n      tag_344\n      jumpi\n        /* \"#utility.yul\":1899:1900   */\n      0x00\n        /* \"#utility.yul\":1896:1897   */\n      dup1\n        /* \"#utility.yul\":1889:1901   */\n      revert\n        /* \"#utility.yul\":1833:1903   */\n    tag_344:\n        /* \"#utility.yul\":1736:1909   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":1914:2168   */\n    tag_37:\n        /* \"#utility.yul\":1982:1988   */\n      0x00\n        /* \"#utility.yul\":1990:1996   */\n      dup1\n        /* \"#utility.yul\":2043:2045   */\n      0x40\n        /* \"#utility.yul\":2031:2040   */\n      dup4\n        /* \"#utility.yul\":2022:2029   */\n      dup6\n        /* \"#utility.yul\":2018:2041   */\n      sub\n        /* \"#utility.yul\":2014:2046   */\n      slt\n        /* \"#utility.yul\":2011:2063   */\n      iszero\n      tag_346\n      jumpi\n        /* \"#utility.yul\":2059:2060   */\n      0x00\n        /* \"#utility.yul\":2056:2057   */\n      dup1\n        /* \"#utility.yul\":2049:2061   */\n      revert\n        /* \"#utility.yul\":2011:2063   */\n    tag_346:\n        /* \"#utility.yul\":2082:2111   */\n      tag_347\n        /* \"#utility.yul\":2101:2110   */\n      dup4\n        /* \"#utility.yul\":2082:2111   */\n      tag_322\n      jump\t// in\n    tag_347:\n        /* \"#utility.yul\":2072:2111   */\n      swap5\n        /* \"#utility.yul\":2158:2160   */\n      0x20\n        /* \"#utility.yul\":2143:2161   */\n      swap4\n      swap1\n      swap4\n      add\n        /* \"#utility.yul\":2130:2162   */\n      calldataload\n      swap4\n      pop\n      pop\n      pop\n        /* \"#utility.yul\":1914:2168   */\n      jump\t// out\n        /* \"#utility.yul\":2173:2501   */\n    tag_41:\n        /* \"#utility.yul\":2250:2256   */\n      0x00\n        /* \"#utility.yul\":2258:2264   */\n      dup1\n        /* \"#utility.yul\":2266:2272   */\n      0x00\n        /* \"#utility.yul\":2319:2321   */\n      0x60\n        /* \"#utility.yul\":2307:2316   */\n      dup5\n        /* \"#utility.yul\":2298:2305   */\n      dup7\n        /* \"#utility.yul\":2294:2317   */\n      sub\n        /* \"#utility.yul\":2290:2322   */\n      slt\n        /* \"#utility.yul\":2287:2339   */\n      iszero\n      tag_349\n      jumpi\n        /* \"#utility.yul\":2335:2336   */\n      0x00\n        /* \"#utility.yul\":2332:2333   */\n      dup1\n        /* \"#utility.yul\":2325:2337   */\n      revert\n        /* \"#utility.yul\":2287:2339   */\n    tag_349:\n        /* \"#utility.yul\":2358:2387   */\n      tag_350\n        /* \"#utility.yul\":2377:2386   */\n      dup5\n        /* \"#utility.yul\":2358:2387   */\n      tag_322\n      jump\t// in\n    tag_350:\n        /* \"#utility.yul\":2348:2387   */\n      swap3\n      pop\n        /* \"#utility.yul\":2406:2444   */\n      tag_351\n        /* \"#utility.yul\":2440:2442   */\n      0x20\n        /* \"#utility.yul\":2429:2438   */\n      dup6\n        /* \"#utility.yul\":2425:2443   */\n      add\n        /* \"#utility.yul\":2406:2444   */\n      tag_322\n      jump\t// in\n    tag_351:\n        /* \"#utility.yul\":2396:2444   */\n      swap2\n      pop\n        /* \"#utility.yul\":2491:2493   */\n      0x40\n        /* \"#utility.yul\":2480:2489   */\n      dup5\n        /* \"#utility.yul\":2476:2494   */\n      add\n        /* \"#utility.yul\":2463:2495   */\n      calldataload\n        /* \"#utility.yul\":2453:2495   */\n      swap1\n      pop\n        /* \"#utility.yul\":2173:2501   */\n      swap3\n      pop\n      swap3\n      pop\n      swap3\n      jump\t// out\n        /* \"#utility.yul\":2506:2692   */\n    tag_58:\n        /* \"#utility.yul\":2565:2571   */\n      0x00\n        /* \"#utility.yul\":2618:2620   */\n      0x20\n        /* \"#utility.yul\":2606:2615   */\n      dup3\n        /* \"#utility.yul\":2597:2604   */\n      dup5\n        /* \"#utility.yul\":2593:2616   */\n      sub\n        /* \"#utility.yul\":2589:2621   */\n      slt\n        /* \"#utility.yul\":2586:2638   */\n      iszero\n      tag_353\n      jumpi\n        /* \"#utility.yul\":2634:2635   */\n      0x00\n        /* \"#utility.yul\":2631:2632   */\n      dup1\n        /* \"#utility.yul\":2624:2636   */\n      revert\n        /* \"#utility.yul\":2586:2638   */\n    tag_353:\n        /* \"#utility.yul\":2657:2686   */\n      tag_175\n        /* \"#utility.yul\":2676:2685   */\n      dup3\n        /* \"#utility.yul\":2657:2686   */\n      tag_322\n      jump\t// in\n        /* \"#utility.yul\":2879:3226   */\n    tag_67:\n        /* \"#utility.yul\":2944:2950   */\n      0x00\n        /* \"#utility.yul\":2952:2958   */\n      dup1\n        /* \"#utility.yul\":3005:3007   */\n      0x40\n        /* \"#utility.yul\":2993:3002   */\n      dup4\n        /* \"#utility.yul\":2984:2991   */\n      dup6\n        /* \"#utility.yul\":2980:3003   */\n      sub\n        /* \"#utility.yul\":2976:3008   */\n      slt\n        /* \"#utility.yul\":2973:3025   */\n      iszero\n      tag_357\n      jumpi\n        /* \"#utility.yul\":3021:3022   */\n      0x00\n        /* \"#utility.yul\":3018:3019   */\n      dup1\n        /* \"#utility.yul\":3011:3023   */\n      revert\n        /* \"#utility.yul\":2973:3025   */\n    tag_357:\n        /* \"#utility.yul\":3044:3073   */\n      tag_358\n        /* \"#utility.yul\":3063:3072   */\n      dup4\n        /* \"#utility.yul\":3044:3073   */\n      tag_322\n      jump\t// in\n    tag_358:\n        /* \"#utility.yul\":3034:3073   */\n      swap2\n      pop\n        /* \"#utility.yul\":3123:3125   */\n      0x20\n        /* \"#utility.yul\":3112:3121   */\n      dup4\n        /* \"#utility.yul\":3108:3126   */\n      add\n        /* \"#utility.yul\":3095:3127   */\n      calldataload\n        /* \"#utility.yul\":3170:3175   */\n      dup1\n        /* \"#utility.yul\":3163:3176   */\n      iszero\n        /* \"#utility.yul\":3156:3177   */\n      iszero\n        /* \"#utility.yul\":3149:3154   */\n      dup2\n        /* \"#utility.yul\":3146:3178   */\n      eq\n        /* \"#utility.yul\":3136:3196   */\n      tag_359\n      jumpi\n        /* \"#utility.yul\":3192:3193   */\n      0x00\n        /* \"#utility.yul\":3189:3190   */\n      dup1\n        /* \"#utility.yul\":3182:3194   */\n      revert\n        /* \"#utility.yul\":3136:3196   */\n    tag_359:\n        /* \"#utility.yul\":3215:3220   */\n      dup1\n        /* \"#utility.yul\":3205:3220   */\n      swap2\n      pop\n      pop\n        /* \"#utility.yul\":2879:3226   */\n      swap3\n      pop\n      swap3\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":3231:3358   */\n    tag_239:\n        /* \"#utility.yul\":3292:3302   */\n      0x4e487b71\n        /* \"#utility.yul\":3287:3290   */\n      0xe0\n        /* \"#utility.yul\":3283:3303   */\n      shl\n        /* \"#utility.yul\":3280:3281   */\n      0x00\n        /* \"#utility.yul\":3273:3304   */\n      mstore\n        /* \"#utility.yul\":3323:3327   */\n      0x41\n        /* \"#utility.yul\":3320:3321   */\n      0x04\n        /* \"#utility.yul\":3313:3328   */\n      mstore\n        /* \"#utility.yul\":3347:3351   */\n      0x24\n        /* \"#utility.yul\":3344:3345   */\n      0x00\n        /* \"#utility.yul\":3337:3352   */\n      revert\n        /* \"#utility.yul\":3363:4501   */\n    tag_71:\n        /* \"#utility.yul\":3458:3464   */\n      0x00\n        /* \"#utility.yul\":3466:3472   */\n      dup1\n        /* \"#utility.yul\":3474:3480   */\n      0x00\n        /* \"#utility.yul\":3482:3488   */\n      dup1\n        /* \"#utility.yul\":3535:3538   */\n      0x80\n        /* \"#utility.yul\":3523:3532   */\n      dup6\n        /* \"#utility.yul\":3514:3521   */\n      dup8\n        /* \"#utility.yul\":3510:3533   */\n      sub\n        /* \"#utility.yul\":3506:3539   */\n      slt\n        /* \"#utility.yul\":3503:3556   */\n      iszero\n      tag_362\n      jumpi\n        /* \"#utility.yul\":3552:3553   */\n      0x00\n        /* \"#utility.yul\":3549:3550   */\n      dup1\n        /* \"#utility.yul\":3542:3554   */\n      revert\n        /* \"#utility.yul\":3503:3556   */\n    tag_362:\n        /* \"#utility.yul\":3575:3604   */\n      tag_363\n        /* \"#utility.yul\":3594:3603   */\n      dup6\n        /* \"#utility.yul\":3575:3604   */\n      tag_322\n      jump\t// in\n    tag_363:\n        /* \"#utility.yul\":3565:3604   */\n      swap4\n      pop\n        /* \"#utility.yul\":3623:3661   */\n      tag_364\n        /* \"#utility.yul\":3657:3659   */\n      0x20\n        /* \"#utility.yul\":3646:3655   */\n      dup7\n        /* \"#utility.yul\":3642:3660   */\n      add\n        /* \"#utility.yul\":3623:3661   */\n      tag_322\n      jump\t// in\n    tag_364:\n        /* \"#utility.yul\":3613:3661   */\n      swap3\n      pop\n        /* \"#utility.yul\":3708:3710   */\n      0x40\n        /* \"#utility.yul\":3693:3711   */\n      dup6\n      add\n        /* \"#utility.yul\":3680:3712   */\n      calldataload\n      swap2\n      pop\n        /* \"#utility.yul\":3763:3765   */\n      0x60\n        /* \"#utility.yul\":3748:3766   */\n      dup6\n      add\n        /* \"#utility.yul\":3735:3767   */\n      calldataload\n      sub(shl(0x40, 0x01), 0x01)\n        /* \"#utility.yul\":3816:3830   */\n      dup1\n      dup3\n      gt\n        /* \"#utility.yul\":3813:3847   */\n      iszero\n      tag_365\n      jumpi\n        /* \"#utility.yul\":3843:3844   */\n      0x00\n        /* \"#utility.yul\":3840:3841   */\n      dup1\n        /* \"#utility.yul\":3833:3845   */\n      revert\n        /* \"#utility.yul\":3813:3847   */\n    tag_365:\n        /* \"#utility.yul\":3881:3887   */\n      dup2\n        /* \"#utility.yul\":3870:3879   */\n      dup8\n        /* \"#utility.yul\":3866:3888   */\n      add\n        /* \"#utility.yul\":3856:3888   */\n      swap2\n      pop\n        /* \"#utility.yul\":3926:3933   */\n      dup8\n        /* \"#utility.yul\":3919:3923   */\n      0x1f\n        /* \"#utility.yul\":3915:3917   */\n      dup4\n        /* \"#utility.yul\":3911:3924   */\n      add\n        /* \"#utility.yul\":3907:3934   */\n      slt\n        /* \"#utility.yul\":3897:3952   */\n      tag_366\n      jumpi\n        /* \"#utility.yul\":3948:3949   */\n      0x00\n        /* \"#utility.yul\":3945:3946   */\n      dup1\n        /* \"#utility.yul\":3938:3950   */\n      revert\n        /* \"#utility.yul\":3897:3952   */\n    tag_366:\n        /* \"#utility.yul\":3984:3986   */\n      dup2\n        /* \"#utility.yul\":3971:3987   */\n      calldataload\n        /* \"#utility.yul\":4006:4008   */\n      dup2\n        /* \"#utility.yul\":4002:4004   */\n      dup2\n        /* \"#utility.yul\":3999:4009   */\n      gt\n        /* \"#utility.yul\":3996:4032   */\n      iszero\n      tag_368\n      jumpi\n        /* \"#utility.yul\":4012:4030   */\n      tag_368\n      tag_239\n      jump\t// in\n    tag_368:\n        /* \"#utility.yul\":4087:4089   */\n      0x40\n        /* \"#utility.yul\":4081:4090   */\n      mload\n        /* \"#utility.yul\":4055:4057   */\n      0x1f\n        /* \"#utility.yul\":4141:4154   */\n      dup3\n      add\n      not(0x1f)\n        /* \"#utility.yul\":4137:4159   */\n      swap1\n      dup2\n      and\n        /* \"#utility.yul\":4161:4163   */\n      0x3f\n        /* \"#utility.yul\":4133:4164   */\n      add\n        /* \"#utility.yul\":4129:4169   */\n      and\n        /* \"#utility.yul\":4117:4170   */\n      dup2\n      add\n      swap1\n        /* \"#utility.yul\":4185:4203   */\n      dup4\n      dup3\n      gt\n        /* \"#utility.yul\":4205:4227   */\n      dup2\n      dup4\n      lt\n        /* \"#utility.yul\":4182:4228   */\n      or\n        /* \"#utility.yul\":4179:4251   */\n      iszero\n      tag_370\n      jumpi\n        /* \"#utility.yul\":4231:4249   */\n      tag_370\n      tag_239\n      jump\t// in\n    tag_370:\n        /* \"#utility.yul\":4271:4281   */\n      dup2\n        /* \"#utility.yul\":4267:4269   */\n      0x40\n        /* \"#utility.yul\":4260:4282   */\n      mstore\n        /* \"#utility.yul\":4306:4308   */\n      dup3\n        /* \"#utility.yul\":4298:4304   */\n      dup2\n        /* \"#utility.yul\":4291:4309   */\n      mstore\n        /* \"#utility.yul\":4346:4353   */\n      dup11\n        /* \"#utility.yul\":4341:4343   */\n      0x20\n        /* \"#utility.yul\":4336:4338   */\n      dup5\n        /* \"#utility.yul\":4332:4334   */\n      dup8\n        /* \"#utility.yul\":4328:4339   */\n      add\n        /* \"#utility.yul\":4324:4344   */\n      add\n        /* \"#utility.yul\":4321:4354   */\n      gt\n        /* \"#utility.yul\":4318:4371   */\n      iszero\n      tag_371\n      jumpi\n        /* \"#utility.yul\":4367:4368   */\n      0x00\n        /* \"#utility.yul\":4364:4365   */\n      dup1\n        /* \"#utility.yul\":4357:4369   */\n      revert\n        /* \"#utility.yul\":4318:4371   */\n    tag_371:\n        /* \"#utility.yul\":4423:4425   */\n      dup3\n        /* \"#utility.yul\":4418:4420   */\n      0x20\n        /* \"#utility.yul\":4414:4416   */\n      dup7\n        /* \"#utility.yul\":4410:4421   */\n      add\n        /* \"#utility.yul\":4405:4407   */\n      0x20\n        /* \"#utility.yul\":4397:4403   */\n      dup4\n        /* \"#utility.yul\":4393:4408   */\n      add\n        /* \"#utility.yul\":4380:4426   */\n      calldatacopy\n        /* \"#utility.yul\":4468:4469   */\n      0x00\n        /* \"#utility.yul\":4463:4465   */\n      0x20\n        /* \"#utility.yul\":4458:4460   */\n      dup5\n        /* \"#utility.yul\":4450:4456   */\n      dup4\n        /* \"#utility.yul\":4446:4461   */\n      add\n        /* \"#utility.yul\":4442:4466   */\n      add\n        /* \"#utility.yul\":4435:4470   */\n      mstore\n        /* \"#utility.yul\":4489:4495   */\n      dup1\n        /* \"#utility.yul\":4479:4495   */\n      swap6\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n        /* \"#utility.yul\":3363:4501   */\n      swap3\n      swap6\n      swap2\n      swap5\n      pop\n      swap3\n      pop\n      jump\t// out\n        /* \"#utility.yul\":4506:4766   */\n    tag_82:\n        /* \"#utility.yul\":4574:4580   */\n      0x00\n        /* \"#utility.yul\":4582:4588   */\n      dup1\n        /* \"#utility.yul\":4635:4637   */\n      0x40\n        /* \"#utility.yul\":4623:4632   */\n      dup4\n        /* \"#utility.yul\":4614:4621   */\n      dup6\n        /* \"#utility.yul\":4610:4633   */\n      sub\n        /* \"#utility.yul\":4606:4638   */\n      slt\n        /* \"#utility.yul\":4603:4655   */\n      iszero\n      tag_373\n      jumpi\n        /* \"#utility.yul\":4651:4652   */\n      0x00\n        /* \"#utility.yul\":4648:4649   */\n      dup1\n        /* \"#utility.yul\":4641:4653   */\n      revert\n        /* \"#utility.yul\":4603:4655   */\n    tag_373:\n        /* \"#utility.yul\":4674:4703   */\n      tag_374\n        /* \"#utility.yul\":4693:4702   */\n      dup4\n        /* \"#utility.yul\":4674:4703   */\n      tag_322\n      jump\t// in\n    tag_374:\n        /* \"#utility.yul\":4664:4703   */\n      swap2\n      pop\n        /* \"#utility.yul\":4722:4760   */\n      tag_375\n        /* \"#utility.yul\":4756:4758   */\n      0x20\n        /* \"#utility.yul\":4745:4754   */\n      dup5\n        /* \"#utility.yul\":4741:4759   */\n      add\n        /* \"#utility.yul\":4722:4760   */\n      tag_322\n      jump\t// in\n    tag_375:\n        /* \"#utility.yul\":4712:4760   */\n      swap1\n      pop\n        /* \"#utility.yul\":4506:4766   */\n      swap3\n      pop\n      swap3\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":4771:5151   */\n    tag_92:\n        /* \"#utility.yul\":4850:4851   */\n      0x01\n        /* \"#utility.yul\":4846:4858   */\n      dup2\n      dup2\n      shr\n      swap1\n        /* \"#utility.yul\":4893:4905   */\n      dup3\n      and\n      dup1\n        /* \"#utility.yul\":4914:4975   */\n      tag_377\n      jumpi\n        /* \"#utility.yul\":4968:4972   */\n      0x7f\n        /* \"#utility.yul\":4960:4966   */\n      dup3\n        /* \"#utility.yul\":4956:4973   */\n      and\n        /* \"#utility.yul\":4946:4973   */\n      swap2\n      pop\n        /* \"#utility.yul\":4914:4975   */\n    tag_377:\n        /* \"#utility.yul\":5021:5023   */\n      0x20\n        /* \"#utility.yul\":5013:5019   */\n      dup3\n        /* \"#utility.yul\":5010:5024   */\n      lt\n        /* \"#utility.yul\":4990:5008   */\n      dup2\n        /* \"#utility.yul\":4987:5025   */\n      eq\n        /* \"#utility.yul\":4984:5145   */\n      iszero\n      tag_378\n      jumpi\n        /* \"#utility.yul\":5067:5077   */\n      0x4e487b71\n        /* \"#utility.yul\":5062:5065   */\n      0xe0\n        /* \"#utility.yul\":5058:5078   */\n      shl\n        /* \"#utility.yul\":5055:5056   */\n      0x00\n        /* \"#utility.yul\":5048:5079   */\n      mstore\n        /* \"#utility.yul\":5102:5106   */\n      0x22\n        /* \"#utility.yul\":5099:5100   */\n      0x04\n        /* \"#utility.yul\":5092:5107   */\n      mstore\n        /* \"#utility.yul\":5130:5134   */\n      0x24\n        /* \"#utility.yul\":5127:5128   */\n      0x00\n        /* \"#utility.yul\":5120:5135   */\n      revert\n        /* \"#utility.yul\":4984:5145   */\n    tag_378:\n      pop\n        /* \"#utility.yul\":4771:5151   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":5990:6400   */\n    tag_121:\n        /* \"#utility.yul\":6192:6194   */\n      0x20\n        /* \"#utility.yul\":6174:6195   */\n      dup1\n      dup3\n      mstore\n        /* \"#utility.yul\":6231:6233   */\n      0x2e\n        /* \"#utility.yul\":6211:6229   */\n      swap1\n      dup3\n      add\n        /* \"#utility.yul\":6204:6234   */\n      mstore\n        /* \"#utility.yul\":6270:6304   */\n      0x4c50546f6b656e3a2063616c6c6572206973206e6f7420746f6b656e206f776e\n        /* \"#utility.yul\":6265:6267   */\n      0x40\n        /* \"#utility.yul\":6250:6268   */\n      dup3\n      add\n        /* \"#utility.yul\":6243:6305   */\n      mstore\n      shl(0x92, 0x195c881bdc88185c1c1c9bdd9959)\n        /* \"#utility.yul\":6336:6338   */\n      0x60\n        /* \"#utility.yul\":6321:6339   */\n      dup3\n      add\n        /* \"#utility.yul\":6314:6358   */\n      mstore\n        /* \"#utility.yul\":6390:6393   */\n      0x80\n        /* \"#utility.yul\":6375:6394   */\n      add\n      swap1\n        /* \"#utility.yul\":5990:6400   */\n      jump\t// out\n        /* \"#utility.yul\":6405:6754   */\n    tag_145:\n        /* \"#utility.yul\":6607:6609   */\n      0x20\n        /* \"#utility.yul\":6589:6610   */\n      dup1\n      dup3\n      mstore\n        /* \"#utility.yul\":6646:6648   */\n      0x19\n        /* \"#utility.yul\":6626:6644   */\n      swap1\n      dup3\n      add\n        /* \"#utility.yul\":6619:6649   */\n      mstore\n      shl(0x3a, 0x1314151bdad95b8e881a5b9d985b1a59081d1bdad95b881251)\n        /* \"#utility.yul\":6680:6682   */\n      0x40\n        /* \"#utility.yul\":6665:6683   */\n      dup3\n      add\n        /* \"#utility.yul\":6658:6713   */\n      mstore\n        /* \"#utility.yul\":6745:6747   */\n      0x60\n        /* \"#utility.yul\":6730:6748   */\n      add\n      swap1\n        /* \"#utility.yul\":6405:6754   */\n      jump\t// out\n        /* \"#utility.yul\":7170:7640   */\n    tag_179:\n        /* \"#utility.yul\":7349:7352   */\n      0x00\n        /* \"#utility.yul\":7387:7393   */\n      dup4\n        /* \"#utility.yul\":7381:7394   */\n      mload\n        /* \"#utility.yul\":7403:7456   */\n      tag_385\n        /* \"#utility.yul\":7449:7455   */\n      dup2\n        /* \"#utility.yul\":7444:7447   */\n      dup5\n        /* \"#utility.yul\":7437:7441   */\n      0x20\n        /* \"#utility.yul\":7429:7435   */\n      dup9\n        /* \"#utility.yul\":7425:7442   */\n      add\n        /* \"#utility.yul\":7403:7456   */\n      tag_320\n      jump\t// in\n    tag_385:\n        /* \"#utility.yul\":7519:7532   */\n      dup4\n      mload\n        /* \"#utility.yul\":7478:7494   */\n      swap1\n      dup4\n      add\n      swap1\n        /* \"#utility.yul\":7541:7598   */\n      tag_386\n        /* \"#utility.yul\":7519:7532   */\n      dup2\n        /* \"#utility.yul\":7478:7494   */\n      dup4\n        /* \"#utility.yul\":7575:7579   */\n      0x20\n        /* \"#utility.yul\":7563:7580   */\n      dup9\n      add\n        /* \"#utility.yul\":7541:7598   */\n      tag_320\n      jump\t// in\n    tag_386:\n        /* \"#utility.yul\":7614:7634   */\n      add\n      swap5\n        /* \"#utility.yul\":7170:7640   */\n      swap4\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":9219:9634   */\n    tag_232:\n        /* \"#utility.yul\":9421:9423   */\n      0x20\n        /* \"#utility.yul\":9403:9424   */\n      dup1\n      dup3\n      mstore\n        /* \"#utility.yul\":9460:9462   */\n      0x33\n        /* \"#utility.yul\":9440:9458   */\n      swap1\n      dup3\n      add\n        /* \"#utility.yul\":9433:9463   */\n      mstore\n        /* \"#utility.yul\":9499:9533   */\n      0x4c50546f6b656e3a207472616e7366657220746f206e6f6e2045524337323152\n        /* \"#utility.yul\":9494:9496   */\n      0x40\n        /* \"#utility.yul\":9479:9497   */\n      dup3\n      add\n        /* \"#utility.yul\":9472:9534   */\n      mstore\n      shl(0x69, 0x32b1b2b4bb32b91034b6b83632b6b2b73a32b9)\n        /* \"#utility.yul\":9565:9567   */\n      0x60\n        /* \"#utility.yul\":9550:9568   */\n      dup3\n      add\n        /* \"#utility.yul\":9543:9592   */\n      mstore\n        /* \"#utility.yul\":9624:9627   */\n      0x80\n        /* \"#utility.yul\":9609:9628   */\n      add\n      swap1\n        /* \"#utility.yul\":9219:9634   */\n      jump\t// out\n        /* \"#utility.yul\":9771:9898   */\n    tag_323:\n        /* \"#utility.yul\":9832:9842   */\n      0x4e487b71\n        /* \"#utility.yul\":9827:9830   */\n      0xe0\n        /* \"#utility.yul\":9823:9843   */\n      shl\n        /* \"#utility.yul\":9820:9821   */\n      0x00\n        /* \"#utility.yul\":9813:9844   */\n      mstore\n        /* \"#utility.yul\":9863:9867   */\n      0x11\n        /* \"#utility.yul\":9860:9861   */\n      0x04\n        /* \"#utility.yul\":9853:9868   */\n      mstore\n        /* \"#utility.yul\":9887:9891   */\n      0x24\n        /* \"#utility.yul\":9884:9885   */\n      0x00\n        /* \"#utility.yul\":9877:9892   */\n      revert\n        /* \"#utility.yul\":9903:10028   */\n    tag_253:\n        /* \"#utility.yul\":9943:9947   */\n      0x00\n        /* \"#utility.yul\":9971:9972   */\n      dup3\n        /* \"#utility.yul\":9968:9969   */\n      dup3\n        /* \"#utility.yul\":9965:9973   */\n      lt\n        /* \"#utility.yul\":9962:9996   */\n      iszero\n      tag_396\n      jumpi\n        /* \"#utility.yul\":9976:9994   */\n      tag_396\n      tag_323\n      jump\t// in\n    tag_396:\n      pop\n        /* \"#utility.yul\":10013:10022   */\n      sub\n      swap1\n        /* \"#utility.yul\":9903:10028   */\n      jump\t// out\n        /* \"#utility.yul\":10033:10161   */\n    tag_256:\n        /* \"#utility.yul\":10073:10076   */\n      0x00\n        /* \"#utility.yul\":10104:10105   */\n      dup3\n        /* \"#utility.yul\":10100:10106   */\n      not\n        /* \"#utility.yul\":10097:10098   */\n      dup3\n        /* \"#utility.yul\":10094:10107   */\n      gt\n        /* \"#utility.yul\":10091:10130   */\n      iszero\n      tag_399\n      jumpi\n        /* \"#utility.yul\":10110:10128   */\n      tag_399\n      tag_323\n      jump\t// in\n    tag_399:\n      pop\n        /* \"#utility.yul\":10146:10155   */\n      add\n      swap1\n        /* \"#utility.yul\":10033:10161   */\n      jump\t// out\n        /* \"#utility.yul\":10166:10655   */\n    tag_270:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"#utility.yul\":10435:10450   */\n      dup6\n      dup2\n      and\n        /* \"#utility.yul\":10417:10451   */\n      dup3\n      mstore\n        /* \"#utility.yul\":10487:10502   */\n      dup5\n      and\n        /* \"#utility.yul\":10482:10484   */\n      0x20\n        /* \"#utility.yul\":10467:10485   */\n      dup3\n      add\n        /* \"#utility.yul\":10460:10503   */\n      mstore\n        /* \"#utility.yul\":10534:10536   */\n      0x40\n        /* \"#utility.yul\":10519:10537   */\n      dup2\n      add\n        /* \"#utility.yul\":10512:10546   */\n      dup4\n      swap1\n      mstore\n        /* \"#utility.yul\":10582:10585   */\n      0x80\n        /* \"#utility.yul\":10577:10579   */\n      0x60\n        /* \"#utility.yul\":10562:10580   */\n      dup3\n      add\n        /* \"#utility.yul\":10555:10586   */\n      dup2\n      swap1\n      mstore\n        /* \"#utility.yul\":10360:10364   */\n      0x00\n      swap1\n        /* \"#utility.yul\":10603:10649   */\n      tag_401\n      swap1\n        /* \"#utility.yul\":10629:10648   */\n      dup4\n      add\n        /* \"#utility.yul\":10621:10627   */\n      dup5\n        /* \"#utility.yul\":10603:10649   */\n      tag_321\n      jump\t// in\n    tag_401:\n        /* \"#utility.yul\":10595:10649   */\n      swap7\n        /* \"#utility.yul\":10166:10655   */\n      swap6\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":10660:10909   */\n    tag_273:\n        /* \"#utility.yul\":10729:10735   */\n      0x00\n        /* \"#utility.yul\":10782:10784   */\n      0x20\n        /* \"#utility.yul\":10770:10779   */\n      dup3\n        /* \"#utility.yul\":10761:10768   */\n      dup5\n        /* \"#utility.yul\":10757:10780   */\n      sub\n        /* \"#utility.yul\":10753:10785   */\n      slt\n        /* \"#utility.yul\":10750:10802   */\n      iszero\n      tag_403\n      jumpi\n        /* \"#utility.yul\":10798:10799   */\n      0x00\n        /* \"#utility.yul\":10795:10796   */\n      dup1\n        /* \"#utility.yul\":10788:10800   */\n      revert\n        /* \"#utility.yul\":10750:10802   */\n    tag_403:\n        /* \"#utility.yul\":10830:10839   */\n      dup2\n        /* \"#utility.yul\":10824:10840   */\n      mload\n        /* \"#utility.yul\":10849:10879   */\n      tag_175\n        /* \"#utility.yul\":10873:10878   */\n      dup2\n        /* \"#utility.yul\":10849:10879   */\n      tag_319\n      jump\t// in\n        /* \"#utility.yul\":11316:11669   */\n    tag_312:\n        /* \"#utility.yul\":11518:11520   */\n      0x20\n        /* \"#utility.yul\":11500:11521   */\n      dup1\n      dup3\n      mstore\n        /* \"#utility.yul\":11557:11559   */\n      0x1d\n        /* \"#utility.yul\":11537:11555   */\n      swap1\n      dup3\n      add\n        /* \"#utility.yul\":11530:11560   */\n      mstore\n        /* \"#utility.yul\":11596:11627   */\n      0x4c50546f6b656e3a20746f6b656e20616c7265616479206d696e746564000000\n        /* \"#utility.yul\":11591:11593   */\n      0x40\n        /* \"#utility.yul\":11576:11594   */\n      dup3\n      add\n        /* \"#utility.yul\":11569:11628   */\n      mstore\n        /* \"#utility.yul\":11660:11662   */\n      0x60\n        /* \"#utility.yul\":11645:11663   */\n      add\n      swap1\n        /* \"#utility.yul\":11316:11669   */\n      jump\t// out\n    stop\n    data_ada389e1fc24a8587c776340efb91b36e675792ab631816100d55df0b5cf3cbc ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef\n\n    auxdata: 0xa2646970667358221220dcd4107ecdae1c68fc5ddb541ebfe4982a8137784f4f83acad9aad1b16295bee64736f6c634300080a0033\n}\n",
						"bytecode": {
							"functionDebugData": {
								"@_1661": {
									"entryPoint": null,
									"id": 1661,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"abi_decode_string_fromMemory": {
									"entryPoint": 325,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_string_memory_ptrt_string_memory_ptrt_address_fromMemory": {
									"entryPoint": 508,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 3
								},
								"extract_byte_array_length": {
									"entryPoint": 649,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"panic_error_0x41": {
									"entryPoint": 303,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								}
							},
							"generatedSources": [
								{
									"ast": {
										"nodeType": "YulBlock",
										"src": "0:2152:10",
										"statements": [
											{
												"nodeType": "YulBlock",
												"src": "6:3:10",
												"statements": []
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "46:95:10",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "63:1:10",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "70:3:10",
																				"type": "",
																				"value": "224"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "75:10:10",
																				"type": "",
																				"value": "0x4e487b71"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "66:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "66:20:10"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "56:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "56:31:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "56:31:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "103:1:10",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "106:4:10",
																		"type": "",
																		"value": "0x41"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "96:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "96:15:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "96:15:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "127:1:10",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "130:4:10",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "120:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "120:15:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "120:15:10"
														}
													]
												},
												"name": "panic_error_0x41",
												"nodeType": "YulFunctionDefinition",
												"src": "14:127:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "210:821:10",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "259:16:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "268:1:10",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "271:1:10",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "261:6:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "261:12:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "261:12:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "238:6:10"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "246:4:10",
																						"type": "",
																						"value": "0x1f"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "234:3:10"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "234:17:10"
																			},
																			{
																				"name": "end",
																				"nodeType": "YulIdentifier",
																				"src": "253:3:10"
																			}
																		],
																		"functionName": {
																			"name": "slt",
																			"nodeType": "YulIdentifier",
																			"src": "230:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "230:27:10"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "223:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "223:35:10"
															},
															"nodeType": "YulIf",
															"src": "220:55:10"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "284:23:10",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "300:6:10"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "294:5:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "294:13:10"
															},
															"variables": [
																{
																	"name": "_1",
																	"nodeType": "YulTypedName",
																	"src": "288:2:10",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "316:28:10",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "334:2:10",
																				"type": "",
																				"value": "64"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "338:1:10",
																				"type": "",
																				"value": "1"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "330:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "330:10:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "342:1:10",
																		"type": "",
																		"value": "1"
																	}
																],
																"functionName": {
																	"name": "sub",
																	"nodeType": "YulIdentifier",
																	"src": "326:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "326:18:10"
															},
															"variables": [
																{
																	"name": "_2",
																	"nodeType": "YulTypedName",
																	"src": "320:2:10",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "367:22:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x41",
																				"nodeType": "YulIdentifier",
																				"src": "369:16:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "369:18:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "369:18:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "359:2:10"
																	},
																	{
																		"name": "_2",
																		"nodeType": "YulIdentifier",
																		"src": "363:2:10"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "356:2:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "356:10:10"
															},
															"nodeType": "YulIf",
															"src": "353:36:10"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "398:17:10",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "412:2:10",
																		"type": "",
																		"value": "31"
																	}
																],
																"functionName": {
																	"name": "not",
																	"nodeType": "YulIdentifier",
																	"src": "408:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "408:7:10"
															},
															"variables": [
																{
																	"name": "_3",
																	"nodeType": "YulTypedName",
																	"src": "402:2:10",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "424:23:10",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "444:2:10",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "438:5:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "438:9:10"
															},
															"variables": [
																{
																	"name": "memPtr",
																	"nodeType": "YulTypedName",
																	"src": "428:6:10",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "456:71:10",
															"value": {
																"arguments": [
																	{
																		"name": "memPtr",
																		"nodeType": "YulIdentifier",
																		"src": "478:6:10"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"arguments": [
																									{
																										"name": "_1",
																										"nodeType": "YulIdentifier",
																										"src": "502:2:10"
																									},
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "506:4:10",
																										"type": "",
																										"value": "0x1f"
																									}
																								],
																								"functionName": {
																									"name": "add",
																									"nodeType": "YulIdentifier",
																									"src": "498:3:10"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "498:13:10"
																							},
																							{
																								"name": "_3",
																								"nodeType": "YulIdentifier",
																								"src": "513:2:10"
																							}
																						],
																						"functionName": {
																							"name": "and",
																							"nodeType": "YulIdentifier",
																							"src": "494:3:10"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "494:22:10"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "518:2:10",
																						"type": "",
																						"value": "63"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "490:3:10"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "490:31:10"
																			},
																			{
																				"name": "_3",
																				"nodeType": "YulIdentifier",
																				"src": "523:2:10"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "486:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "486:40:10"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "474:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "474:53:10"
															},
															"variables": [
																{
																	"name": "newFreePtr",
																	"nodeType": "YulTypedName",
																	"src": "460:10:10",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "586:22:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x41",
																				"nodeType": "YulIdentifier",
																				"src": "588:16:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "588:18:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "588:18:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "newFreePtr",
																				"nodeType": "YulIdentifier",
																				"src": "545:10:10"
																			},
																			{
																				"name": "_2",
																				"nodeType": "YulIdentifier",
																				"src": "557:2:10"
																			}
																		],
																		"functionName": {
																			"name": "gt",
																			"nodeType": "YulIdentifier",
																			"src": "542:2:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "542:18:10"
																	},
																	{
																		"arguments": [
																			{
																				"name": "newFreePtr",
																				"nodeType": "YulIdentifier",
																				"src": "565:10:10"
																			},
																			{
																				"name": "memPtr",
																				"nodeType": "YulIdentifier",
																				"src": "577:6:10"
																			}
																		],
																		"functionName": {
																			"name": "lt",
																			"nodeType": "YulIdentifier",
																			"src": "562:2:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "562:22:10"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "539:2:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "539:46:10"
															},
															"nodeType": "YulIf",
															"src": "536:72:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "624:2:10",
																		"type": "",
																		"value": "64"
																	},
																	{
																		"name": "newFreePtr",
																		"nodeType": "YulIdentifier",
																		"src": "628:10:10"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "617:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "617:22:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "617:22:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "memPtr",
																		"nodeType": "YulIdentifier",
																		"src": "655:6:10"
																	},
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "663:2:10"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "648:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "648:18:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "648:18:10"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "675:14:10",
															"value": {
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "685:4:10",
																"type": "",
																"value": "0x20"
															},
															"variables": [
																{
																	"name": "_4",
																	"nodeType": "YulTypedName",
																	"src": "679:2:10",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "735:16:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "744:1:10",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "747:1:10",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "737:6:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "737:12:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "737:12:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "712:6:10"
																					},
																					{
																						"name": "_1",
																						"nodeType": "YulIdentifier",
																						"src": "720:2:10"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "708:3:10"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "708:15:10"
																			},
																			{
																				"name": "_4",
																				"nodeType": "YulIdentifier",
																				"src": "725:2:10"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "704:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "704:24:10"
																	},
																	{
																		"name": "end",
																		"nodeType": "YulIdentifier",
																		"src": "730:3:10"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "701:2:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "701:33:10"
															},
															"nodeType": "YulIf",
															"src": "698:53:10"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "760:10:10",
															"value": {
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "769:1:10",
																"type": "",
																"value": "0"
															},
															"variables": [
																{
																	"name": "i",
																	"nodeType": "YulTypedName",
																	"src": "764:1:10",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "825:87:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"arguments": [
																								{
																									"name": "memPtr",
																									"nodeType": "YulIdentifier",
																									"src": "854:6:10"
																								},
																								{
																									"name": "i",
																									"nodeType": "YulIdentifier",
																									"src": "862:1:10"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nodeType": "YulIdentifier",
																								"src": "850:3:10"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "850:14:10"
																						},
																						{
																							"name": "_4",
																							"nodeType": "YulIdentifier",
																							"src": "866:2:10"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nodeType": "YulIdentifier",
																						"src": "846:3:10"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "846:23:10"
																				},
																				{
																					"arguments": [
																						{
																							"arguments": [
																								{
																									"arguments": [
																										{
																											"name": "offset",
																											"nodeType": "YulIdentifier",
																											"src": "885:6:10"
																										},
																										{
																											"name": "i",
																											"nodeType": "YulIdentifier",
																											"src": "893:1:10"
																										}
																									],
																									"functionName": {
																										"name": "add",
																										"nodeType": "YulIdentifier",
																										"src": "881:3:10"
																									},
																									"nodeType": "YulFunctionCall",
																									"src": "881:14:10"
																								},
																								{
																									"name": "_4",
																									"nodeType": "YulIdentifier",
																									"src": "897:2:10"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nodeType": "YulIdentifier",
																								"src": "877:3:10"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "877:23:10"
																						}
																					],
																					"functionName": {
																						"name": "mload",
																						"nodeType": "YulIdentifier",
																						"src": "871:5:10"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "871:30:10"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "839:6:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "839:63:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "839:63:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "i",
																		"nodeType": "YulIdentifier",
																		"src": "790:1:10"
																	},
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "793:2:10"
																	}
																],
																"functionName": {
																	"name": "lt",
																	"nodeType": "YulIdentifier",
																	"src": "787:2:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "787:9:10"
															},
															"nodeType": "YulForLoop",
															"post": {
																"nodeType": "YulBlock",
																"src": "797:19:10",
																"statements": [
																	{
																		"nodeType": "YulAssignment",
																		"src": "799:15:10",
																		"value": {
																			"arguments": [
																				{
																					"name": "i",
																					"nodeType": "YulIdentifier",
																					"src": "808:1:10"
																				},
																				{
																					"name": "_4",
																					"nodeType": "YulIdentifier",
																					"src": "811:2:10"
																				}
																			],
																			"functionName": {
																				"name": "add",
																				"nodeType": "YulIdentifier",
																				"src": "804:3:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "804:10:10"
																		},
																		"variableNames": [
																			{
																				"name": "i",
																				"nodeType": "YulIdentifier",
																				"src": "799:1:10"
																			}
																		]
																	}
																]
															},
															"pre": {
																"nodeType": "YulBlock",
																"src": "783:3:10",
																"statements": []
															},
															"src": "779:133:10"
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "942:59:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"arguments": [
																								{
																									"name": "memPtr",
																									"nodeType": "YulIdentifier",
																									"src": "971:6:10"
																								},
																								{
																									"name": "_1",
																									"nodeType": "YulIdentifier",
																									"src": "979:2:10"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nodeType": "YulIdentifier",
																								"src": "967:3:10"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "967:15:10"
																						},
																						{
																							"name": "_4",
																							"nodeType": "YulIdentifier",
																							"src": "984:2:10"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nodeType": "YulIdentifier",
																						"src": "963:3:10"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "963:24:10"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "989:1:10",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "956:6:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "956:35:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "956:35:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "i",
																		"nodeType": "YulIdentifier",
																		"src": "927:1:10"
																	},
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "930:2:10"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "924:2:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "924:9:10"
															},
															"nodeType": "YulIf",
															"src": "921:80:10"
														},
														{
															"nodeType": "YulAssignment",
															"src": "1010:15:10",
															"value": {
																"name": "memPtr",
																"nodeType": "YulIdentifier",
																"src": "1019:6:10"
															},
															"variableNames": [
																{
																	"name": "array",
																	"nodeType": "YulIdentifier",
																	"src": "1010:5:10"
																}
															]
														}
													]
												},
												"name": "abi_decode_string_fromMemory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "184:6:10",
														"type": ""
													},
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "192:3:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "array",
														"nodeType": "YulTypedName",
														"src": "200:5:10",
														"type": ""
													}
												],
												"src": "146:885:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1171:594:10",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1217:16:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1226:1:10",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1229:1:10",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "1219:6:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1219:12:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1219:12:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "1192:7:10"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1201:9:10"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "1188:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1188:23:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1213:2:10",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "1184:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "1184:32:10"
															},
															"nodeType": "YulIf",
															"src": "1181:52:10"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "1242:30:10",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1262:9:10"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "1256:5:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "1256:16:10"
															},
															"variables": [
																{
																	"name": "offset",
																	"nodeType": "YulTypedName",
																	"src": "1246:6:10",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "1281:28:10",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1299:2:10",
																				"type": "",
																				"value": "64"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1303:1:10",
																				"type": "",
																				"value": "1"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "1295:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1295:10:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1307:1:10",
																		"type": "",
																		"value": "1"
																	}
																],
																"functionName": {
																	"name": "sub",
																	"nodeType": "YulIdentifier",
																	"src": "1291:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "1291:18:10"
															},
															"variables": [
																{
																	"name": "_1",
																	"nodeType": "YulTypedName",
																	"src": "1285:2:10",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1336:16:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1345:1:10",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1348:1:10",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "1338:6:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1338:12:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1338:12:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "1324:6:10"
																	},
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "1332:2:10"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "1321:2:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "1321:14:10"
															},
															"nodeType": "YulIf",
															"src": "1318:34:10"
														},
														{
															"nodeType": "YulAssignment",
															"src": "1361:71:10",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1404:9:10"
																			},
																			{
																				"name": "offset",
																				"nodeType": "YulIdentifier",
																				"src": "1415:6:10"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1400:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1400:22:10"
																	},
																	{
																		"name": "dataEnd",
																		"nodeType": "YulIdentifier",
																		"src": "1424:7:10"
																	}
																],
																"functionName": {
																	"name": "abi_decode_string_fromMemory",
																	"nodeType": "YulIdentifier",
																	"src": "1371:28:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "1371:61:10"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "1361:6:10"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "1441:41:10",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1467:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1478:2:10",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1463:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1463:18:10"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "1457:5:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "1457:25:10"
															},
															"variables": [
																{
																	"name": "offset_1",
																	"nodeType": "YulTypedName",
																	"src": "1445:8:10",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1511:16:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1520:1:10",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1523:1:10",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "1513:6:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1513:12:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1513:12:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "offset_1",
																		"nodeType": "YulIdentifier",
																		"src": "1497:8:10"
																	},
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "1507:2:10"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "1494:2:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "1494:16:10"
															},
															"nodeType": "YulIf",
															"src": "1491:36:10"
														},
														{
															"nodeType": "YulAssignment",
															"src": "1536:73:10",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1579:9:10"
																			},
																			{
																				"name": "offset_1",
																				"nodeType": "YulIdentifier",
																				"src": "1590:8:10"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1575:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1575:24:10"
																	},
																	{
																		"name": "dataEnd",
																		"nodeType": "YulIdentifier",
																		"src": "1601:7:10"
																	}
																],
																"functionName": {
																	"name": "abi_decode_string_fromMemory",
																	"nodeType": "YulIdentifier",
																	"src": "1546:28:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "1546:63:10"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nodeType": "YulIdentifier",
																	"src": "1536:6:10"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "1618:38:10",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1641:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1652:2:10",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1637:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1637:18:10"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "1631:5:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "1631:25:10"
															},
															"variables": [
																{
																	"name": "value",
																	"nodeType": "YulTypedName",
																	"src": "1622:5:10",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1719:16:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1728:1:10",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1731:1:10",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "1721:6:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1721:12:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1721:12:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "1678:5:10"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "1689:5:10"
																					},
																					{
																						"arguments": [
																							{
																								"arguments": [
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "1704:3:10",
																										"type": "",
																										"value": "160"
																									},
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "1709:1:10",
																										"type": "",
																										"value": "1"
																									}
																								],
																								"functionName": {
																									"name": "shl",
																									"nodeType": "YulIdentifier",
																									"src": "1700:3:10"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "1700:11:10"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "1713:1:10",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "sub",
																							"nodeType": "YulIdentifier",
																							"src": "1696:3:10"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "1696:19:10"
																					}
																				],
																				"functionName": {
																					"name": "and",
																					"nodeType": "YulIdentifier",
																					"src": "1685:3:10"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "1685:31:10"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "1675:2:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1675:42:10"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "1668:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "1668:50:10"
															},
															"nodeType": "YulIf",
															"src": "1665:70:10"
														},
														{
															"nodeType": "YulAssignment",
															"src": "1744:15:10",
															"value": {
																"name": "value",
																"nodeType": "YulIdentifier",
																"src": "1754:5:10"
															},
															"variableNames": [
																{
																	"name": "value2",
																	"nodeType": "YulIdentifier",
																	"src": "1744:6:10"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_string_memory_ptrt_string_memory_ptrt_address_fromMemory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1121:9:10",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "1132:7:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1144:6:10",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "1152:6:10",
														"type": ""
													},
													{
														"name": "value2",
														"nodeType": "YulTypedName",
														"src": "1160:6:10",
														"type": ""
													}
												],
												"src": "1036:729:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1825:325:10",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "1835:22:10",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1849:1:10",
																		"type": "",
																		"value": "1"
																	},
																	{
																		"name": "data",
																		"nodeType": "YulIdentifier",
																		"src": "1852:4:10"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "1845:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "1845:12:10"
															},
															"variableNames": [
																{
																	"name": "length",
																	"nodeType": "YulIdentifier",
																	"src": "1835:6:10"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "1866:38:10",
															"value": {
																"arguments": [
																	{
																		"name": "data",
																		"nodeType": "YulIdentifier",
																		"src": "1896:4:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1902:1:10",
																		"type": "",
																		"value": "1"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nodeType": "YulIdentifier",
																	"src": "1892:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "1892:12:10"
															},
															"variables": [
																{
																	"name": "outOfPlaceEncoding",
																	"nodeType": "YulTypedName",
																	"src": "1870:18:10",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1943:31:10",
																"statements": [
																	{
																		"nodeType": "YulAssignment",
																		"src": "1945:27:10",
																		"value": {
																			"arguments": [
																				{
																					"name": "length",
																					"nodeType": "YulIdentifier",
																					"src": "1959:6:10"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1967:4:10",
																					"type": "",
																					"value": "0x7f"
																				}
																			],
																			"functionName": {
																				"name": "and",
																				"nodeType": "YulIdentifier",
																				"src": "1955:3:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1955:17:10"
																		},
																		"variableNames": [
																			{
																				"name": "length",
																				"nodeType": "YulIdentifier",
																				"src": "1945:6:10"
																			}
																		]
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "outOfPlaceEncoding",
																		"nodeType": "YulIdentifier",
																		"src": "1923:18:10"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "1916:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "1916:26:10"
															},
															"nodeType": "YulIf",
															"src": "1913:61:10"
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "2033:111:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2054:1:10",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"arguments": [
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "2061:3:10",
																							"type": "",
																							"value": "224"
																						},
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "2066:10:10",
																							"type": "",
																							"value": "0x4e487b71"
																						}
																					],
																					"functionName": {
																						"name": "shl",
																						"nodeType": "YulIdentifier",
																						"src": "2057:3:10"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "2057:20:10"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "2047:6:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2047:31:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2047:31:10"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2098:1:10",
																					"type": "",
																					"value": "4"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2101:4:10",
																					"type": "",
																					"value": "0x22"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "2091:6:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2091:15:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2091:15:10"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2126:1:10",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2129:4:10",
																					"type": "",
																					"value": "0x24"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "2119:6:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2119:15:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2119:15:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "outOfPlaceEncoding",
																		"nodeType": "YulIdentifier",
																		"src": "1989:18:10"
																	},
																	{
																		"arguments": [
																			{
																				"name": "length",
																				"nodeType": "YulIdentifier",
																				"src": "2012:6:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2020:2:10",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "lt",
																			"nodeType": "YulIdentifier",
																			"src": "2009:2:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2009:14:10"
																	}
																],
																"functionName": {
																	"name": "eq",
																	"nodeType": "YulIdentifier",
																	"src": "1986:2:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "1986:38:10"
															},
															"nodeType": "YulIf",
															"src": "1983:161:10"
														}
													]
												},
												"name": "extract_byte_array_length",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "data",
														"nodeType": "YulTypedName",
														"src": "1805:4:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "1814:6:10",
														"type": ""
													}
												],
												"src": "1770:380:10"
											}
										]
									},
									"contents": "{\n    { }\n    function panic_error_0x41()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n    function abi_decode_string_fromMemory(offset, end) -> array\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n        let _1 := mload(offset)\n        let _2 := sub(shl(64, 1), 1)\n        if gt(_1, _2) { panic_error_0x41() }\n        let _3 := not(31)\n        let memPtr := mload(64)\n        let newFreePtr := add(memPtr, and(add(and(add(_1, 0x1f), _3), 63), _3))\n        if or(gt(newFreePtr, _2), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n        mstore(memPtr, _1)\n        let _4 := 0x20\n        if gt(add(add(offset, _1), _4), end) { revert(0, 0) }\n        let i := 0\n        for { } lt(i, _1) { i := add(i, _4) }\n        {\n            mstore(add(add(memPtr, i), _4), mload(add(add(offset, i), _4)))\n        }\n        if gt(i, _1)\n        {\n            mstore(add(add(memPtr, _1), _4), 0)\n        }\n        array := memPtr\n    }\n    function abi_decode_tuple_t_string_memory_ptrt_string_memory_ptrt_address_fromMemory(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        let offset := mload(headStart)\n        let _1 := sub(shl(64, 1), 1)\n        if gt(offset, _1) { revert(0, 0) }\n        value0 := abi_decode_string_fromMemory(add(headStart, offset), dataEnd)\n        let offset_1 := mload(add(headStart, 32))\n        if gt(offset_1, _1) { revert(0, 0) }\n        value1 := abi_decode_string_fromMemory(add(headStart, offset_1), dataEnd)\n        let value := mload(add(headStart, 64))\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n        value2 := value\n    }\n    function extract_byte_array_length(data) -> length\n    {\n        length := shr(1, data)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n        if eq(outOfPlaceEncoding, lt(length, 32))\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x22)\n            revert(0, 0x24)\n        }\n    }\n}",
									"id": 10,
									"language": "Yul",
									"name": "#utility.yul"
								}
							],
							"linkReferences": {},
							"object": "60806040523480156200001157600080fd5b50604051620017e6380380620017e68339810160408190526200003491620001fc565b82516200004990600090602086019062000089565b5081516200005f90600190602085019062000089565b50600380546001600160a01b0319166001600160a01b039290921691909117905550620002c69050565b828054620000979062000289565b90600052602060002090601f016020900481019282620000bb576000855562000106565b82601f10620000d657805160ff191683800117855562000106565b8280016001018555821562000106579182015b8281111562000106578251825591602001919060010190620000e9565b506200011492915062000118565b5090565b5b8082111562000114576000815560010162000119565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126200015757600080fd5b81516001600160401b03808211156200017457620001746200012f565b604051601f8301601f19908116603f011681019082821181831017156200019f576200019f6200012f565b81604052838152602092508683858801011115620001bc57600080fd5b600091505b83821015620001e05785820183015181830184015290820190620001c1565b83821115620001f25760008385830101525b9695505050505050565b6000806000606084860312156200021257600080fd5b83516001600160401b03808211156200022a57600080fd5b620002388783880162000145565b945060208601519150808211156200024f57600080fd5b506200025e8682870162000145565b604086015190935090506001600160a01b03811681146200027e57600080fd5b809150509250925092565b600181811c908216806200029e57607f821691505b60208210811415620002c057634e487b7160e01b600052602260045260246000fd5b50919050565b61151080620002d66000396000f3fe608060405234801561001057600080fd5b50600436106100d05760003560e01c806301ffc9a7146100d557806306fdde03146100fd578063081812fc14610112578063095ea7b31461013d57806323b872dd1461015257806340c10f191461016557806342842e0e1461017857806342966c681461018b5780636352211e1461019e57806370a08231146101b157806395d89b41146101d2578063a22cb465146101da578063b88d4fde146101ed578063c4d66de814610200578063c87b56dd14610213578063e985e9c514610226575b600080fd5b6100e86100e3366004611008565b610239565b60405190151581526020015b60405180910390f35b61010561028b565b6040516100f4919061107d565b610125610120366004611090565b61031d565b6040516001600160a01b0390911681526020016100f4565b61015061014b3660046110c5565b610344565b005b6101506101603660046110ef565b610460565b6101506101733660046110c5565b610492565b6101506101863660046110ef565b6104b7565b610150610199366004611090565b6104d2565b6101256101ac366004611090565b61051a565b6101c46101bf36600461112b565b61054e565b6040519081526020016100f4565b6101056105d5565b6101506101e8366004611146565b6105e4565b6101506101fb366004611198565b6105ef565b61015061020e36600461112b565b610627565b610105610221366004611090565b610660565b6100e8610234366004611273565b6106d4565b60006001600160e01b031982166380ac58cd60e01b148061026a57506001600160e01b03198216635b5e139f60e01b145b8061028557506301ffc9a760e01b6001600160e01b03198316145b92915050565b60606000805461029a906112a6565b80601f01602080910402602001604051908101604052809291908181526020018280546102c6906112a6565b80156103135780601f106102e857610100808354040283529160200191610313565b820191906000526020600020905b8154815290600101906020018083116102f657829003601f168201915b5050505050905090565b600061032882610702565b506000908152600660205260409020546001600160a01b031690565b600061034f8261051a565b9050806001600160a01b0316836001600160a01b031614156103c35760405162461bcd60e51b815260206004820152602260248201527f4c50546f6b656e3a20617070726f76616c20746f2063757272656e74206f776e60448201526132b960f11b60648201526084015b60405180910390fd5b336001600160a01b03821614806103df57506103df81336106d4565b6104515760405162461bcd60e51b815260206004820152603e60248201527f4c50546f6b656e3a20617070726f76652063616c6c6572206973206e6f74207460448201527f6f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c000060648201526084016103ba565b61045b8383610727565b505050565b61046b335b82610795565b6104875760405162461bcd60e51b81526004016103ba906112e1565b61045b8383836107f4565b6002546001600160a01b031633146104a957600080fd5b6104b382826109d2565b5050565b61045b838383604051806020016040528060008152506105ef565b6002546001600160a01b031633146104e957600080fd5b6104f233610465565b61050e5760405162461bcd60e51b81526004016103ba906112e1565b610517816109ec565b50565b60008061052683610a7d565b90506001600160a01b0381166102855760405162461bcd60e51b81526004016103ba9061132f565b60006001600160a01b0382166105b95760405162461bcd60e51b815260206004820152602a60248201527f4c50546f6b656e3a2061646472657373207a65726f206973206e6f742061207660448201526930b634b21037bbb732b960b11b60648201526084016103ba565b506001600160a01b031660009081526005602052604090205490565b60606001805461029a906112a6565b6104b3338383610a98565b6105f93383610795565b6106155760405162461bcd60e51b81526004016103ba906112e1565b61062184848484610b64565b50505050565b6003546001600160a01b0316331461063e57600080fd5b600280546001600160a01b0319166001600160a01b0392909216919091179055565b606061066b82610702565b600061068260408051602081019091526000815290565b905060008151116106a257604051806020016040528060008152506106cd565b806106ac84610b97565b6040516020016106bd929190611362565b6040516020818303038152906040525b9392505050565b6001600160a01b03918216600090815260076020908152604080832093909416825291909152205460ff1690565b61070b81610c33565b6105175760405162461bcd60e51b81526004016103ba9061132f565b600081815260066020526040902080546001600160a01b0319166001600160a01b038416908117909155819061075c8261051a565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000806107a18361051a565b9050806001600160a01b0316846001600160a01b031614806107c857506107c881856106d4565b806107ec5750836001600160a01b03166107e18461031d565b6001600160a01b0316145b949350505050565b826001600160a01b03166108078261051a565b6001600160a01b03161461086c5760405162461bcd60e51b815260206004820152602660248201527f4c50546f6b656e3a207472616e736665722066726f6d20696e636f72726563746044820152651037bbb732b960d11b60648201526084016103ba565b6001600160a01b0382166108d05760405162461bcd60e51b815260206004820152602560248201527f4c50546f6b656e3a207472616e7366657220746f20746865207a65726f206164604482015264647265737360d81b60648201526084016103ba565b6108dd8383836001610c50565b826001600160a01b03166108f08261051a565b6001600160a01b0316146109545760405162461bcd60e51b815260206004820152602560248201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060448201526437bbb732b960d91b60648201526084016103ba565b600081815260066020908152604080832080546001600160a01b03199081169091556001600160a01b0387811680865260058552838620805460001901905590871680865283862080546001019055868652600490945282852080549092168417909155905184936000805160206114bb83398151915291a4505050565b6104b3828260405180602001604052806000815250610cd8565b60006109f78261051a565b9050610a07816000846001610c50565b610a108261051a565b600083815260066020908152604080832080546001600160a01b03199081169091556001600160a01b0385168085526005845282852080546000190190558785526004909352818420805490911690555192935084926000805160206114bb833981519152908390a45050565b6000908152600460205260409020546001600160a01b031690565b816001600160a01b0316836001600160a01b03161415610af75760405162461bcd60e51b815260206004820152601a60248201527926282a37b5b2b71d1030b8383937bb32903a379031b0b63632b960311b60448201526064016103ba565b6001600160a01b03838116600081815260076020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b610b6f8484846107f4565b610b7b84848484610d0b565b6106215760405162461bcd60e51b81526004016103ba90611391565b60606000610ba483610e09565b60010190506000816001600160401b03811115610bc357610bc3611182565b6040519080825280601f01601f191660200182016040528015610bed576020820181803683370190505b5090508181016020015b600019016f181899199a1a9b1b9c1cb0b131b232b360811b600a86061a8153600a8504945084610c2657610c2b565b610bf7565b509392505050565b600080610c3f83610a7d565b6001600160a01b0316141592915050565b6001811115610621576001600160a01b03841615610c96576001600160a01b03841660009081526005602052604081208054839290610c909084906113fa565b90915550505b6001600160a01b03831615610621576001600160a01b03831660009081526005602052604081208054839290610ccd908490611411565b909155505050505050565b610ce28383610edf565b610cef6000848484610d0b565b61045b5760405162461bcd60e51b81526004016103ba90611391565b60006001600160a01b0384163b15610dfe57604051630a85bd0160e11b81526001600160a01b0385169063150b7a0290610d4f903390899088908890600401611429565b6020604051808303816000875af1925050508015610d8a575060408051601f3d908101601f19168201909252610d8791810190611466565b60015b610de4573d808015610db8576040519150601f19603f3d011682016040523d82523d6000602084013e610dbd565b606091505b508051610ddc5760405162461bcd60e51b81526004016103ba90611391565b805181602001fd5b6001600160e01b031916630a85bd0160e11b1490506107ec565b506001949350505050565b60008072184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b8310610e485772184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b830492506040015b6904ee2d6d415b85acef8160201b8310610e72576904ee2d6d415b85acef8160201b830492506020015b662386f26fc100008310610e9057662386f26fc10000830492506010015b6305f5e1008310610ea8576305f5e100830492506008015b6127108310610ebc57612710830492506004015b60648310610ece576064830492506002015b600a83106102855760010192915050565b6001600160a01b038216610f3f5760405162461bcd60e51b815260206004820152602160248201527f4c50546f6b656e3a206d696e7420746f20746865207a65726f206164647265736044820152607360f81b60648201526084016103ba565b610f4881610c33565b15610f655760405162461bcd60e51b81526004016103ba90611483565b610f73600083836001610c50565b610f7c81610c33565b15610f995760405162461bcd60e51b81526004016103ba90611483565b6001600160a01b038216600081815260056020908152604080832080546001019055848352600490915280822080546001600160a01b0319168417905551839291906000805160206114bb833981519152908290a45050565b6001600160e01b03198116811461051757600080fd5b60006020828403121561101a57600080fd5b81356106cd81610ff2565b60005b83811015611040578181015183820152602001611028565b838111156106215750506000910152565b60008151808452611069816020860160208601611025565b601f01601f19169290920160200192915050565b6020815260006106cd6020830184611051565b6000602082840312156110a257600080fd5b5035919050565b80356001600160a01b03811681146110c057600080fd5b919050565b600080604083850312156110d857600080fd5b6110e1836110a9565b946020939093013593505050565b60008060006060848603121561110457600080fd5b61110d846110a9565b925061111b602085016110a9565b9150604084013590509250925092565b60006020828403121561113d57600080fd5b6106cd826110a9565b6000806040838503121561115957600080fd5b611162836110a9565b91506020830135801515811461117757600080fd5b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b600080600080608085870312156111ae57600080fd5b6111b7856110a9565b93506111c5602086016110a9565b92506040850135915060608501356001600160401b03808211156111e857600080fd5b818701915087601f8301126111fc57600080fd5b81358181111561120e5761120e611182565b604051601f8201601f19908116603f0116810190838211818310171561123657611236611182565b816040528281528a602084870101111561124f57600080fd5b82602086016020830137600060208483010152809550505050505092959194509250565b6000806040838503121561128657600080fd5b61128f836110a9565b915061129d602084016110a9565b90509250929050565b600181811c908216806112ba57607f821691505b602082108114156112db57634e487b7160e01b600052602260045260246000fd5b50919050565b6020808252602e908201527f4c50546f6b656e3a2063616c6c6572206973206e6f7420746f6b656e206f776e60408201526d195c881bdc88185c1c1c9bdd995960921b606082015260800190565b6020808252601990820152781314151bdad95b8e881a5b9d985b1a59081d1bdad95b881251603a1b604082015260600190565b60008351611374818460208801611025565b835190830190611388818360208801611025565b01949350505050565b60208082526033908201527f4c50546f6b656e3a207472616e7366657220746f206e6f6e204552433732315260408201527232b1b2b4bb32b91034b6b83632b6b2b73a32b960691b606082015260800190565b634e487b7160e01b600052601160045260246000fd5b60008282101561140c5761140c6113e4565b500390565b60008219821115611424576114246113e4565b500190565b6001600160a01b038581168252841660208201526040810183905260806060820181905260009061145c90830184611051565b9695505050505050565b60006020828403121561147857600080fd5b81516106cd81610ff2565b6020808252601d908201527f4c50546f6b656e3a20746f6b656e20616c7265616479206d696e74656400000060408201526060019056feddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa2646970667358221220dcd4107ecdae1c68fc5ddb541ebfe4982a8137784f4f83acad9aad1b16295bee64736f6c634300080a0033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH3 0x11 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0x17E6 CODESIZE SUB DUP1 PUSH3 0x17E6 DUP4 CODECOPY DUP2 ADD PUSH1 0x40 DUP2 SWAP1 MSTORE PUSH3 0x34 SWAP2 PUSH3 0x1FC JUMP JUMPDEST DUP3 MLOAD PUSH3 0x49 SWAP1 PUSH1 0x0 SWAP1 PUSH1 0x20 DUP7 ADD SWAP1 PUSH3 0x89 JUMP JUMPDEST POP DUP2 MLOAD PUSH3 0x5F SWAP1 PUSH1 0x1 SWAP1 PUSH1 0x20 DUP6 ADD SWAP1 PUSH3 0x89 JUMP JUMPDEST POP PUSH1 0x3 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE POP PUSH3 0x2C6 SWAP1 POP JUMP JUMPDEST DUP3 DUP1 SLOAD PUSH3 0x97 SWAP1 PUSH3 0x289 JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x1F ADD PUSH1 0x20 SWAP1 DIV DUP2 ADD SWAP3 DUP3 PUSH3 0xBB JUMPI PUSH1 0x0 DUP6 SSTORE PUSH3 0x106 JUMP JUMPDEST DUP3 PUSH1 0x1F LT PUSH3 0xD6 JUMPI DUP1 MLOAD PUSH1 0xFF NOT AND DUP4 DUP1 ADD OR DUP6 SSTORE PUSH3 0x106 JUMP JUMPDEST DUP3 DUP1 ADD PUSH1 0x1 ADD DUP6 SSTORE DUP3 ISZERO PUSH3 0x106 JUMPI SWAP2 DUP3 ADD JUMPDEST DUP3 DUP2 GT ISZERO PUSH3 0x106 JUMPI DUP3 MLOAD DUP3 SSTORE SWAP2 PUSH1 0x20 ADD SWAP2 SWAP1 PUSH1 0x1 ADD SWAP1 PUSH3 0xE9 JUMP JUMPDEST POP PUSH3 0x114 SWAP3 SWAP2 POP PUSH3 0x118 JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST JUMPDEST DUP1 DUP3 GT ISZERO PUSH3 0x114 JUMPI PUSH1 0x0 DUP2 SSTORE PUSH1 0x1 ADD PUSH3 0x119 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH3 0x157 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH3 0x174 JUMPI PUSH3 0x174 PUSH3 0x12F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP4 ADD PUSH1 0x1F NOT SWAP1 DUP2 AND PUSH1 0x3F ADD AND DUP2 ADD SWAP1 DUP3 DUP3 GT DUP2 DUP4 LT OR ISZERO PUSH3 0x19F JUMPI PUSH3 0x19F PUSH3 0x12F JUMP JUMPDEST DUP2 PUSH1 0x40 MSTORE DUP4 DUP2 MSTORE PUSH1 0x20 SWAP3 POP DUP7 DUP4 DUP6 DUP9 ADD ADD GT ISZERO PUSH3 0x1BC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 SWAP2 POP JUMPDEST DUP4 DUP3 LT ISZERO PUSH3 0x1E0 JUMPI DUP6 DUP3 ADD DUP4 ADD MLOAD DUP2 DUP4 ADD DUP5 ADD MSTORE SWAP1 DUP3 ADD SWAP1 PUSH3 0x1C1 JUMP JUMPDEST DUP4 DUP3 GT ISZERO PUSH3 0x1F2 JUMPI PUSH1 0x0 DUP4 DUP6 DUP4 ADD ADD MSTORE JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH3 0x212 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH3 0x22A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH3 0x238 DUP8 DUP4 DUP9 ADD PUSH3 0x145 JUMP JUMPDEST SWAP5 POP PUSH1 0x20 DUP7 ADD MLOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH3 0x24F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH3 0x25E DUP7 DUP3 DUP8 ADD PUSH3 0x145 JUMP JUMPDEST PUSH1 0x40 DUP7 ADD MLOAD SWAP1 SWAP4 POP SWAP1 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH3 0x27E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH3 0x29E JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 EQ ISZERO PUSH3 0x2C0 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1510 DUP1 PUSH3 0x2D6 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xD0 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0xD5 JUMPI DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0xFD JUMPI DUP1 PUSH4 0x81812FC EQ PUSH2 0x112 JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x13D JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x152 JUMPI DUP1 PUSH4 0x40C10F19 EQ PUSH2 0x165 JUMPI DUP1 PUSH4 0x42842E0E EQ PUSH2 0x178 JUMPI DUP1 PUSH4 0x42966C68 EQ PUSH2 0x18B JUMPI DUP1 PUSH4 0x6352211E EQ PUSH2 0x19E JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x1B1 JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x1D2 JUMPI DUP1 PUSH4 0xA22CB465 EQ PUSH2 0x1DA JUMPI DUP1 PUSH4 0xB88D4FDE EQ PUSH2 0x1ED JUMPI DUP1 PUSH4 0xC4D66DE8 EQ PUSH2 0x200 JUMPI DUP1 PUSH4 0xC87B56DD EQ PUSH2 0x213 JUMPI DUP1 PUSH4 0xE985E9C5 EQ PUSH2 0x226 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xE8 PUSH2 0xE3 CALLDATASIZE PUSH1 0x4 PUSH2 0x1008 JUMP JUMPDEST PUSH2 0x239 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x105 PUSH2 0x28B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xF4 SWAP2 SWAP1 PUSH2 0x107D JUMP JUMPDEST PUSH2 0x125 PUSH2 0x120 CALLDATASIZE PUSH1 0x4 PUSH2 0x1090 JUMP JUMPDEST PUSH2 0x31D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xF4 JUMP JUMPDEST PUSH2 0x150 PUSH2 0x14B CALLDATASIZE PUSH1 0x4 PUSH2 0x10C5 JUMP JUMPDEST PUSH2 0x344 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x150 PUSH2 0x160 CALLDATASIZE PUSH1 0x4 PUSH2 0x10EF JUMP JUMPDEST PUSH2 0x460 JUMP JUMPDEST PUSH2 0x150 PUSH2 0x173 CALLDATASIZE PUSH1 0x4 PUSH2 0x10C5 JUMP JUMPDEST PUSH2 0x492 JUMP JUMPDEST PUSH2 0x150 PUSH2 0x186 CALLDATASIZE PUSH1 0x4 PUSH2 0x10EF JUMP JUMPDEST PUSH2 0x4B7 JUMP JUMPDEST PUSH2 0x150 PUSH2 0x199 CALLDATASIZE PUSH1 0x4 PUSH2 0x1090 JUMP JUMPDEST PUSH2 0x4D2 JUMP JUMPDEST PUSH2 0x125 PUSH2 0x1AC CALLDATASIZE PUSH1 0x4 PUSH2 0x1090 JUMP JUMPDEST PUSH2 0x51A JUMP JUMPDEST PUSH2 0x1C4 PUSH2 0x1BF CALLDATASIZE PUSH1 0x4 PUSH2 0x112B JUMP JUMPDEST PUSH2 0x54E JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xF4 JUMP JUMPDEST PUSH2 0x105 PUSH2 0x5D5 JUMP JUMPDEST PUSH2 0x150 PUSH2 0x1E8 CALLDATASIZE PUSH1 0x4 PUSH2 0x1146 JUMP JUMPDEST PUSH2 0x5E4 JUMP JUMPDEST PUSH2 0x150 PUSH2 0x1FB CALLDATASIZE PUSH1 0x4 PUSH2 0x1198 JUMP JUMPDEST PUSH2 0x5EF JUMP JUMPDEST PUSH2 0x150 PUSH2 0x20E CALLDATASIZE PUSH1 0x4 PUSH2 0x112B JUMP JUMPDEST PUSH2 0x627 JUMP JUMPDEST PUSH2 0x105 PUSH2 0x221 CALLDATASIZE PUSH1 0x4 PUSH2 0x1090 JUMP JUMPDEST PUSH2 0x660 JUMP JUMPDEST PUSH2 0xE8 PUSH2 0x234 CALLDATASIZE PUSH1 0x4 PUSH2 0x1273 JUMP JUMPDEST PUSH2 0x6D4 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x80AC58CD PUSH1 0xE0 SHL EQ DUP1 PUSH2 0x26A JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x5B5E139F PUSH1 0xE0 SHL EQ JUMPDEST DUP1 PUSH2 0x285 JUMPI POP PUSH4 0x1FFC9A7 PUSH1 0xE0 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP4 AND EQ JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP1 SLOAD PUSH2 0x29A SWAP1 PUSH2 0x12A6 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x2C6 SWAP1 PUSH2 0x12A6 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x313 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x2E8 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x313 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x2F6 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x328 DUP3 PUSH2 0x702 JUMP JUMPDEST POP PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x34F DUP3 PUSH2 0x51A JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO PUSH2 0x3C3 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x22 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4C50546F6B656E3A20617070726F76616C20746F2063757272656E74206F776E PUSH1 0x44 DUP3 ADD MSTORE PUSH2 0x32B9 PUSH1 0xF1 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND EQ DUP1 PUSH2 0x3DF JUMPI POP PUSH2 0x3DF DUP2 CALLER PUSH2 0x6D4 JUMP JUMPDEST PUSH2 0x451 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x3E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4C50546F6B656E3A20617070726F76652063616C6C6572206973206E6F742074 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6F6B656E206F776E6572206F7220617070726F76656420666F7220616C6C0000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x3BA JUMP JUMPDEST PUSH2 0x45B DUP4 DUP4 PUSH2 0x727 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH2 0x46B CALLER JUMPDEST DUP3 PUSH2 0x795 JUMP JUMPDEST PUSH2 0x487 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x3BA SWAP1 PUSH2 0x12E1 JUMP JUMPDEST PUSH2 0x45B DUP4 DUP4 DUP4 PUSH2 0x7F4 JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x4A9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x4B3 DUP3 DUP3 PUSH2 0x9D2 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH2 0x45B DUP4 DUP4 DUP4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x5EF JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x4E9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x4F2 CALLER PUSH2 0x465 JUMP JUMPDEST PUSH2 0x50E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x3BA SWAP1 PUSH2 0x12E1 JUMP JUMPDEST PUSH2 0x517 DUP2 PUSH2 0x9EC JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x526 DUP4 PUSH2 0xA7D JUMP JUMPDEST SWAP1 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x285 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x3BA SWAP1 PUSH2 0x132F JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x5B9 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4C50546F6B656E3A2061646472657373207A65726F206973206E6F7420612076 PUSH1 0x44 DUP3 ADD MSTORE PUSH10 0x30B634B21037BBB732B9 PUSH1 0xB1 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x3BA JUMP JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x1 DUP1 SLOAD PUSH2 0x29A SWAP1 PUSH2 0x12A6 JUMP JUMPDEST PUSH2 0x4B3 CALLER DUP4 DUP4 PUSH2 0xA98 JUMP JUMPDEST PUSH2 0x5F9 CALLER DUP4 PUSH2 0x795 JUMP JUMPDEST PUSH2 0x615 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x3BA SWAP1 PUSH2 0x12E1 JUMP JUMPDEST PUSH2 0x621 DUP5 DUP5 DUP5 DUP5 PUSH2 0xB64 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x3 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x63E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x2 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x60 PUSH2 0x66B DUP3 PUSH2 0x702 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x682 PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP2 ADD SWAP1 SWAP2 MSTORE PUSH1 0x0 DUP2 MSTORE SWAP1 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 MLOAD GT PUSH2 0x6A2 JUMPI PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x6CD JUMP JUMPDEST DUP1 PUSH2 0x6AC DUP5 PUSH2 0xB97 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x6BD SWAP3 SWAP2 SWAP1 PUSH2 0x1362 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH2 0x70B DUP2 PUSH2 0xC33 JUMP JUMPDEST PUSH2 0x517 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x3BA SWAP1 PUSH2 0x132F JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE DUP2 SWAP1 PUSH2 0x75C DUP3 PUSH2 0x51A JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x7A1 DUP4 PUSH2 0x51A JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ DUP1 PUSH2 0x7C8 JUMPI POP PUSH2 0x7C8 DUP2 DUP6 PUSH2 0x6D4 JUMP JUMPDEST DUP1 PUSH2 0x7EC JUMPI POP DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x7E1 DUP5 PUSH2 0x31D JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x807 DUP3 PUSH2 0x51A JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x86C JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4C50546F6B656E3A207472616E736665722066726F6D20696E636F7272656374 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x1037BBB732B9 PUSH1 0xD1 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x3BA JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x8D0 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4C50546F6B656E3A207472616E7366657220746F20746865207A65726F206164 PUSH1 0x44 DUP3 ADD MSTORE PUSH5 0x6472657373 PUSH1 0xD8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x3BA JUMP JUMPDEST PUSH2 0x8DD DUP4 DUP4 DUP4 PUSH1 0x1 PUSH2 0xC50 JUMP JUMPDEST DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x8F0 DUP3 PUSH2 0x51A JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x954 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A207472616E736665722066726F6D20696E636F727265637420 PUSH1 0x44 DUP3 ADD MSTORE PUSH5 0x37BBB732B9 PUSH1 0xD9 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x3BA JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT SWAP1 DUP2 AND SWAP1 SWAP2 SSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 DUP2 AND DUP1 DUP7 MSTORE PUSH1 0x5 DUP6 MSTORE DUP4 DUP7 KECCAK256 DUP1 SLOAD PUSH1 0x0 NOT ADD SWAP1 SSTORE SWAP1 DUP8 AND DUP1 DUP7 MSTORE DUP4 DUP7 KECCAK256 DUP1 SLOAD PUSH1 0x1 ADD SWAP1 SSTORE DUP7 DUP7 MSTORE PUSH1 0x4 SWAP1 SWAP5 MSTORE DUP3 DUP6 KECCAK256 DUP1 SLOAD SWAP1 SWAP3 AND DUP5 OR SWAP1 SWAP2 SSTORE SWAP1 MLOAD DUP5 SWAP4 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x14BB DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP2 LOG4 POP POP POP JUMP JUMPDEST PUSH2 0x4B3 DUP3 DUP3 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0xCD8 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x9F7 DUP3 PUSH2 0x51A JUMP JUMPDEST SWAP1 POP PUSH2 0xA07 DUP2 PUSH1 0x0 DUP5 PUSH1 0x1 PUSH2 0xC50 JUMP JUMPDEST PUSH2 0xA10 DUP3 PUSH2 0x51A JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT SWAP1 DUP2 AND SWAP1 SWAP2 SSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND DUP1 DUP6 MSTORE PUSH1 0x5 DUP5 MSTORE DUP3 DUP6 KECCAK256 DUP1 SLOAD PUSH1 0x0 NOT ADD SWAP1 SSTORE DUP8 DUP6 MSTORE PUSH1 0x4 SWAP1 SWAP4 MSTORE DUP2 DUP5 KECCAK256 DUP1 SLOAD SWAP1 SWAP2 AND SWAP1 SSTORE MLOAD SWAP3 SWAP4 POP DUP5 SWAP3 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x14BB DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP1 DUP4 SWAP1 LOG4 POP POP JUMP JUMPDEST PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO PUSH2 0xAF7 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1A PUSH1 0x24 DUP3 ADD MSTORE PUSH26 0x26282A37B5B2B71D1030B8383937BB32903A379031B0B63632B9 PUSH1 0x31 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x3BA JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP5 DUP8 AND DUP1 DUP5 MSTORE SWAP5 DUP3 MSTORE SWAP2 DUP3 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND DUP7 ISZERO ISZERO SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE SWAP2 MLOAD SWAP2 DUP3 MSTORE PUSH32 0x17307EAB39AB6107E8899845AD3D59BD9653F200F220920489CA2B5937696C31 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH2 0xB6F DUP5 DUP5 DUP5 PUSH2 0x7F4 JUMP JUMPDEST PUSH2 0xB7B DUP5 DUP5 DUP5 DUP5 PUSH2 0xD0B JUMP JUMPDEST PUSH2 0x621 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x3BA SWAP1 PUSH2 0x1391 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH2 0xBA4 DUP4 PUSH2 0xE09 JUMP JUMPDEST PUSH1 0x1 ADD SWAP1 POP PUSH1 0x0 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0xBC3 JUMPI PUSH2 0xBC3 PUSH2 0x1182 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0xBED JUMPI PUSH1 0x20 DUP3 ADD DUP2 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP DUP2 DUP2 ADD PUSH1 0x20 ADD JUMPDEST PUSH1 0x0 NOT ADD PUSH16 0x181899199A1A9B1B9C1CB0B131B232B3 PUSH1 0x81 SHL PUSH1 0xA DUP7 MOD BYTE DUP2 MSTORE8 PUSH1 0xA DUP6 DIV SWAP5 POP DUP5 PUSH2 0xC26 JUMPI PUSH2 0xC2B JUMP JUMPDEST PUSH2 0xBF7 JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0xC3F DUP4 PUSH2 0xA7D JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x621 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND ISZERO PUSH2 0xC96 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD DUP4 SWAP3 SWAP1 PUSH2 0xC90 SWAP1 DUP5 SWAP1 PUSH2 0x13FA JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND ISZERO PUSH2 0x621 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD DUP4 SWAP3 SWAP1 PUSH2 0xCCD SWAP1 DUP5 SWAP1 PUSH2 0x1411 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0xCE2 DUP4 DUP4 PUSH2 0xEDF JUMP JUMPDEST PUSH2 0xCEF PUSH1 0x0 DUP5 DUP5 DUP5 PUSH2 0xD0B JUMP JUMPDEST PUSH2 0x45B JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x3BA SWAP1 PUSH2 0x1391 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND EXTCODESIZE ISZERO PUSH2 0xDFE JUMPI PUSH1 0x40 MLOAD PUSH4 0xA85BD01 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND SWAP1 PUSH4 0x150B7A02 SWAP1 PUSH2 0xD4F SWAP1 CALLER SWAP1 DUP10 SWAP1 DUP9 SWAP1 DUP9 SWAP1 PUSH1 0x4 ADD PUSH2 0x1429 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0xD8A JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0xD87 SWAP2 DUP2 ADD SWAP1 PUSH2 0x1466 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0xDE4 JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0xDB8 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0xDBD JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP DUP1 MLOAD PUSH2 0xDDC JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x3BA SWAP1 PUSH2 0x1391 JUMP JUMPDEST DUP1 MLOAD DUP2 PUSH1 0x20 ADD REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND PUSH4 0xA85BD01 PUSH1 0xE1 SHL EQ SWAP1 POP PUSH2 0x7EC JUMP JUMPDEST POP PUSH1 0x1 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH19 0x184F03E93FF9F4DAA797ED6E38ED64BF6A1F01 PUSH1 0x40 SHL DUP4 LT PUSH2 0xE48 JUMPI PUSH19 0x184F03E93FF9F4DAA797ED6E38ED64BF6A1F01 PUSH1 0x40 SHL DUP4 DIV SWAP3 POP PUSH1 0x40 ADD JUMPDEST PUSH10 0x4EE2D6D415B85ACEF81 PUSH1 0x20 SHL DUP4 LT PUSH2 0xE72 JUMPI PUSH10 0x4EE2D6D415B85ACEF81 PUSH1 0x20 SHL DUP4 DIV SWAP3 POP PUSH1 0x20 ADD JUMPDEST PUSH7 0x2386F26FC10000 DUP4 LT PUSH2 0xE90 JUMPI PUSH7 0x2386F26FC10000 DUP4 DIV SWAP3 POP PUSH1 0x10 ADD JUMPDEST PUSH4 0x5F5E100 DUP4 LT PUSH2 0xEA8 JUMPI PUSH4 0x5F5E100 DUP4 DIV SWAP3 POP PUSH1 0x8 ADD JUMPDEST PUSH2 0x2710 DUP4 LT PUSH2 0xEBC JUMPI PUSH2 0x2710 DUP4 DIV SWAP3 POP PUSH1 0x4 ADD JUMPDEST PUSH1 0x64 DUP4 LT PUSH2 0xECE JUMPI PUSH1 0x64 DUP4 DIV SWAP3 POP PUSH1 0x2 ADD JUMPDEST PUSH1 0xA DUP4 LT PUSH2 0x285 JUMPI PUSH1 0x1 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0xF3F JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x21 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4C50546F6B656E3A206D696E7420746F20746865207A65726F20616464726573 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x73 PUSH1 0xF8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x3BA JUMP JUMPDEST PUSH2 0xF48 DUP2 PUSH2 0xC33 JUMP JUMPDEST ISZERO PUSH2 0xF65 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x3BA SWAP1 PUSH2 0x1483 JUMP JUMPDEST PUSH2 0xF73 PUSH1 0x0 DUP4 DUP4 PUSH1 0x1 PUSH2 0xC50 JUMP JUMPDEST PUSH2 0xF7C DUP2 PUSH2 0xC33 JUMP JUMPDEST ISZERO PUSH2 0xF99 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x3BA SWAP1 PUSH2 0x1483 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP1 SLOAD PUSH1 0x1 ADD SWAP1 SSTORE DUP5 DUP4 MSTORE PUSH1 0x4 SWAP1 SWAP2 MSTORE DUP1 DUP3 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND DUP5 OR SWAP1 SSTORE MLOAD DUP4 SWAP3 SWAP2 SWAP1 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x14BB DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP1 DUP3 SWAP1 LOG4 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND DUP2 EQ PUSH2 0x517 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x101A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x6CD DUP2 PUSH2 0xFF2 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x1040 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x1028 JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0x621 JUMPI POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH2 0x1069 DUP2 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP7 ADD PUSH2 0x1025 JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 PUSH2 0x6CD PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x1051 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x10A2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x10C0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x10D8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x10E1 DUP4 PUSH2 0x10A9 JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x1104 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x110D DUP5 PUSH2 0x10A9 JUMP JUMPDEST SWAP3 POP PUSH2 0x111B PUSH1 0x20 DUP6 ADD PUSH2 0x10A9 JUMP JUMPDEST SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x113D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x6CD DUP3 PUSH2 0x10A9 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1159 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1162 DUP4 PUSH2 0x10A9 JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x1177 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x11AE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x11B7 DUP6 PUSH2 0x10A9 JUMP JUMPDEST SWAP4 POP PUSH2 0x11C5 PUSH1 0x20 DUP7 ADD PUSH2 0x10A9 JUMP JUMPDEST SWAP3 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD SWAP2 POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0x11E8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP8 ADD SWAP2 POP DUP8 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x11FC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0x120E JUMPI PUSH2 0x120E PUSH2 0x1182 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT SWAP1 DUP2 AND PUSH1 0x3F ADD AND DUP2 ADD SWAP1 DUP4 DUP3 GT DUP2 DUP4 LT OR ISZERO PUSH2 0x1236 JUMPI PUSH2 0x1236 PUSH2 0x1182 JUMP JUMPDEST DUP2 PUSH1 0x40 MSTORE DUP3 DUP2 MSTORE DUP11 PUSH1 0x20 DUP5 DUP8 ADD ADD GT ISZERO PUSH2 0x124F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP4 ADD CALLDATACOPY PUSH1 0x0 PUSH1 0x20 DUP5 DUP4 ADD ADD MSTORE DUP1 SWAP6 POP POP POP POP POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1286 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x128F DUP4 PUSH2 0x10A9 JUMP JUMPDEST SWAP2 POP PUSH2 0x129D PUSH1 0x20 DUP5 ADD PUSH2 0x10A9 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0x12BA JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 EQ ISZERO PUSH2 0x12DB JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x2E SWAP1 DUP3 ADD MSTORE PUSH32 0x4C50546F6B656E3A2063616C6C6572206973206E6F7420746F6B656E206F776E PUSH1 0x40 DUP3 ADD MSTORE PUSH14 0x195C881BDC88185C1C1C9BDD9959 PUSH1 0x92 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x19 SWAP1 DUP3 ADD MSTORE PUSH25 0x1314151BDAD95B8E881A5B9D985B1A59081D1BDAD95B881251 PUSH1 0x3A SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP4 MLOAD PUSH2 0x1374 DUP2 DUP5 PUSH1 0x20 DUP9 ADD PUSH2 0x1025 JUMP JUMPDEST DUP4 MLOAD SWAP1 DUP4 ADD SWAP1 PUSH2 0x1388 DUP2 DUP4 PUSH1 0x20 DUP9 ADD PUSH2 0x1025 JUMP JUMPDEST ADD SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x33 SWAP1 DUP3 ADD MSTORE PUSH32 0x4C50546F6B656E3A207472616E7366657220746F206E6F6E2045524337323152 PUSH1 0x40 DUP3 ADD MSTORE PUSH19 0x32B1B2B4BB32B91034B6B83632B6B2B73A32B9 PUSH1 0x69 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP3 DUP3 LT ISZERO PUSH2 0x140C JUMPI PUSH2 0x140C PUSH2 0x13E4 JUMP JUMPDEST POP SUB SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 NOT DUP3 GT ISZERO PUSH2 0x1424 JUMPI PUSH2 0x1424 PUSH2 0x13E4 JUMP JUMPDEST POP ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 DUP2 AND DUP3 MSTORE DUP5 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x80 PUSH1 0x60 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH2 0x145C SWAP1 DUP4 ADD DUP5 PUSH2 0x1051 JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1478 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x6CD DUP2 PUSH2 0xFF2 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x1D SWAP1 DUP3 ADD MSTORE PUSH32 0x4C50546F6B656E3A20746F6B656E20616C7265616479206D696E746564000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP INVALID 0xDD CALLCODE MSTORE 0xAD SHL 0xE2 0xC8 SWAP12 PUSH10 0xC2B068FC378DAA952BA7 CALL PUSH4 0xC4A11628 CREATE2 GAS 0x4D CREATE2 0x23 0xB3 0xEF LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xDC 0xD4 LT PUSH31 0xCDAE1C68FC5DDB541EBFE4982A8137784F4F83ACAD9AAD1B16295BEE64736F PUSH13 0x634300080A0033000000000000 ",
							"sourceMap": "745:16820:9:-:0;;;1610:160;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1694:13;;;;:5;;:13;;;;;:::i;:::-;-1:-1:-1;1717:17:9;;;;:7;;:17;;;;;:::i;:::-;-1:-1:-1;1744:8:9;:19;;-1:-1:-1;;;;;;1744:19:9;-1:-1:-1;;;;;1744:19:9;;;;;;;;;;-1:-1:-1;745:16820:9;;-1:-1:-1;745:16820:9;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;745:16820:9;;;-1:-1:-1;745:16820:9;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;14:127:10;75:10;70:3;66:20;63:1;56:31;106:4;103:1;96:15;130:4;127:1;120:15;146:885;200:5;253:3;246:4;238:6;234:17;230:27;220:55;;271:1;268;261:12;220:55;294:13;;-1:-1:-1;;;;;356:10:10;;;353:36;;;369:18;;:::i;:::-;444:2;438:9;412:2;498:13;;-1:-1:-1;;494:22:10;;;518:2;490:31;486:40;474:53;;;542:18;;;562:22;;;539:46;536:72;;;588:18;;:::i;:::-;628:10;624:2;617:22;663:2;655:6;648:18;685:4;675:14;;730:3;725:2;720;712:6;708:15;704:24;701:33;698:53;;;747:1;744;737:12;698:53;769:1;760:10;;779:133;793:2;790:1;787:9;779:133;;;881:14;;;877:23;;871:30;850:14;;;846:23;;839:63;804:10;;;;779:133;;;930:2;927:1;924:9;921:80;;;989:1;984:2;979;971:6;967:15;963:24;956:35;921:80;1019:6;146:885;-1:-1:-1;;;;;;146:885:10:o;1036:729::-;1144:6;1152;1160;1213:2;1201:9;1192:7;1188:23;1184:32;1181:52;;;1229:1;1226;1219:12;1181:52;1256:16;;-1:-1:-1;;;;;1321:14:10;;;1318:34;;;1348:1;1345;1338:12;1318:34;1371:61;1424:7;1415:6;1404:9;1400:22;1371:61;:::i;:::-;1361:71;;1478:2;1467:9;1463:18;1457:25;1441:41;;1507:2;1497:8;1494:16;1491:36;;;1523:1;1520;1513:12;1491:36;;1546:63;1601:7;1590:8;1579:9;1575:24;1546:63;:::i;:::-;1652:2;1637:18;;1631:25;1536:73;;-1:-1:-1;1631:25:10;-1:-1:-1;;;;;;1685:31:10;;1675:42;;1665:70;;1731:1;1728;1721:12;1665:70;1754:5;1744:15;;;1036:729;;;;;:::o;1770:380::-;1849:1;1845:12;;;;1892;;;1913:61;;1967:4;1959:6;1955:17;1945:27;;1913:61;2020:2;2012:6;2009:14;1989:18;1986:38;1983:161;;;2066:10;2061:3;2057:20;2054:1;2047:31;2101:4;2098:1;2091:15;2129:4;2126:1;2119:15;1983:161;;1770:380;;;:::o;:::-;745:16820:9;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {
								"@_afterTokenTransfer_2612": {
									"entryPoint": null,
									"id": 2612,
									"parameterSlots": 4,
									"returnSlots": 0
								},
								"@_approve_2445": {
									"entryPoint": 1831,
									"id": 2445,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"@_baseURI_1882": {
									"entryPoint": null,
									"id": 1882,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@_beforeTokenTransfer_2599": {
									"entryPoint": 3152,
									"id": 2599,
									"parameterSlots": 4,
									"returnSlots": 0
								},
								"@_burn_2336": {
									"entryPoint": 2540,
									"id": 2336,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@_checkOnERC721Received_2553": {
									"entryPoint": 3339,
									"id": 2553,
									"parameterSlots": 4,
									"returnSlots": 1
								},
								"@_exists_2114": {
									"entryPoint": 3123,
									"id": 2114,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@_isApprovedOrOwner_2148": {
									"entryPoint": 1941,
									"id": 2148,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"@_mint_2269": {
									"entryPoint": 3807,
									"id": 2269,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"@_msgSender_502": {
									"entryPoint": null,
									"id": 502,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@_ownerOf_2096": {
									"entryPoint": 2685,
									"id": 2096,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@_requireMinted_2491": {
									"entryPoint": 1794,
									"id": 2491,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@_safeMint_2163": {
									"entryPoint": 2514,
									"id": 2163,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"@_safeMint_2192": {
									"entryPoint": 3288,
									"id": 2192,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"@_safeTransfer_2083": {
									"entryPoint": 2916,
									"id": 2083,
									"parameterSlots": 4,
									"returnSlots": 0
								},
								"@_setApprovalForAll_2477": {
									"entryPoint": 2712,
									"id": 2477,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"@_transfer_2421": {
									"entryPoint": 2036,
									"id": 2421,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"@approve_1925": {
									"entryPoint": 836,
									"id": 1925,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"@balanceOf_1786": {
									"entryPoint": 1358,
									"id": 1786,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@burn_1731": {
									"entryPoint": 1234,
									"id": 1731,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@getApproved_1943": {
									"entryPoint": 797,
									"id": 1943,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@initialize_1695": {
									"entryPoint": 1575,
									"id": 1695,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@isApprovedForAll_1978": {
									"entryPoint": 1748,
									"id": 1978,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"@isContract_178": {
									"entryPoint": null,
									"id": 178,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@log10_1425": {
									"entryPoint": 3593,
									"id": 1425,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@mint_1710": {
									"entryPoint": 1170,
									"id": 1710,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"@name_1824": {
									"entryPoint": 651,
									"id": 1824,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@ownerOf_1814": {
									"entryPoint": 1306,
									"id": 1814,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@safeTransferFrom_2024": {
									"entryPoint": 1207,
									"id": 2024,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"@safeTransferFrom_2054": {
									"entryPoint": 1519,
									"id": 2054,
									"parameterSlots": 4,
									"returnSlots": 0
								},
								"@setApprovalForAll_1960": {
									"entryPoint": 1508,
									"id": 1960,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"@supportsInterface_1762": {
									"entryPoint": 569,
									"id": 1762,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@supportsInterface_710": {
									"entryPoint": null,
									"id": 710,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@symbol_1834": {
									"entryPoint": 1493,
									"id": 1834,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@toString_570": {
									"entryPoint": 2967,
									"id": 570,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@tokenURI_1873": {
									"entryPoint": 1632,
									"id": 1873,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@transferFrom_2005": {
									"entryPoint": 1120,
									"id": 2005,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"abi_decode_address": {
									"entryPoint": 4265,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_address": {
									"entryPoint": 4395,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_addresst_address": {
									"entryPoint": 4723,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 2
								},
								"abi_decode_tuple_t_addresst_addresst_uint256": {
									"entryPoint": 4335,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 3
								},
								"abi_decode_tuple_t_addresst_addresst_uint256t_bytes_memory_ptr": {
									"entryPoint": 4504,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 4
								},
								"abi_decode_tuple_t_addresst_bool": {
									"entryPoint": 4422,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 2
								},
								"abi_decode_tuple_t_addresst_uint256": {
									"entryPoint": 4293,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 2
								},
								"abi_decode_tuple_t_bytes4": {
									"entryPoint": 4104,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_bytes4_fromMemory": {
									"entryPoint": 5222,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_uint256": {
									"entryPoint": 4240,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_string": {
									"entryPoint": 4177,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_packed_t_string_memory_ptr_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed": {
									"entryPoint": 4962,
									"id": null,
									"parameterSlots": 3,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_address__to_t_address__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_address_t_address_t_uint256_t_bytes_memory_ptr__to_t_address_t_address_t_uint256_t_bytes_memory_ptr__fromStack_reversed": {
									"entryPoint": 5161,
									"id": null,
									"parameterSlots": 5,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": 4221,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_0de948d3f2800070ee485cb4e6ddea363a22e035a4bbf48d8192e08bacbc4871__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": 4911,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_1aba4d9565a9de9dd59a7e784dc928dd411203bc337af1a5bf922f3c2b5c7c83__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_7840becadfba5bfbf80c756d51d1daf6c018ee83ae5dc9914c9f5798baf751bc__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_7d3ee8c74050f4fe83b2ce7d49fd8df823fe5b7a5e9a3d71ecaa16369a4b53cb__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": 5251,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_90d40f4b500dad131a37c48a1929541c0dc77a82fa018c908d230f38021fe37d__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_9210b42866450f064f5c8ec9ce98d17f9fb7cc05dedf8125e9046199846ae43d__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_a5ddc949369cb9b92239d895735ce26ab946db281ce04465e00baecb5de369c0__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_a5ffe5dde529c790f4d4d30827fab7c2daf9e1a22354adadcc2286d93abb4b98__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": 4833,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_b68b6da5c73f081fedef6df3c9ac69fef1058ce93b413e644e8b80491cd9bc09__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_cd05f83da6940de4a3075fc9ad85b9137b64610f15df8549468ac7081d15bf47__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": 5009,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_ef1298a7174f188e1119a85bd9a0cda763120d85cfd0dbe8ef81a425bd78189f__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"checked_add_t_uint256": {
									"entryPoint": 5137,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"checked_sub_t_uint256": {
									"entryPoint": 5114,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"copy_memory_to_memory": {
									"entryPoint": 4133,
									"id": null,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"extract_byte_array_length": {
									"entryPoint": 4774,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"panic_error_0x11": {
									"entryPoint": 5092,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"panic_error_0x12": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"panic_error_0x41": {
									"entryPoint": 4482,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"validator_revert_bytes4": {
									"entryPoint": 4082,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								}
							},
							"generatedSources": [
								{
									"ast": {
										"nodeType": "YulBlock",
										"src": "0:11671:10",
										"statements": [
											{
												"nodeType": "YulBlock",
												"src": "6:3:10",
												"statements": []
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "58:87:10",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "123:16:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "132:1:10",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "135:1:10",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "125:6:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "125:12:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "125:12:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "81:5:10"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "92:5:10"
																					},
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "103:3:10",
																								"type": "",
																								"value": "224"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "108:10:10",
																								"type": "",
																								"value": "0xffffffff"
																							}
																						],
																						"functionName": {
																							"name": "shl",
																							"nodeType": "YulIdentifier",
																							"src": "99:3:10"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "99:20:10"
																					}
																				],
																				"functionName": {
																					"name": "and",
																					"nodeType": "YulIdentifier",
																					"src": "88:3:10"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "88:32:10"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "78:2:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "78:43:10"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "71:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "71:51:10"
															},
															"nodeType": "YulIf",
															"src": "68:71:10"
														}
													]
												},
												"name": "validator_revert_bytes4",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "47:5:10",
														"type": ""
													}
												],
												"src": "14:131:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "219:176:10",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "265:16:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "274:1:10",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "277:1:10",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "267:6:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "267:12:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "267:12:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "240:7:10"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "249:9:10"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "236:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "236:23:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "261:2:10",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "232:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "232:32:10"
															},
															"nodeType": "YulIf",
															"src": "229:52:10"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "290:36:10",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "316:9:10"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "303:12:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "303:23:10"
															},
															"variables": [
																{
																	"name": "value",
																	"nodeType": "YulTypedName",
																	"src": "294:5:10",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "359:5:10"
																	}
																],
																"functionName": {
																	"name": "validator_revert_bytes4",
																	"nodeType": "YulIdentifier",
																	"src": "335:23:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "335:30:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "335:30:10"
														},
														{
															"nodeType": "YulAssignment",
															"src": "374:15:10",
															"value": {
																"name": "value",
																"nodeType": "YulIdentifier",
																"src": "384:5:10"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "374:6:10"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_bytes4",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "185:9:10",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "196:7:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "208:6:10",
														"type": ""
													}
												],
												"src": "150:245:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "495:92:10",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "505:26:10",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "517:9:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "528:2:10",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "513:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "513:18:10"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "505:4:10"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "547:9:10"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "value0",
																						"nodeType": "YulIdentifier",
																						"src": "572:6:10"
																					}
																				],
																				"functionName": {
																					"name": "iszero",
																					"nodeType": "YulIdentifier",
																					"src": "565:6:10"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "565:14:10"
																			}
																		],
																		"functionName": {
																			"name": "iszero",
																			"nodeType": "YulIdentifier",
																			"src": "558:6:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "558:22:10"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "540:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "540:41:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "540:41:10"
														}
													]
												},
												"name": "abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "464:9:10",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "475:6:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "486:4:10",
														"type": ""
													}
												],
												"src": "400:187:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "645:205:10",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "655:10:10",
															"value": {
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "664:1:10",
																"type": "",
																"value": "0"
															},
															"variables": [
																{
																	"name": "i",
																	"nodeType": "YulTypedName",
																	"src": "659:1:10",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "724:63:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"name": "dst",
																							"nodeType": "YulIdentifier",
																							"src": "749:3:10"
																						},
																						{
																							"name": "i",
																							"nodeType": "YulIdentifier",
																							"src": "754:1:10"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nodeType": "YulIdentifier",
																						"src": "745:3:10"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "745:11:10"
																				},
																				{
																					"arguments": [
																						{
																							"arguments": [
																								{
																									"name": "src",
																									"nodeType": "YulIdentifier",
																									"src": "768:3:10"
																								},
																								{
																									"name": "i",
																									"nodeType": "YulIdentifier",
																									"src": "773:1:10"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nodeType": "YulIdentifier",
																								"src": "764:3:10"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "764:11:10"
																						}
																					],
																					"functionName": {
																						"name": "mload",
																						"nodeType": "YulIdentifier",
																						"src": "758:5:10"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "758:18:10"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "738:6:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "738:39:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "738:39:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "i",
																		"nodeType": "YulIdentifier",
																		"src": "685:1:10"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "688:6:10"
																	}
																],
																"functionName": {
																	"name": "lt",
																	"nodeType": "YulIdentifier",
																	"src": "682:2:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "682:13:10"
															},
															"nodeType": "YulForLoop",
															"post": {
																"nodeType": "YulBlock",
																"src": "696:19:10",
																"statements": [
																	{
																		"nodeType": "YulAssignment",
																		"src": "698:15:10",
																		"value": {
																			"arguments": [
																				{
																					"name": "i",
																					"nodeType": "YulIdentifier",
																					"src": "707:1:10"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "710:2:10",
																					"type": "",
																					"value": "32"
																				}
																			],
																			"functionName": {
																				"name": "add",
																				"nodeType": "YulIdentifier",
																				"src": "703:3:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "703:10:10"
																		},
																		"variableNames": [
																			{
																				"name": "i",
																				"nodeType": "YulIdentifier",
																				"src": "698:1:10"
																			}
																		]
																	}
																]
															},
															"pre": {
																"nodeType": "YulBlock",
																"src": "678:3:10",
																"statements": []
															},
															"src": "674:113:10"
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "813:31:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"name": "dst",
																							"nodeType": "YulIdentifier",
																							"src": "826:3:10"
																						},
																						{
																							"name": "length",
																							"nodeType": "YulIdentifier",
																							"src": "831:6:10"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nodeType": "YulIdentifier",
																						"src": "822:3:10"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "822:16:10"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "840:1:10",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "815:6:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "815:27:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "815:27:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "i",
																		"nodeType": "YulIdentifier",
																		"src": "802:1:10"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "805:6:10"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "799:2:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "799:13:10"
															},
															"nodeType": "YulIf",
															"src": "796:48:10"
														}
													]
												},
												"name": "copy_memory_to_memory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "src",
														"nodeType": "YulTypedName",
														"src": "623:3:10",
														"type": ""
													},
													{
														"name": "dst",
														"nodeType": "YulTypedName",
														"src": "628:3:10",
														"type": ""
													},
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "633:6:10",
														"type": ""
													}
												],
												"src": "592:258:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "905:208:10",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "915:26:10",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "935:5:10"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "929:5:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "929:12:10"
															},
															"variables": [
																{
																	"name": "length",
																	"nodeType": "YulTypedName",
																	"src": "919:6:10",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "957:3:10"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "962:6:10"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "950:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "950:19:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "950:19:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "1004:5:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1011:4:10",
																				"type": "",
																				"value": "0x20"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1000:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1000:16:10"
																	},
																	{
																		"arguments": [
																			{
																				"name": "pos",
																				"nodeType": "YulIdentifier",
																				"src": "1022:3:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1027:4:10",
																				"type": "",
																				"value": "0x20"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1018:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1018:14:10"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "1034:6:10"
																	}
																],
																"functionName": {
																	"name": "copy_memory_to_memory",
																	"nodeType": "YulIdentifier",
																	"src": "978:21:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "978:63:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "978:63:10"
														},
														{
															"nodeType": "YulAssignment",
															"src": "1050:57:10",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "pos",
																				"nodeType": "YulIdentifier",
																				"src": "1065:3:10"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"name": "length",
																								"nodeType": "YulIdentifier",
																								"src": "1078:6:10"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "1086:2:10",
																								"type": "",
																								"value": "31"
																							}
																						],
																						"functionName": {
																							"name": "add",
																							"nodeType": "YulIdentifier",
																							"src": "1074:3:10"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "1074:15:10"
																					},
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "1095:2:10",
																								"type": "",
																								"value": "31"
																							}
																						],
																						"functionName": {
																							"name": "not",
																							"nodeType": "YulIdentifier",
																							"src": "1091:3:10"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "1091:7:10"
																					}
																				],
																				"functionName": {
																					"name": "and",
																					"nodeType": "YulIdentifier",
																					"src": "1070:3:10"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "1070:29:10"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1061:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1061:39:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1102:4:10",
																		"type": "",
																		"value": "0x20"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "1057:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "1057:50:10"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nodeType": "YulIdentifier",
																	"src": "1050:3:10"
																}
															]
														}
													]
												},
												"name": "abi_encode_string",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "882:5:10",
														"type": ""
													},
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "889:3:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "897:3:10",
														"type": ""
													}
												],
												"src": "855:258:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1239:99:10",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1256:9:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1267:2:10",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "1249:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "1249:21:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1249:21:10"
														},
														{
															"nodeType": "YulAssignment",
															"src": "1279:53:10",
															"value": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "1305:6:10"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1317:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1328:2:10",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1313:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1313:18:10"
																	}
																],
																"functionName": {
																	"name": "abi_encode_string",
																	"nodeType": "YulIdentifier",
																	"src": "1287:17:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "1287:45:10"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "1279:4:10"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1208:9:10",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1219:6:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "1230:4:10",
														"type": ""
													}
												],
												"src": "1118:220:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1413:110:10",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1459:16:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1468:1:10",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1471:1:10",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "1461:6:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1461:12:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1461:12:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "1434:7:10"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1443:9:10"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "1430:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1430:23:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1455:2:10",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "1426:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "1426:32:10"
															},
															"nodeType": "YulIf",
															"src": "1423:52:10"
														},
														{
															"nodeType": "YulAssignment",
															"src": "1484:33:10",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1507:9:10"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "1494:12:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "1494:23:10"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "1484:6:10"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1379:9:10",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "1390:7:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1402:6:10",
														"type": ""
													}
												],
												"src": "1343:180:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1629:102:10",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "1639:26:10",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1651:9:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1662:2:10",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "1647:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "1647:18:10"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "1639:4:10"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1681:9:10"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nodeType": "YulIdentifier",
																				"src": "1696:6:10"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "1712:3:10",
																								"type": "",
																								"value": "160"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "1717:1:10",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "shl",
																							"nodeType": "YulIdentifier",
																							"src": "1708:3:10"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "1708:11:10"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "1721:1:10",
																						"type": "",
																						"value": "1"
																					}
																				],
																				"functionName": {
																					"name": "sub",
																					"nodeType": "YulIdentifier",
																					"src": "1704:3:10"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "1704:19:10"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "1692:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1692:32:10"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "1674:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "1674:51:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1674:51:10"
														}
													]
												},
												"name": "abi_encode_tuple_t_address__to_t_address__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1598:9:10",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1609:6:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "1620:4:10",
														"type": ""
													}
												],
												"src": "1528:203:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1785:124:10",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "1795:29:10",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "1817:6:10"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "1804:12:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "1804:20:10"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "1795:5:10"
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1887:16:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1896:1:10",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1899:1:10",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "1889:6:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1889:12:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1889:12:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "1846:5:10"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "1857:5:10"
																					},
																					{
																						"arguments": [
																							{
																								"arguments": [
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "1872:3:10",
																										"type": "",
																										"value": "160"
																									},
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "1877:1:10",
																										"type": "",
																										"value": "1"
																									}
																								],
																								"functionName": {
																									"name": "shl",
																									"nodeType": "YulIdentifier",
																									"src": "1868:3:10"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "1868:11:10"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "1881:1:10",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "sub",
																							"nodeType": "YulIdentifier",
																							"src": "1864:3:10"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "1864:19:10"
																					}
																				],
																				"functionName": {
																					"name": "and",
																					"nodeType": "YulIdentifier",
																					"src": "1853:3:10"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "1853:31:10"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "1843:2:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1843:42:10"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "1836:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "1836:50:10"
															},
															"nodeType": "YulIf",
															"src": "1833:70:10"
														}
													]
												},
												"name": "abi_decode_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "1764:6:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "1775:5:10",
														"type": ""
													}
												],
												"src": "1736:173:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2001:167:10",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "2047:16:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2056:1:10",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2059:1:10",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "2049:6:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2049:12:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2049:12:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "2022:7:10"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2031:9:10"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "2018:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2018:23:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2043:2:10",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "2014:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "2014:32:10"
															},
															"nodeType": "YulIf",
															"src": "2011:52:10"
														},
														{
															"nodeType": "YulAssignment",
															"src": "2072:39:10",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2101:9:10"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address",
																	"nodeType": "YulIdentifier",
																	"src": "2082:18:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "2082:29:10"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "2072:6:10"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "2120:42:10",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2147:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2158:2:10",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2143:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2143:18:10"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "2130:12:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "2130:32:10"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nodeType": "YulIdentifier",
																	"src": "2120:6:10"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1959:9:10",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "1970:7:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1982:6:10",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "1990:6:10",
														"type": ""
													}
												],
												"src": "1914:254:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2277:224:10",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "2323:16:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2332:1:10",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2335:1:10",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "2325:6:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2325:12:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2325:12:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "2298:7:10"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2307:9:10"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "2294:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2294:23:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2319:2:10",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "2290:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "2290:32:10"
															},
															"nodeType": "YulIf",
															"src": "2287:52:10"
														},
														{
															"nodeType": "YulAssignment",
															"src": "2348:39:10",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2377:9:10"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address",
																	"nodeType": "YulIdentifier",
																	"src": "2358:18:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "2358:29:10"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "2348:6:10"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "2396:48:10",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2429:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2440:2:10",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2425:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2425:18:10"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address",
																	"nodeType": "YulIdentifier",
																	"src": "2406:18:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "2406:38:10"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nodeType": "YulIdentifier",
																	"src": "2396:6:10"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "2453:42:10",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2480:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2491:2:10",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2476:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2476:18:10"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "2463:12:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "2463:32:10"
															},
															"variableNames": [
																{
																	"name": "value2",
																	"nodeType": "YulIdentifier",
																	"src": "2453:6:10"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_addresst_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "2227:9:10",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "2238:7:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "2250:6:10",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "2258:6:10",
														"type": ""
													},
													{
														"name": "value2",
														"nodeType": "YulTypedName",
														"src": "2266:6:10",
														"type": ""
													}
												],
												"src": "2173:328:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2576:116:10",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "2622:16:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2631:1:10",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2634:1:10",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "2624:6:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2624:12:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2624:12:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "2597:7:10"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2606:9:10"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "2593:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2593:23:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2618:2:10",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "2589:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "2589:32:10"
															},
															"nodeType": "YulIf",
															"src": "2586:52:10"
														},
														{
															"nodeType": "YulAssignment",
															"src": "2647:39:10",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2676:9:10"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address",
																	"nodeType": "YulIdentifier",
																	"src": "2657:18:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "2657:29:10"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "2647:6:10"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "2542:9:10",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "2553:7:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "2565:6:10",
														"type": ""
													}
												],
												"src": "2506:186:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2798:76:10",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "2808:26:10",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2820:9:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2831:2:10",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "2816:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "2816:18:10"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "2808:4:10"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2850:9:10"
																	},
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "2861:6:10"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2843:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "2843:25:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2843:25:10"
														}
													]
												},
												"name": "abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "2767:9:10",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "2778:6:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "2789:4:10",
														"type": ""
													}
												],
												"src": "2697:177:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2963:263:10",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "3009:16:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "3018:1:10",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "3021:1:10",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "3011:6:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "3011:12:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "3011:12:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "2984:7:10"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2993:9:10"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "2980:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2980:23:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3005:2:10",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "2976:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "2976:32:10"
															},
															"nodeType": "YulIf",
															"src": "2973:52:10"
														},
														{
															"nodeType": "YulAssignment",
															"src": "3034:39:10",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "3063:9:10"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address",
																	"nodeType": "YulIdentifier",
																	"src": "3044:18:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "3044:29:10"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "3034:6:10"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "3082:45:10",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3112:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3123:2:10",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3108:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3108:18:10"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "3095:12:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "3095:32:10"
															},
															"variables": [
																{
																	"name": "value",
																	"nodeType": "YulTypedName",
																	"src": "3086:5:10",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "3180:16:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "3189:1:10",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "3192:1:10",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "3182:6:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "3182:12:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "3182:12:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "3149:5:10"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"name": "value",
																								"nodeType": "YulIdentifier",
																								"src": "3170:5:10"
																							}
																						],
																						"functionName": {
																							"name": "iszero",
																							"nodeType": "YulIdentifier",
																							"src": "3163:6:10"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "3163:13:10"
																					}
																				],
																				"functionName": {
																					"name": "iszero",
																					"nodeType": "YulIdentifier",
																					"src": "3156:6:10"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "3156:21:10"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "3146:2:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3146:32:10"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "3139:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "3139:40:10"
															},
															"nodeType": "YulIf",
															"src": "3136:60:10"
														},
														{
															"nodeType": "YulAssignment",
															"src": "3205:15:10",
															"value": {
																"name": "value",
																"nodeType": "YulIdentifier",
																"src": "3215:5:10"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nodeType": "YulIdentifier",
																	"src": "3205:6:10"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_bool",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "2921:9:10",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "2932:7:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "2944:6:10",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "2952:6:10",
														"type": ""
													}
												],
												"src": "2879:347:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3263:95:10",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3280:1:10",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3287:3:10",
																				"type": "",
																				"value": "224"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3292:10:10",
																				"type": "",
																				"value": "0x4e487b71"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "3283:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3283:20:10"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3273:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "3273:31:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3273:31:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3320:1:10",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3323:4:10",
																		"type": "",
																		"value": "0x41"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3313:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "3313:15:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3313:15:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3344:1:10",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3347:4:10",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "3337:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "3337:15:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3337:15:10"
														}
													]
												},
												"name": "panic_error_0x41",
												"nodeType": "YulFunctionDefinition",
												"src": "3231:127:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3493:1008:10",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "3540:16:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "3549:1:10",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "3552:1:10",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "3542:6:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "3542:12:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "3542:12:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "3514:7:10"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3523:9:10"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "3510:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3510:23:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3535:3:10",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "3506:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "3506:33:10"
															},
															"nodeType": "YulIf",
															"src": "3503:53:10"
														},
														{
															"nodeType": "YulAssignment",
															"src": "3565:39:10",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "3594:9:10"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address",
																	"nodeType": "YulIdentifier",
																	"src": "3575:18:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "3575:29:10"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "3565:6:10"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "3613:48:10",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3646:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3657:2:10",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3642:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3642:18:10"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address",
																	"nodeType": "YulIdentifier",
																	"src": "3623:18:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "3623:38:10"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nodeType": "YulIdentifier",
																	"src": "3613:6:10"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "3670:42:10",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3697:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3708:2:10",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3693:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3693:18:10"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "3680:12:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "3680:32:10"
															},
															"variableNames": [
																{
																	"name": "value2",
																	"nodeType": "YulIdentifier",
																	"src": "3670:6:10"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "3721:46:10",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3752:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3763:2:10",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3748:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3748:18:10"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "3735:12:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "3735:32:10"
															},
															"variables": [
																{
																	"name": "offset",
																	"nodeType": "YulTypedName",
																	"src": "3725:6:10",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "3776:28:10",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3794:2:10",
																				"type": "",
																				"value": "64"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3798:1:10",
																				"type": "",
																				"value": "1"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "3790:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3790:10:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3802:1:10",
																		"type": "",
																		"value": "1"
																	}
																],
																"functionName": {
																	"name": "sub",
																	"nodeType": "YulIdentifier",
																	"src": "3786:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "3786:18:10"
															},
															"variables": [
																{
																	"name": "_1",
																	"nodeType": "YulTypedName",
																	"src": "3780:2:10",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "3831:16:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "3840:1:10",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "3843:1:10",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "3833:6:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "3833:12:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "3833:12:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "3819:6:10"
																	},
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "3827:2:10"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "3816:2:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "3816:14:10"
															},
															"nodeType": "YulIf",
															"src": "3813:34:10"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "3856:32:10",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "3870:9:10"
																	},
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "3881:6:10"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "3866:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "3866:22:10"
															},
															"variables": [
																{
																	"name": "_2",
																	"nodeType": "YulTypedName",
																	"src": "3860:2:10",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "3936:16:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "3945:1:10",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "3948:1:10",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "3938:6:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "3938:12:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "3938:12:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "_2",
																						"nodeType": "YulIdentifier",
																						"src": "3915:2:10"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "3919:4:10",
																						"type": "",
																						"value": "0x1f"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "3911:3:10"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "3911:13:10"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "3926:7:10"
																			}
																		],
																		"functionName": {
																			"name": "slt",
																			"nodeType": "YulIdentifier",
																			"src": "3907:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3907:27:10"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "3900:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "3900:35:10"
															},
															"nodeType": "YulIf",
															"src": "3897:55:10"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "3961:26:10",
															"value": {
																"arguments": [
																	{
																		"name": "_2",
																		"nodeType": "YulIdentifier",
																		"src": "3984:2:10"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "3971:12:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "3971:16:10"
															},
															"variables": [
																{
																	"name": "_3",
																	"nodeType": "YulTypedName",
																	"src": "3965:2:10",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "4010:22:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x41",
																				"nodeType": "YulIdentifier",
																				"src": "4012:16:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "4012:18:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "4012:18:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "_3",
																		"nodeType": "YulIdentifier",
																		"src": "4002:2:10"
																	},
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "4006:2:10"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "3999:2:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "3999:10:10"
															},
															"nodeType": "YulIf",
															"src": "3996:36:10"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "4041:17:10",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4055:2:10",
																		"type": "",
																		"value": "31"
																	}
																],
																"functionName": {
																	"name": "not",
																	"nodeType": "YulIdentifier",
																	"src": "4051:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "4051:7:10"
															},
															"variables": [
																{
																	"name": "_4",
																	"nodeType": "YulTypedName",
																	"src": "4045:2:10",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "4067:23:10",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4087:2:10",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "4081:5:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "4081:9:10"
															},
															"variables": [
																{
																	"name": "memPtr",
																	"nodeType": "YulTypedName",
																	"src": "4071:6:10",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "4099:71:10",
															"value": {
																"arguments": [
																	{
																		"name": "memPtr",
																		"nodeType": "YulIdentifier",
																		"src": "4121:6:10"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"arguments": [
																									{
																										"name": "_3",
																										"nodeType": "YulIdentifier",
																										"src": "4145:2:10"
																									},
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "4149:4:10",
																										"type": "",
																										"value": "0x1f"
																									}
																								],
																								"functionName": {
																									"name": "add",
																									"nodeType": "YulIdentifier",
																									"src": "4141:3:10"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "4141:13:10"
																							},
																							{
																								"name": "_4",
																								"nodeType": "YulIdentifier",
																								"src": "4156:2:10"
																							}
																						],
																						"functionName": {
																							"name": "and",
																							"nodeType": "YulIdentifier",
																							"src": "4137:3:10"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "4137:22:10"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "4161:2:10",
																						"type": "",
																						"value": "63"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "4133:3:10"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "4133:31:10"
																			},
																			{
																				"name": "_4",
																				"nodeType": "YulIdentifier",
																				"src": "4166:2:10"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "4129:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4129:40:10"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "4117:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "4117:53:10"
															},
															"variables": [
																{
																	"name": "newFreePtr",
																	"nodeType": "YulTypedName",
																	"src": "4103:10:10",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "4229:22:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x41",
																				"nodeType": "YulIdentifier",
																				"src": "4231:16:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "4231:18:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "4231:18:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "newFreePtr",
																				"nodeType": "YulIdentifier",
																				"src": "4188:10:10"
																			},
																			{
																				"name": "_1",
																				"nodeType": "YulIdentifier",
																				"src": "4200:2:10"
																			}
																		],
																		"functionName": {
																			"name": "gt",
																			"nodeType": "YulIdentifier",
																			"src": "4185:2:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4185:18:10"
																	},
																	{
																		"arguments": [
																			{
																				"name": "newFreePtr",
																				"nodeType": "YulIdentifier",
																				"src": "4208:10:10"
																			},
																			{
																				"name": "memPtr",
																				"nodeType": "YulIdentifier",
																				"src": "4220:6:10"
																			}
																		],
																		"functionName": {
																			"name": "lt",
																			"nodeType": "YulIdentifier",
																			"src": "4205:2:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4205:22:10"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "4182:2:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "4182:46:10"
															},
															"nodeType": "YulIf",
															"src": "4179:72:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4267:2:10",
																		"type": "",
																		"value": "64"
																	},
																	{
																		"name": "newFreePtr",
																		"nodeType": "YulIdentifier",
																		"src": "4271:10:10"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4260:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "4260:22:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4260:22:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "memPtr",
																		"nodeType": "YulIdentifier",
																		"src": "4298:6:10"
																	},
																	{
																		"name": "_3",
																		"nodeType": "YulIdentifier",
																		"src": "4306:2:10"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4291:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "4291:18:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4291:18:10"
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "4355:16:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "4364:1:10",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "4367:1:10",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "4357:6:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "4357:12:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "4357:12:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "_2",
																						"nodeType": "YulIdentifier",
																						"src": "4332:2:10"
																					},
																					{
																						"name": "_3",
																						"nodeType": "YulIdentifier",
																						"src": "4336:2:10"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "4328:3:10"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "4328:11:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4341:2:10",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4324:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4324:20:10"
																	},
																	{
																		"name": "dataEnd",
																		"nodeType": "YulIdentifier",
																		"src": "4346:7:10"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "4321:2:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "4321:33:10"
															},
															"nodeType": "YulIf",
															"src": "4318:53:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "memPtr",
																				"nodeType": "YulIdentifier",
																				"src": "4397:6:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4405:2:10",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4393:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4393:15:10"
																	},
																	{
																		"arguments": [
																			{
																				"name": "_2",
																				"nodeType": "YulIdentifier",
																				"src": "4414:2:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4418:2:10",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4410:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4410:11:10"
																	},
																	{
																		"name": "_3",
																		"nodeType": "YulIdentifier",
																		"src": "4423:2:10"
																	}
																],
																"functionName": {
																	"name": "calldatacopy",
																	"nodeType": "YulIdentifier",
																	"src": "4380:12:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "4380:46:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4380:46:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "memPtr",
																						"nodeType": "YulIdentifier",
																						"src": "4450:6:10"
																					},
																					{
																						"name": "_3",
																						"nodeType": "YulIdentifier",
																						"src": "4458:2:10"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "4446:3:10"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "4446:15:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4463:2:10",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4442:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4442:24:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4468:1:10",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4435:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "4435:35:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4435:35:10"
														},
														{
															"nodeType": "YulAssignment",
															"src": "4479:16:10",
															"value": {
																"name": "memPtr",
																"nodeType": "YulIdentifier",
																"src": "4489:6:10"
															},
															"variableNames": [
																{
																	"name": "value3",
																	"nodeType": "YulIdentifier",
																	"src": "4479:6:10"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_addresst_uint256t_bytes_memory_ptr",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "3435:9:10",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "3446:7:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "3458:6:10",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "3466:6:10",
														"type": ""
													},
													{
														"name": "value2",
														"nodeType": "YulTypedName",
														"src": "3474:6:10",
														"type": ""
													},
													{
														"name": "value3",
														"nodeType": "YulTypedName",
														"src": "3482:6:10",
														"type": ""
													}
												],
												"src": "3363:1138:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4593:173:10",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "4639:16:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "4648:1:10",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "4651:1:10",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "4641:6:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "4641:12:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "4641:12:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "4614:7:10"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4623:9:10"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "4610:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4610:23:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4635:2:10",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "4606:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "4606:32:10"
															},
															"nodeType": "YulIf",
															"src": "4603:52:10"
														},
														{
															"nodeType": "YulAssignment",
															"src": "4664:39:10",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4693:9:10"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address",
																	"nodeType": "YulIdentifier",
																	"src": "4674:18:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "4674:29:10"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "4664:6:10"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "4712:48:10",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4745:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4756:2:10",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4741:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4741:18:10"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address",
																	"nodeType": "YulIdentifier",
																	"src": "4722:18:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "4722:38:10"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nodeType": "YulIdentifier",
																	"src": "4712:6:10"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "4551:9:10",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "4562:7:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "4574:6:10",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "4582:6:10",
														"type": ""
													}
												],
												"src": "4506:260:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4826:325:10",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "4836:22:10",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4850:1:10",
																		"type": "",
																		"value": "1"
																	},
																	{
																		"name": "data",
																		"nodeType": "YulIdentifier",
																		"src": "4853:4:10"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "4846:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "4846:12:10"
															},
															"variableNames": [
																{
																	"name": "length",
																	"nodeType": "YulIdentifier",
																	"src": "4836:6:10"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "4867:38:10",
															"value": {
																"arguments": [
																	{
																		"name": "data",
																		"nodeType": "YulIdentifier",
																		"src": "4897:4:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4903:1:10",
																		"type": "",
																		"value": "1"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nodeType": "YulIdentifier",
																	"src": "4893:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "4893:12:10"
															},
															"variables": [
																{
																	"name": "outOfPlaceEncoding",
																	"nodeType": "YulTypedName",
																	"src": "4871:18:10",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "4944:31:10",
																"statements": [
																	{
																		"nodeType": "YulAssignment",
																		"src": "4946:27:10",
																		"value": {
																			"arguments": [
																				{
																					"name": "length",
																					"nodeType": "YulIdentifier",
																					"src": "4960:6:10"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "4968:4:10",
																					"type": "",
																					"value": "0x7f"
																				}
																			],
																			"functionName": {
																				"name": "and",
																				"nodeType": "YulIdentifier",
																				"src": "4956:3:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "4956:17:10"
																		},
																		"variableNames": [
																			{
																				"name": "length",
																				"nodeType": "YulIdentifier",
																				"src": "4946:6:10"
																			}
																		]
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "outOfPlaceEncoding",
																		"nodeType": "YulIdentifier",
																		"src": "4924:18:10"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "4917:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "4917:26:10"
															},
															"nodeType": "YulIf",
															"src": "4914:61:10"
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "5034:111:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "5055:1:10",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"arguments": [
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "5062:3:10",
																							"type": "",
																							"value": "224"
																						},
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "5067:10:10",
																							"type": "",
																							"value": "0x4e487b71"
																						}
																					],
																					"functionName": {
																						"name": "shl",
																						"nodeType": "YulIdentifier",
																						"src": "5058:3:10"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "5058:20:10"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "5048:6:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "5048:31:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "5048:31:10"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "5099:1:10",
																					"type": "",
																					"value": "4"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "5102:4:10",
																					"type": "",
																					"value": "0x22"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "5092:6:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "5092:15:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "5092:15:10"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "5127:1:10",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "5130:4:10",
																					"type": "",
																					"value": "0x24"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "5120:6:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "5120:15:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "5120:15:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "outOfPlaceEncoding",
																		"nodeType": "YulIdentifier",
																		"src": "4990:18:10"
																	},
																	{
																		"arguments": [
																			{
																				"name": "length",
																				"nodeType": "YulIdentifier",
																				"src": "5013:6:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5021:2:10",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "lt",
																			"nodeType": "YulIdentifier",
																			"src": "5010:2:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5010:14:10"
																	}
																],
																"functionName": {
																	"name": "eq",
																	"nodeType": "YulIdentifier",
																	"src": "4987:2:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "4987:38:10"
															},
															"nodeType": "YulIf",
															"src": "4984:161:10"
														}
													]
												},
												"name": "extract_byte_array_length",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "data",
														"nodeType": "YulTypedName",
														"src": "4806:4:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "4815:6:10",
														"type": ""
													}
												],
												"src": "4771:380:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "5330:224:10",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "5347:9:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5358:2:10",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5340:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "5340:21:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5340:21:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5381:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5392:2:10",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5377:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5377:18:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5397:2:10",
																		"type": "",
																		"value": "34"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5370:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "5370:30:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5370:30:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5420:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5431:2:10",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5416:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5416:18:10"
																	},
																	{
																		"hexValue": "4c50546f6b656e3a20617070726f76616c20746f2063757272656e74206f776e",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "5436:34:10",
																		"type": "",
																		"value": "LPToken: approval to current own"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5409:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "5409:62:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5409:62:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5491:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5502:2:10",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5487:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5487:18:10"
																	},
																	{
																		"hexValue": "6572",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "5507:4:10",
																		"type": "",
																		"value": "er"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5480:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "5480:32:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5480:32:10"
														},
														{
															"nodeType": "YulAssignment",
															"src": "5521:27:10",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "5533:9:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5544:3:10",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "5529:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "5529:19:10"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "5521:4:10"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_9210b42866450f064f5c8ec9ce98d17f9fb7cc05dedf8125e9046199846ae43d__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "5307:9:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "5321:4:10",
														"type": ""
													}
												],
												"src": "5156:398:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "5733:252:10",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "5750:9:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5761:2:10",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5743:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "5743:21:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5743:21:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5784:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5795:2:10",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5780:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5780:18:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5800:2:10",
																		"type": "",
																		"value": "62"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5773:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "5773:30:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5773:30:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5823:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5834:2:10",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5819:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5819:18:10"
																	},
																	{
																		"hexValue": "4c50546f6b656e3a20617070726f76652063616c6c6572206973206e6f742074",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "5839:34:10",
																		"type": "",
																		"value": "LPToken: approve caller is not t"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5812:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "5812:62:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5812:62:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5894:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5905:2:10",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5890:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5890:18:10"
																	},
																	{
																		"hexValue": "6f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "5910:32:10",
																		"type": "",
																		"value": "oken owner or approved for all"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5883:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "5883:60:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5883:60:10"
														},
														{
															"nodeType": "YulAssignment",
															"src": "5952:27:10",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "5964:9:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5975:3:10",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "5960:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "5960:19:10"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "5952:4:10"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_ef1298a7174f188e1119a85bd9a0cda763120d85cfd0dbe8ef81a425bd78189f__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "5710:9:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "5724:4:10",
														"type": ""
													}
												],
												"src": "5559:426:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "6164:236:10",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "6181:9:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6192:2:10",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6174:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "6174:21:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6174:21:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "6215:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6226:2:10",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "6211:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6211:18:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6231:2:10",
																		"type": "",
																		"value": "46"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6204:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "6204:30:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6204:30:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "6254:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6265:2:10",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "6250:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6250:18:10"
																	},
																	{
																		"hexValue": "4c50546f6b656e3a2063616c6c6572206973206e6f7420746f6b656e206f776e",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "6270:34:10",
																		"type": "",
																		"value": "LPToken: caller is not token own"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6243:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "6243:62:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6243:62:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "6325:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6336:2:10",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "6321:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6321:18:10"
																	},
																	{
																		"hexValue": "6572206f7220617070726f766564",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "6341:16:10",
																		"type": "",
																		"value": "er or approved"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6314:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "6314:44:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6314:44:10"
														},
														{
															"nodeType": "YulAssignment",
															"src": "6367:27:10",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "6379:9:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6390:3:10",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "6375:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "6375:19:10"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "6367:4:10"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_a5ffe5dde529c790f4d4d30827fab7c2daf9e1a22354adadcc2286d93abb4b98__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "6141:9:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "6155:4:10",
														"type": ""
													}
												],
												"src": "5990:410:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "6579:175:10",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "6596:9:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6607:2:10",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6589:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "6589:21:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6589:21:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "6630:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6641:2:10",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "6626:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6626:18:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6646:2:10",
																		"type": "",
																		"value": "25"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6619:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "6619:30:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6619:30:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "6669:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6680:2:10",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "6665:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6665:18:10"
																	},
																	{
																		"hexValue": "4c50546f6b656e3a20696e76616c696420746f6b656e204944",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "6685:27:10",
																		"type": "",
																		"value": "LPToken: invalid token ID"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6658:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "6658:55:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6658:55:10"
														},
														{
															"nodeType": "YulAssignment",
															"src": "6722:26:10",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "6734:9:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6745:2:10",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "6730:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "6730:18:10"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "6722:4:10"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_0de948d3f2800070ee485cb4e6ddea363a22e035a4bbf48d8192e08bacbc4871__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "6556:9:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "6570:4:10",
														"type": ""
													}
												],
												"src": "6405:349:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "6933:232:10",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "6950:9:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6961:2:10",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6943:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "6943:21:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6943:21:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "6984:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6995:2:10",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "6980:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6980:18:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7000:2:10",
																		"type": "",
																		"value": "42"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6973:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "6973:30:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6973:30:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "7023:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7034:2:10",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "7019:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7019:18:10"
																	},
																	{
																		"hexValue": "4c50546f6b656e3a2061646472657373207a65726f206973206e6f7420612076",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "7039:34:10",
																		"type": "",
																		"value": "LPToken: address zero is not a v"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "7012:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "7012:62:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7012:62:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "7094:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7105:2:10",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "7090:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7090:18:10"
																	},
																	{
																		"hexValue": "616c6964206f776e6572",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "7110:12:10",
																		"type": "",
																		"value": "alid owner"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "7083:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "7083:40:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7083:40:10"
														},
														{
															"nodeType": "YulAssignment",
															"src": "7132:27:10",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "7144:9:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7155:3:10",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "7140:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "7140:19:10"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "7132:4:10"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_90d40f4b500dad131a37c48a1929541c0dc77a82fa018c908d230f38021fe37d__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "6910:9:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "6924:4:10",
														"type": ""
													}
												],
												"src": "6759:406:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "7357:283:10",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "7367:27:10",
															"value": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "7387:6:10"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "7381:5:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "7381:13:10"
															},
															"variables": [
																{
																	"name": "length",
																	"nodeType": "YulTypedName",
																	"src": "7371:6:10",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nodeType": "YulIdentifier",
																				"src": "7429:6:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7437:4:10",
																				"type": "",
																				"value": "0x20"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "7425:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7425:17:10"
																	},
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "7444:3:10"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "7449:6:10"
																	}
																],
																"functionName": {
																	"name": "copy_memory_to_memory",
																	"nodeType": "YulIdentifier",
																	"src": "7403:21:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "7403:53:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7403:53:10"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "7465:29:10",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "7482:3:10"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "7487:6:10"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "7478:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "7478:16:10"
															},
															"variables": [
																{
																	"name": "end_1",
																	"nodeType": "YulTypedName",
																	"src": "7469:5:10",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "7503:29:10",
															"value": {
																"arguments": [
																	{
																		"name": "value1",
																		"nodeType": "YulIdentifier",
																		"src": "7525:6:10"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "7519:5:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "7519:13:10"
															},
															"variables": [
																{
																	"name": "length_1",
																	"nodeType": "YulTypedName",
																	"src": "7507:8:10",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value1",
																				"nodeType": "YulIdentifier",
																				"src": "7567:6:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7575:4:10",
																				"type": "",
																				"value": "0x20"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "7563:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7563:17:10"
																	},
																	{
																		"name": "end_1",
																		"nodeType": "YulIdentifier",
																		"src": "7582:5:10"
																	},
																	{
																		"name": "length_1",
																		"nodeType": "YulIdentifier",
																		"src": "7589:8:10"
																	}
																],
																"functionName": {
																	"name": "copy_memory_to_memory",
																	"nodeType": "YulIdentifier",
																	"src": "7541:21:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "7541:57:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7541:57:10"
														},
														{
															"nodeType": "YulAssignment",
															"src": "7607:27:10",
															"value": {
																"arguments": [
																	{
																		"name": "end_1",
																		"nodeType": "YulIdentifier",
																		"src": "7618:5:10"
																	},
																	{
																		"name": "length_1",
																		"nodeType": "YulIdentifier",
																		"src": "7625:8:10"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "7614:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "7614:20:10"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nodeType": "YulIdentifier",
																	"src": "7607:3:10"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_packed_t_string_memory_ptr_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "7325:3:10",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "7330:6:10",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "7338:6:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "7349:3:10",
														"type": ""
													}
												],
												"src": "7170:470:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "7819:228:10",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "7836:9:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7847:2:10",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "7829:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "7829:21:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7829:21:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "7870:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7881:2:10",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "7866:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7866:18:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7886:2:10",
																		"type": "",
																		"value": "38"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "7859:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "7859:30:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7859:30:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "7909:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7920:2:10",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "7905:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7905:18:10"
																	},
																	{
																		"hexValue": "4c50546f6b656e3a207472616e736665722066726f6d20696e636f7272656374",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "7925:34:10",
																		"type": "",
																		"value": "LPToken: transfer from incorrect"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "7898:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "7898:62:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7898:62:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "7980:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7991:2:10",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "7976:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7976:18:10"
																	},
																	{
																		"hexValue": "206f776e6572",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "7996:8:10",
																		"type": "",
																		"value": " owner"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "7969:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "7969:36:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7969:36:10"
														},
														{
															"nodeType": "YulAssignment",
															"src": "8014:27:10",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "8026:9:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8037:3:10",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "8022:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "8022:19:10"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "8014:4:10"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_1aba4d9565a9de9dd59a7e784dc928dd411203bc337af1a5bf922f3c2b5c7c83__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "7796:9:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "7810:4:10",
														"type": ""
													}
												],
												"src": "7645:402:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "8226:227:10",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "8243:9:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8254:2:10",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "8236:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "8236:21:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8236:21:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "8277:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "8288:2:10",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "8273:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8273:18:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8293:2:10",
																		"type": "",
																		"value": "37"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "8266:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "8266:30:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8266:30:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "8316:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "8327:2:10",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "8312:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8312:18:10"
																	},
																	{
																		"hexValue": "4c50546f6b656e3a207472616e7366657220746f20746865207a65726f206164",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "8332:34:10",
																		"type": "",
																		"value": "LPToken: transfer to the zero ad"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "8305:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "8305:62:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8305:62:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "8387:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "8398:2:10",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "8383:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8383:18:10"
																	},
																	{
																		"hexValue": "6472657373",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "8403:7:10",
																		"type": "",
																		"value": "dress"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "8376:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "8376:35:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8376:35:10"
														},
														{
															"nodeType": "YulAssignment",
															"src": "8420:27:10",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "8432:9:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8443:3:10",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "8428:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "8428:19:10"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "8420:4:10"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_7840becadfba5bfbf80c756d51d1daf6c018ee83ae5dc9914c9f5798baf751bc__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "8203:9:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "8217:4:10",
														"type": ""
													}
												],
												"src": "8052:401:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "8632:227:10",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "8649:9:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8660:2:10",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "8642:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "8642:21:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8642:21:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "8683:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "8694:2:10",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "8679:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8679:18:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8699:2:10",
																		"type": "",
																		"value": "37"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "8672:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "8672:30:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8672:30:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "8722:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "8733:2:10",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "8718:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8718:18:10"
																	},
																	{
																		"hexValue": "4552433732313a207472616e736665722066726f6d20696e636f727265637420",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "8738:34:10",
																		"type": "",
																		"value": "ERC721: transfer from incorrect "
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "8711:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "8711:62:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8711:62:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "8793:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "8804:2:10",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "8789:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8789:18:10"
																	},
																	{
																		"hexValue": "6f776e6572",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "8809:7:10",
																		"type": "",
																		"value": "owner"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "8782:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "8782:35:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8782:35:10"
														},
														{
															"nodeType": "YulAssignment",
															"src": "8826:27:10",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "8838:9:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8849:3:10",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "8834:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "8834:19:10"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "8826:4:10"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "8609:9:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "8623:4:10",
														"type": ""
													}
												],
												"src": "8458:401:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "9038:176:10",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "9055:9:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9066:2:10",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "9048:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "9048:21:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "9048:21:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "9089:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "9100:2:10",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "9085:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "9085:18:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9105:2:10",
																		"type": "",
																		"value": "26"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "9078:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "9078:30:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "9078:30:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "9128:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "9139:2:10",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "9124:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "9124:18:10"
																	},
																	{
																		"hexValue": "4c50546f6b656e3a20617070726f766520746f2063616c6c6572",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "9144:28:10",
																		"type": "",
																		"value": "LPToken: approve to caller"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "9117:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "9117:56:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "9117:56:10"
														},
														{
															"nodeType": "YulAssignment",
															"src": "9182:26:10",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "9194:9:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9205:2:10",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "9190:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "9190:18:10"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "9182:4:10"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_a5ddc949369cb9b92239d895735ce26ab946db281ce04465e00baecb5de369c0__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "9015:9:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "9029:4:10",
														"type": ""
													}
												],
												"src": "8864:350:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "9393:241:10",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "9410:9:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9421:2:10",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "9403:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "9403:21:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "9403:21:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "9444:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "9455:2:10",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "9440:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "9440:18:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9460:2:10",
																		"type": "",
																		"value": "51"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "9433:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "9433:30:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "9433:30:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "9483:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "9494:2:10",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "9479:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "9479:18:10"
																	},
																	{
																		"hexValue": "4c50546f6b656e3a207472616e7366657220746f206e6f6e2045524337323152",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "9499:34:10",
																		"type": "",
																		"value": "LPToken: transfer to non ERC721R"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "9472:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "9472:62:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "9472:62:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "9554:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "9565:2:10",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "9550:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "9550:18:10"
																	},
																	{
																		"hexValue": "6563656976657220696d706c656d656e746572",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "9570:21:10",
																		"type": "",
																		"value": "eceiver implementer"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "9543:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "9543:49:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "9543:49:10"
														},
														{
															"nodeType": "YulAssignment",
															"src": "9601:27:10",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "9613:9:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9624:3:10",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "9609:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "9609:19:10"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "9601:4:10"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_cd05f83da6940de4a3075fc9ad85b9137b64610f15df8549468ac7081d15bf47__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "9370:9:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "9384:4:10",
														"type": ""
													}
												],
												"src": "9219:415:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "9671:95:10",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9688:1:10",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "9695:3:10",
																				"type": "",
																				"value": "224"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "9700:10:10",
																				"type": "",
																				"value": "0x4e487b71"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "9691:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "9691:20:10"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "9681:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "9681:31:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "9681:31:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9728:1:10",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9731:4:10",
																		"type": "",
																		"value": "0x12"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "9721:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "9721:15:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "9721:15:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9752:1:10",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9755:4:10",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "9745:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "9745:15:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "9745:15:10"
														}
													]
												},
												"name": "panic_error_0x12",
												"nodeType": "YulFunctionDefinition",
												"src": "9639:127:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "9803:95:10",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9820:1:10",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "9827:3:10",
																				"type": "",
																				"value": "224"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "9832:10:10",
																				"type": "",
																				"value": "0x4e487b71"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "9823:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "9823:20:10"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "9813:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "9813:31:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "9813:31:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9860:1:10",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9863:4:10",
																		"type": "",
																		"value": "0x11"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "9853:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "9853:15:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "9853:15:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9884:1:10",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9887:4:10",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "9877:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "9877:15:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "9877:15:10"
														}
													]
												},
												"name": "panic_error_0x11",
												"nodeType": "YulFunctionDefinition",
												"src": "9771:127:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "9952:76:10",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "9974:22:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x11",
																				"nodeType": "YulIdentifier",
																				"src": "9976:16:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "9976:18:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "9976:18:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "9968:1:10"
																	},
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "9971:1:10"
																	}
																],
																"functionName": {
																	"name": "lt",
																	"nodeType": "YulIdentifier",
																	"src": "9965:2:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "9965:8:10"
															},
															"nodeType": "YulIf",
															"src": "9962:34:10"
														},
														{
															"nodeType": "YulAssignment",
															"src": "10005:17:10",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "10017:1:10"
																	},
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "10020:1:10"
																	}
																],
																"functionName": {
																	"name": "sub",
																	"nodeType": "YulIdentifier",
																	"src": "10013:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "10013:9:10"
															},
															"variableNames": [
																{
																	"name": "diff",
																	"nodeType": "YulIdentifier",
																	"src": "10005:4:10"
																}
															]
														}
													]
												},
												"name": "checked_sub_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nodeType": "YulTypedName",
														"src": "9934:1:10",
														"type": ""
													},
													{
														"name": "y",
														"nodeType": "YulTypedName",
														"src": "9937:1:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "diff",
														"nodeType": "YulTypedName",
														"src": "9943:4:10",
														"type": ""
													}
												],
												"src": "9903:125:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "10081:80:10",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "10108:22:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x11",
																				"nodeType": "YulIdentifier",
																				"src": "10110:16:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "10110:18:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "10110:18:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "10097:1:10"
																	},
																	{
																		"arguments": [
																			{
																				"name": "y",
																				"nodeType": "YulIdentifier",
																				"src": "10104:1:10"
																			}
																		],
																		"functionName": {
																			"name": "not",
																			"nodeType": "YulIdentifier",
																			"src": "10100:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "10100:6:10"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "10094:2:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "10094:13:10"
															},
															"nodeType": "YulIf",
															"src": "10091:39:10"
														},
														{
															"nodeType": "YulAssignment",
															"src": "10139:16:10",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "10150:1:10"
																	},
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "10153:1:10"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "10146:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "10146:9:10"
															},
															"variableNames": [
																{
																	"name": "sum",
																	"nodeType": "YulIdentifier",
																	"src": "10139:3:10"
																}
															]
														}
													]
												},
												"name": "checked_add_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nodeType": "YulTypedName",
														"src": "10064:1:10",
														"type": ""
													},
													{
														"name": "y",
														"nodeType": "YulTypedName",
														"src": "10067:1:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "sum",
														"nodeType": "YulTypedName",
														"src": "10073:3:10",
														"type": ""
													}
												],
												"src": "10033:128:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "10369:286:10",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "10379:29:10",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "10397:3:10",
																				"type": "",
																				"value": "160"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "10402:1:10",
																				"type": "",
																				"value": "1"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "10393:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "10393:11:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "10406:1:10",
																		"type": "",
																		"value": "1"
																	}
																],
																"functionName": {
																	"name": "sub",
																	"nodeType": "YulIdentifier",
																	"src": "10389:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "10389:19:10"
															},
															"variables": [
																{
																	"name": "_1",
																	"nodeType": "YulTypedName",
																	"src": "10383:2:10",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "10424:9:10"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nodeType": "YulIdentifier",
																				"src": "10439:6:10"
																			},
																			{
																				"name": "_1",
																				"nodeType": "YulIdentifier",
																				"src": "10447:2:10"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "10435:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "10435:15:10"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "10417:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "10417:34:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "10417:34:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "10471:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "10482:2:10",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "10467:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "10467:18:10"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value1",
																				"nodeType": "YulIdentifier",
																				"src": "10491:6:10"
																			},
																			{
																				"name": "_1",
																				"nodeType": "YulIdentifier",
																				"src": "10499:2:10"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "10487:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "10487:15:10"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "10460:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "10460:43:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "10460:43:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "10523:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "10534:2:10",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "10519:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "10519:18:10"
																	},
																	{
																		"name": "value2",
																		"nodeType": "YulIdentifier",
																		"src": "10539:6:10"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "10512:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "10512:34:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "10512:34:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "10566:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "10577:2:10",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "10562:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "10562:18:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "10582:3:10",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "10555:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "10555:31:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "10555:31:10"
														},
														{
															"nodeType": "YulAssignment",
															"src": "10595:54:10",
															"value": {
																"arguments": [
																	{
																		"name": "value3",
																		"nodeType": "YulIdentifier",
																		"src": "10621:6:10"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "10633:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "10644:3:10",
																				"type": "",
																				"value": "128"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "10629:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "10629:19:10"
																	}
																],
																"functionName": {
																	"name": "abi_encode_string",
																	"nodeType": "YulIdentifier",
																	"src": "10603:17:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "10603:46:10"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "10595:4:10"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_address_t_address_t_uint256_t_bytes_memory_ptr__to_t_address_t_address_t_uint256_t_bytes_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "10314:9:10",
														"type": ""
													},
													{
														"name": "value3",
														"nodeType": "YulTypedName",
														"src": "10325:6:10",
														"type": ""
													},
													{
														"name": "value2",
														"nodeType": "YulTypedName",
														"src": "10333:6:10",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "10341:6:10",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "10349:6:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "10360:4:10",
														"type": ""
													}
												],
												"src": "10166:489:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "10740:169:10",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "10786:16:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "10795:1:10",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "10798:1:10",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "10788:6:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "10788:12:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "10788:12:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "10761:7:10"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "10770:9:10"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "10757:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "10757:23:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "10782:2:10",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "10753:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "10753:32:10"
															},
															"nodeType": "YulIf",
															"src": "10750:52:10"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "10811:29:10",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "10830:9:10"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "10824:5:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "10824:16:10"
															},
															"variables": [
																{
																	"name": "value",
																	"nodeType": "YulTypedName",
																	"src": "10815:5:10",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "10873:5:10"
																	}
																],
																"functionName": {
																	"name": "validator_revert_bytes4",
																	"nodeType": "YulIdentifier",
																	"src": "10849:23:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "10849:30:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "10849:30:10"
														},
														{
															"nodeType": "YulAssignment",
															"src": "10888:15:10",
															"value": {
																"name": "value",
																"nodeType": "YulIdentifier",
																"src": "10898:5:10"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "10888:6:10"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_bytes4_fromMemory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "10706:9:10",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "10717:7:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "10729:6:10",
														"type": ""
													}
												],
												"src": "10660:249:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "11088:223:10",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "11105:9:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "11116:2:10",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "11098:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "11098:21:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "11098:21:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "11139:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "11150:2:10",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "11135:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "11135:18:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "11155:2:10",
																		"type": "",
																		"value": "33"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "11128:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "11128:30:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "11128:30:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "11178:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "11189:2:10",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "11174:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "11174:18:10"
																	},
																	{
																		"hexValue": "4c50546f6b656e3a206d696e7420746f20746865207a65726f20616464726573",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "11194:34:10",
																		"type": "",
																		"value": "LPToken: mint to the zero addres"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "11167:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "11167:62:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "11167:62:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "11249:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "11260:2:10",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "11245:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "11245:18:10"
																	},
																	{
																		"hexValue": "73",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "11265:3:10",
																		"type": "",
																		"value": "s"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "11238:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "11238:31:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "11238:31:10"
														},
														{
															"nodeType": "YulAssignment",
															"src": "11278:27:10",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "11290:9:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "11301:3:10",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "11286:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "11286:19:10"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "11278:4:10"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_b68b6da5c73f081fedef6df3c9ac69fef1058ce93b413e644e8b80491cd9bc09__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "11065:9:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "11079:4:10",
														"type": ""
													}
												],
												"src": "10914:397:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "11490:179:10",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "11507:9:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "11518:2:10",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "11500:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "11500:21:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "11500:21:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "11541:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "11552:2:10",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "11537:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "11537:18:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "11557:2:10",
																		"type": "",
																		"value": "29"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "11530:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "11530:30:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "11530:30:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "11580:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "11591:2:10",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "11576:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "11576:18:10"
																	},
																	{
																		"hexValue": "4c50546f6b656e3a20746f6b656e20616c7265616479206d696e746564",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "11596:31:10",
																		"type": "",
																		"value": "LPToken: token already minted"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "11569:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "11569:59:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "11569:59:10"
														},
														{
															"nodeType": "YulAssignment",
															"src": "11637:26:10",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "11649:9:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "11660:2:10",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "11645:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "11645:18:10"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "11637:4:10"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_7d3ee8c74050f4fe83b2ce7d49fd8df823fe5b7a5e9a3d71ecaa16369a4b53cb__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "11467:9:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "11481:4:10",
														"type": ""
													}
												],
												"src": "11316:353:10"
											}
										]
									},
									"contents": "{\n    { }\n    function validator_revert_bytes4(value)\n    {\n        if iszero(eq(value, and(value, shl(224, 0xffffffff)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_bytes4(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_bytes4(value)\n        value0 := value\n    }\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, iszero(iszero(value0)))\n    }\n    function copy_memory_to_memory(src, dst, length)\n    {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        if gt(i, length) { mstore(add(dst, length), 0) }\n    }\n    function abi_encode_string(value, pos) -> end\n    {\n        let length := mload(value)\n        mstore(pos, length)\n        copy_memory_to_memory(add(value, 0x20), add(pos, 0x20), length)\n        end := add(add(pos, and(add(length, 31), not(31))), 0x20)\n    }\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        mstore(headStart, 32)\n        tail := abi_encode_string(value0, add(headStart, 32))\n    }\n    function abi_decode_tuple_t_uint256(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := calldataload(headStart)\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n    function abi_decode_address(offset) -> value\n    {\n        value := calldataload(offset)\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_addresst_uint256(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := calldataload(add(headStart, 32))\n    }\n    function abi_decode_tuple_t_addresst_addresst_uint256(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n        value2 := calldataload(add(headStart, 64))\n    }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_decode_tuple_t_addresst_bool(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        let value := calldataload(add(headStart, 32))\n        if iszero(eq(value, iszero(iszero(value)))) { revert(0, 0) }\n        value1 := value\n    }\n    function panic_error_0x41()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n    function abi_decode_tuple_t_addresst_addresst_uint256t_bytes_memory_ptr(headStart, dataEnd) -> value0, value1, value2, value3\n    {\n        if slt(sub(dataEnd, headStart), 128) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n        value2 := calldataload(add(headStart, 64))\n        let offset := calldataload(add(headStart, 96))\n        let _1 := sub(shl(64, 1), 1)\n        if gt(offset, _1) { revert(0, 0) }\n        let _2 := add(headStart, offset)\n        if iszero(slt(add(_2, 0x1f), dataEnd)) { revert(0, 0) }\n        let _3 := calldataload(_2)\n        if gt(_3, _1) { panic_error_0x41() }\n        let _4 := not(31)\n        let memPtr := mload(64)\n        let newFreePtr := add(memPtr, and(add(and(add(_3, 0x1f), _4), 63), _4))\n        if or(gt(newFreePtr, _1), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n        mstore(memPtr, _3)\n        if gt(add(add(_2, _3), 32), dataEnd) { revert(0, 0) }\n        calldatacopy(add(memPtr, 32), add(_2, 32), _3)\n        mstore(add(add(memPtr, _3), 32), 0)\n        value3 := memPtr\n    }\n    function abi_decode_tuple_t_addresst_address(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n    }\n    function extract_byte_array_length(data) -> length\n    {\n        length := shr(1, data)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n        if eq(outOfPlaceEncoding, lt(length, 32))\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x22)\n            revert(0, 0x24)\n        }\n    }\n    function abi_encode_tuple_t_stringliteral_9210b42866450f064f5c8ec9ce98d17f9fb7cc05dedf8125e9046199846ae43d__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 34)\n        mstore(add(headStart, 64), \"LPToken: approval to current own\")\n        mstore(add(headStart, 96), \"er\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_ef1298a7174f188e1119a85bd9a0cda763120d85cfd0dbe8ef81a425bd78189f__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 62)\n        mstore(add(headStart, 64), \"LPToken: approve caller is not t\")\n        mstore(add(headStart, 96), \"oken owner or approved for all\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_a5ffe5dde529c790f4d4d30827fab7c2daf9e1a22354adadcc2286d93abb4b98__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 46)\n        mstore(add(headStart, 64), \"LPToken: caller is not token own\")\n        mstore(add(headStart, 96), \"er or approved\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_0de948d3f2800070ee485cb4e6ddea363a22e035a4bbf48d8192e08bacbc4871__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 25)\n        mstore(add(headStart, 64), \"LPToken: invalid token ID\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_90d40f4b500dad131a37c48a1929541c0dc77a82fa018c908d230f38021fe37d__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 42)\n        mstore(add(headStart, 64), \"LPToken: address zero is not a v\")\n        mstore(add(headStart, 96), \"alid owner\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_packed_t_string_memory_ptr_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed(pos, value1, value0) -> end\n    {\n        let length := mload(value0)\n        copy_memory_to_memory(add(value0, 0x20), pos, length)\n        let end_1 := add(pos, length)\n        let length_1 := mload(value1)\n        copy_memory_to_memory(add(value1, 0x20), end_1, length_1)\n        end := add(end_1, length_1)\n    }\n    function abi_encode_tuple_t_stringliteral_1aba4d9565a9de9dd59a7e784dc928dd411203bc337af1a5bf922f3c2b5c7c83__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 38)\n        mstore(add(headStart, 64), \"LPToken: transfer from incorrect\")\n        mstore(add(headStart, 96), \" owner\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_7840becadfba5bfbf80c756d51d1daf6c018ee83ae5dc9914c9f5798baf751bc__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 37)\n        mstore(add(headStart, 64), \"LPToken: transfer to the zero ad\")\n        mstore(add(headStart, 96), \"dress\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 37)\n        mstore(add(headStart, 64), \"ERC721: transfer from incorrect \")\n        mstore(add(headStart, 96), \"owner\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_a5ddc949369cb9b92239d895735ce26ab946db281ce04465e00baecb5de369c0__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 26)\n        mstore(add(headStart, 64), \"LPToken: approve to caller\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_cd05f83da6940de4a3075fc9ad85b9137b64610f15df8549468ac7081d15bf47__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 51)\n        mstore(add(headStart, 64), \"LPToken: transfer to non ERC721R\")\n        mstore(add(headStart, 96), \"eceiver implementer\")\n        tail := add(headStart, 128)\n    }\n    function panic_error_0x12()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x12)\n        revert(0, 0x24)\n    }\n    function panic_error_0x11()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n    function checked_sub_t_uint256(x, y) -> diff\n    {\n        if lt(x, y) { panic_error_0x11() }\n        diff := sub(x, y)\n    }\n    function checked_add_t_uint256(x, y) -> sum\n    {\n        if gt(x, not(y)) { panic_error_0x11() }\n        sum := add(x, y)\n    }\n    function abi_encode_tuple_t_address_t_address_t_uint256_t_bytes_memory_ptr__to_t_address_t_address_t_uint256_t_bytes_memory_ptr__fromStack_reversed(headStart, value3, value2, value1, value0) -> tail\n    {\n        let _1 := sub(shl(160, 1), 1)\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), and(value1, _1))\n        mstore(add(headStart, 64), value2)\n        mstore(add(headStart, 96), 128)\n        tail := abi_encode_string(value3, add(headStart, 128))\n    }\n    function abi_decode_tuple_t_bytes4_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := mload(headStart)\n        validator_revert_bytes4(value)\n        value0 := value\n    }\n    function abi_encode_tuple_t_stringliteral_b68b6da5c73f081fedef6df3c9ac69fef1058ce93b413e644e8b80491cd9bc09__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 33)\n        mstore(add(headStart, 64), \"LPToken: mint to the zero addres\")\n        mstore(add(headStart, 96), \"s\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_7d3ee8c74050f4fe83b2ce7d49fd8df823fe5b7a5e9a3d71ecaa16369a4b53cb__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 29)\n        mstore(add(headStart, 64), \"LPToken: token already minted\")\n        tail := add(headStart, 96)\n    }\n}",
									"id": 10,
									"language": "Yul",
									"name": "#utility.yul"
								}
							],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "608060405234801561001057600080fd5b50600436106100d05760003560e01c806301ffc9a7146100d557806306fdde03146100fd578063081812fc14610112578063095ea7b31461013d57806323b872dd1461015257806340c10f191461016557806342842e0e1461017857806342966c681461018b5780636352211e1461019e57806370a08231146101b157806395d89b41146101d2578063a22cb465146101da578063b88d4fde146101ed578063c4d66de814610200578063c87b56dd14610213578063e985e9c514610226575b600080fd5b6100e86100e3366004611008565b610239565b60405190151581526020015b60405180910390f35b61010561028b565b6040516100f4919061107d565b610125610120366004611090565b61031d565b6040516001600160a01b0390911681526020016100f4565b61015061014b3660046110c5565b610344565b005b6101506101603660046110ef565b610460565b6101506101733660046110c5565b610492565b6101506101863660046110ef565b6104b7565b610150610199366004611090565b6104d2565b6101256101ac366004611090565b61051a565b6101c46101bf36600461112b565b61054e565b6040519081526020016100f4565b6101056105d5565b6101506101e8366004611146565b6105e4565b6101506101fb366004611198565b6105ef565b61015061020e36600461112b565b610627565b610105610221366004611090565b610660565b6100e8610234366004611273565b6106d4565b60006001600160e01b031982166380ac58cd60e01b148061026a57506001600160e01b03198216635b5e139f60e01b145b8061028557506301ffc9a760e01b6001600160e01b03198316145b92915050565b60606000805461029a906112a6565b80601f01602080910402602001604051908101604052809291908181526020018280546102c6906112a6565b80156103135780601f106102e857610100808354040283529160200191610313565b820191906000526020600020905b8154815290600101906020018083116102f657829003601f168201915b5050505050905090565b600061032882610702565b506000908152600660205260409020546001600160a01b031690565b600061034f8261051a565b9050806001600160a01b0316836001600160a01b031614156103c35760405162461bcd60e51b815260206004820152602260248201527f4c50546f6b656e3a20617070726f76616c20746f2063757272656e74206f776e60448201526132b960f11b60648201526084015b60405180910390fd5b336001600160a01b03821614806103df57506103df81336106d4565b6104515760405162461bcd60e51b815260206004820152603e60248201527f4c50546f6b656e3a20617070726f76652063616c6c6572206973206e6f74207460448201527f6f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c000060648201526084016103ba565b61045b8383610727565b505050565b61046b335b82610795565b6104875760405162461bcd60e51b81526004016103ba906112e1565b61045b8383836107f4565b6002546001600160a01b031633146104a957600080fd5b6104b382826109d2565b5050565b61045b838383604051806020016040528060008152506105ef565b6002546001600160a01b031633146104e957600080fd5b6104f233610465565b61050e5760405162461bcd60e51b81526004016103ba906112e1565b610517816109ec565b50565b60008061052683610a7d565b90506001600160a01b0381166102855760405162461bcd60e51b81526004016103ba9061132f565b60006001600160a01b0382166105b95760405162461bcd60e51b815260206004820152602a60248201527f4c50546f6b656e3a2061646472657373207a65726f206973206e6f742061207660448201526930b634b21037bbb732b960b11b60648201526084016103ba565b506001600160a01b031660009081526005602052604090205490565b60606001805461029a906112a6565b6104b3338383610a98565b6105f93383610795565b6106155760405162461bcd60e51b81526004016103ba906112e1565b61062184848484610b64565b50505050565b6003546001600160a01b0316331461063e57600080fd5b600280546001600160a01b0319166001600160a01b0392909216919091179055565b606061066b82610702565b600061068260408051602081019091526000815290565b905060008151116106a257604051806020016040528060008152506106cd565b806106ac84610b97565b6040516020016106bd929190611362565b6040516020818303038152906040525b9392505050565b6001600160a01b03918216600090815260076020908152604080832093909416825291909152205460ff1690565b61070b81610c33565b6105175760405162461bcd60e51b81526004016103ba9061132f565b600081815260066020526040902080546001600160a01b0319166001600160a01b038416908117909155819061075c8261051a565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000806107a18361051a565b9050806001600160a01b0316846001600160a01b031614806107c857506107c881856106d4565b806107ec5750836001600160a01b03166107e18461031d565b6001600160a01b0316145b949350505050565b826001600160a01b03166108078261051a565b6001600160a01b03161461086c5760405162461bcd60e51b815260206004820152602660248201527f4c50546f6b656e3a207472616e736665722066726f6d20696e636f72726563746044820152651037bbb732b960d11b60648201526084016103ba565b6001600160a01b0382166108d05760405162461bcd60e51b815260206004820152602560248201527f4c50546f6b656e3a207472616e7366657220746f20746865207a65726f206164604482015264647265737360d81b60648201526084016103ba565b6108dd8383836001610c50565b826001600160a01b03166108f08261051a565b6001600160a01b0316146109545760405162461bcd60e51b815260206004820152602560248201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060448201526437bbb732b960d91b60648201526084016103ba565b600081815260066020908152604080832080546001600160a01b03199081169091556001600160a01b0387811680865260058552838620805460001901905590871680865283862080546001019055868652600490945282852080549092168417909155905184936000805160206114bb83398151915291a4505050565b6104b3828260405180602001604052806000815250610cd8565b60006109f78261051a565b9050610a07816000846001610c50565b610a108261051a565b600083815260066020908152604080832080546001600160a01b03199081169091556001600160a01b0385168085526005845282852080546000190190558785526004909352818420805490911690555192935084926000805160206114bb833981519152908390a45050565b6000908152600460205260409020546001600160a01b031690565b816001600160a01b0316836001600160a01b03161415610af75760405162461bcd60e51b815260206004820152601a60248201527926282a37b5b2b71d1030b8383937bb32903a379031b0b63632b960311b60448201526064016103ba565b6001600160a01b03838116600081815260076020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b610b6f8484846107f4565b610b7b84848484610d0b565b6106215760405162461bcd60e51b81526004016103ba90611391565b60606000610ba483610e09565b60010190506000816001600160401b03811115610bc357610bc3611182565b6040519080825280601f01601f191660200182016040528015610bed576020820181803683370190505b5090508181016020015b600019016f181899199a1a9b1b9c1cb0b131b232b360811b600a86061a8153600a8504945084610c2657610c2b565b610bf7565b509392505050565b600080610c3f83610a7d565b6001600160a01b0316141592915050565b6001811115610621576001600160a01b03841615610c96576001600160a01b03841660009081526005602052604081208054839290610c909084906113fa565b90915550505b6001600160a01b03831615610621576001600160a01b03831660009081526005602052604081208054839290610ccd908490611411565b909155505050505050565b610ce28383610edf565b610cef6000848484610d0b565b61045b5760405162461bcd60e51b81526004016103ba90611391565b60006001600160a01b0384163b15610dfe57604051630a85bd0160e11b81526001600160a01b0385169063150b7a0290610d4f903390899088908890600401611429565b6020604051808303816000875af1925050508015610d8a575060408051601f3d908101601f19168201909252610d8791810190611466565b60015b610de4573d808015610db8576040519150601f19603f3d011682016040523d82523d6000602084013e610dbd565b606091505b508051610ddc5760405162461bcd60e51b81526004016103ba90611391565b805181602001fd5b6001600160e01b031916630a85bd0160e11b1490506107ec565b506001949350505050565b60008072184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b8310610e485772184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b830492506040015b6904ee2d6d415b85acef8160201b8310610e72576904ee2d6d415b85acef8160201b830492506020015b662386f26fc100008310610e9057662386f26fc10000830492506010015b6305f5e1008310610ea8576305f5e100830492506008015b6127108310610ebc57612710830492506004015b60648310610ece576064830492506002015b600a83106102855760010192915050565b6001600160a01b038216610f3f5760405162461bcd60e51b815260206004820152602160248201527f4c50546f6b656e3a206d696e7420746f20746865207a65726f206164647265736044820152607360f81b60648201526084016103ba565b610f4881610c33565b15610f655760405162461bcd60e51b81526004016103ba90611483565b610f73600083836001610c50565b610f7c81610c33565b15610f995760405162461bcd60e51b81526004016103ba90611483565b6001600160a01b038216600081815260056020908152604080832080546001019055848352600490915280822080546001600160a01b0319168417905551839291906000805160206114bb833981519152908290a45050565b6001600160e01b03198116811461051757600080fd5b60006020828403121561101a57600080fd5b81356106cd81610ff2565b60005b83811015611040578181015183820152602001611028565b838111156106215750506000910152565b60008151808452611069816020860160208601611025565b601f01601f19169290920160200192915050565b6020815260006106cd6020830184611051565b6000602082840312156110a257600080fd5b5035919050565b80356001600160a01b03811681146110c057600080fd5b919050565b600080604083850312156110d857600080fd5b6110e1836110a9565b946020939093013593505050565b60008060006060848603121561110457600080fd5b61110d846110a9565b925061111b602085016110a9565b9150604084013590509250925092565b60006020828403121561113d57600080fd5b6106cd826110a9565b6000806040838503121561115957600080fd5b611162836110a9565b91506020830135801515811461117757600080fd5b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b600080600080608085870312156111ae57600080fd5b6111b7856110a9565b93506111c5602086016110a9565b92506040850135915060608501356001600160401b03808211156111e857600080fd5b818701915087601f8301126111fc57600080fd5b81358181111561120e5761120e611182565b604051601f8201601f19908116603f0116810190838211818310171561123657611236611182565b816040528281528a602084870101111561124f57600080fd5b82602086016020830137600060208483010152809550505050505092959194509250565b6000806040838503121561128657600080fd5b61128f836110a9565b915061129d602084016110a9565b90509250929050565b600181811c908216806112ba57607f821691505b602082108114156112db57634e487b7160e01b600052602260045260246000fd5b50919050565b6020808252602e908201527f4c50546f6b656e3a2063616c6c6572206973206e6f7420746f6b656e206f776e60408201526d195c881bdc88185c1c1c9bdd995960921b606082015260800190565b6020808252601990820152781314151bdad95b8e881a5b9d985b1a59081d1bdad95b881251603a1b604082015260600190565b60008351611374818460208801611025565b835190830190611388818360208801611025565b01949350505050565b60208082526033908201527f4c50546f6b656e3a207472616e7366657220746f206e6f6e204552433732315260408201527232b1b2b4bb32b91034b6b83632b6b2b73a32b960691b606082015260800190565b634e487b7160e01b600052601160045260246000fd5b60008282101561140c5761140c6113e4565b500390565b60008219821115611424576114246113e4565b500190565b6001600160a01b038581168252841660208201526040810183905260806060820181905260009061145c90830184611051565b9695505050505050565b60006020828403121561147857600080fd5b81516106cd81610ff2565b6020808252601d908201527f4c50546f6b656e3a20746f6b656e20616c7265616479206d696e74656400000060408201526060019056feddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa2646970667358221220dcd4107ecdae1c68fc5ddb541ebfe4982a8137784f4f83acad9aad1b16295bee64736f6c634300080a0033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xD0 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0xD5 JUMPI DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0xFD JUMPI DUP1 PUSH4 0x81812FC EQ PUSH2 0x112 JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x13D JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x152 JUMPI DUP1 PUSH4 0x40C10F19 EQ PUSH2 0x165 JUMPI DUP1 PUSH4 0x42842E0E EQ PUSH2 0x178 JUMPI DUP1 PUSH4 0x42966C68 EQ PUSH2 0x18B JUMPI DUP1 PUSH4 0x6352211E EQ PUSH2 0x19E JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x1B1 JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x1D2 JUMPI DUP1 PUSH4 0xA22CB465 EQ PUSH2 0x1DA JUMPI DUP1 PUSH4 0xB88D4FDE EQ PUSH2 0x1ED JUMPI DUP1 PUSH4 0xC4D66DE8 EQ PUSH2 0x200 JUMPI DUP1 PUSH4 0xC87B56DD EQ PUSH2 0x213 JUMPI DUP1 PUSH4 0xE985E9C5 EQ PUSH2 0x226 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xE8 PUSH2 0xE3 CALLDATASIZE PUSH1 0x4 PUSH2 0x1008 JUMP JUMPDEST PUSH2 0x239 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x105 PUSH2 0x28B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xF4 SWAP2 SWAP1 PUSH2 0x107D JUMP JUMPDEST PUSH2 0x125 PUSH2 0x120 CALLDATASIZE PUSH1 0x4 PUSH2 0x1090 JUMP JUMPDEST PUSH2 0x31D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xF4 JUMP JUMPDEST PUSH2 0x150 PUSH2 0x14B CALLDATASIZE PUSH1 0x4 PUSH2 0x10C5 JUMP JUMPDEST PUSH2 0x344 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x150 PUSH2 0x160 CALLDATASIZE PUSH1 0x4 PUSH2 0x10EF JUMP JUMPDEST PUSH2 0x460 JUMP JUMPDEST PUSH2 0x150 PUSH2 0x173 CALLDATASIZE PUSH1 0x4 PUSH2 0x10C5 JUMP JUMPDEST PUSH2 0x492 JUMP JUMPDEST PUSH2 0x150 PUSH2 0x186 CALLDATASIZE PUSH1 0x4 PUSH2 0x10EF JUMP JUMPDEST PUSH2 0x4B7 JUMP JUMPDEST PUSH2 0x150 PUSH2 0x199 CALLDATASIZE PUSH1 0x4 PUSH2 0x1090 JUMP JUMPDEST PUSH2 0x4D2 JUMP JUMPDEST PUSH2 0x125 PUSH2 0x1AC CALLDATASIZE PUSH1 0x4 PUSH2 0x1090 JUMP JUMPDEST PUSH2 0x51A JUMP JUMPDEST PUSH2 0x1C4 PUSH2 0x1BF CALLDATASIZE PUSH1 0x4 PUSH2 0x112B JUMP JUMPDEST PUSH2 0x54E JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xF4 JUMP JUMPDEST PUSH2 0x105 PUSH2 0x5D5 JUMP JUMPDEST PUSH2 0x150 PUSH2 0x1E8 CALLDATASIZE PUSH1 0x4 PUSH2 0x1146 JUMP JUMPDEST PUSH2 0x5E4 JUMP JUMPDEST PUSH2 0x150 PUSH2 0x1FB CALLDATASIZE PUSH1 0x4 PUSH2 0x1198 JUMP JUMPDEST PUSH2 0x5EF JUMP JUMPDEST PUSH2 0x150 PUSH2 0x20E CALLDATASIZE PUSH1 0x4 PUSH2 0x112B JUMP JUMPDEST PUSH2 0x627 JUMP JUMPDEST PUSH2 0x105 PUSH2 0x221 CALLDATASIZE PUSH1 0x4 PUSH2 0x1090 JUMP JUMPDEST PUSH2 0x660 JUMP JUMPDEST PUSH2 0xE8 PUSH2 0x234 CALLDATASIZE PUSH1 0x4 PUSH2 0x1273 JUMP JUMPDEST PUSH2 0x6D4 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x80AC58CD PUSH1 0xE0 SHL EQ DUP1 PUSH2 0x26A JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x5B5E139F PUSH1 0xE0 SHL EQ JUMPDEST DUP1 PUSH2 0x285 JUMPI POP PUSH4 0x1FFC9A7 PUSH1 0xE0 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP4 AND EQ JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP1 SLOAD PUSH2 0x29A SWAP1 PUSH2 0x12A6 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x2C6 SWAP1 PUSH2 0x12A6 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x313 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x2E8 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x313 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x2F6 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x328 DUP3 PUSH2 0x702 JUMP JUMPDEST POP PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x34F DUP3 PUSH2 0x51A JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO PUSH2 0x3C3 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x22 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4C50546F6B656E3A20617070726F76616C20746F2063757272656E74206F776E PUSH1 0x44 DUP3 ADD MSTORE PUSH2 0x32B9 PUSH1 0xF1 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND EQ DUP1 PUSH2 0x3DF JUMPI POP PUSH2 0x3DF DUP2 CALLER PUSH2 0x6D4 JUMP JUMPDEST PUSH2 0x451 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x3E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4C50546F6B656E3A20617070726F76652063616C6C6572206973206E6F742074 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6F6B656E206F776E6572206F7220617070726F76656420666F7220616C6C0000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x3BA JUMP JUMPDEST PUSH2 0x45B DUP4 DUP4 PUSH2 0x727 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH2 0x46B CALLER JUMPDEST DUP3 PUSH2 0x795 JUMP JUMPDEST PUSH2 0x487 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x3BA SWAP1 PUSH2 0x12E1 JUMP JUMPDEST PUSH2 0x45B DUP4 DUP4 DUP4 PUSH2 0x7F4 JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x4A9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x4B3 DUP3 DUP3 PUSH2 0x9D2 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH2 0x45B DUP4 DUP4 DUP4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x5EF JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x4E9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x4F2 CALLER PUSH2 0x465 JUMP JUMPDEST PUSH2 0x50E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x3BA SWAP1 PUSH2 0x12E1 JUMP JUMPDEST PUSH2 0x517 DUP2 PUSH2 0x9EC JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x526 DUP4 PUSH2 0xA7D JUMP JUMPDEST SWAP1 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x285 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x3BA SWAP1 PUSH2 0x132F JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x5B9 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4C50546F6B656E3A2061646472657373207A65726F206973206E6F7420612076 PUSH1 0x44 DUP3 ADD MSTORE PUSH10 0x30B634B21037BBB732B9 PUSH1 0xB1 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x3BA JUMP JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x1 DUP1 SLOAD PUSH2 0x29A SWAP1 PUSH2 0x12A6 JUMP JUMPDEST PUSH2 0x4B3 CALLER DUP4 DUP4 PUSH2 0xA98 JUMP JUMPDEST PUSH2 0x5F9 CALLER DUP4 PUSH2 0x795 JUMP JUMPDEST PUSH2 0x615 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x3BA SWAP1 PUSH2 0x12E1 JUMP JUMPDEST PUSH2 0x621 DUP5 DUP5 DUP5 DUP5 PUSH2 0xB64 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x3 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x63E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x2 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x60 PUSH2 0x66B DUP3 PUSH2 0x702 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x682 PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP2 ADD SWAP1 SWAP2 MSTORE PUSH1 0x0 DUP2 MSTORE SWAP1 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 MLOAD GT PUSH2 0x6A2 JUMPI PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x6CD JUMP JUMPDEST DUP1 PUSH2 0x6AC DUP5 PUSH2 0xB97 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x6BD SWAP3 SWAP2 SWAP1 PUSH2 0x1362 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH2 0x70B DUP2 PUSH2 0xC33 JUMP JUMPDEST PUSH2 0x517 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x3BA SWAP1 PUSH2 0x132F JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE DUP2 SWAP1 PUSH2 0x75C DUP3 PUSH2 0x51A JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x7A1 DUP4 PUSH2 0x51A JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ DUP1 PUSH2 0x7C8 JUMPI POP PUSH2 0x7C8 DUP2 DUP6 PUSH2 0x6D4 JUMP JUMPDEST DUP1 PUSH2 0x7EC JUMPI POP DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x7E1 DUP5 PUSH2 0x31D JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x807 DUP3 PUSH2 0x51A JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x86C JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4C50546F6B656E3A207472616E736665722066726F6D20696E636F7272656374 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x1037BBB732B9 PUSH1 0xD1 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x3BA JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x8D0 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4C50546F6B656E3A207472616E7366657220746F20746865207A65726F206164 PUSH1 0x44 DUP3 ADD MSTORE PUSH5 0x6472657373 PUSH1 0xD8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x3BA JUMP JUMPDEST PUSH2 0x8DD DUP4 DUP4 DUP4 PUSH1 0x1 PUSH2 0xC50 JUMP JUMPDEST DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x8F0 DUP3 PUSH2 0x51A JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x954 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A207472616E736665722066726F6D20696E636F727265637420 PUSH1 0x44 DUP3 ADD MSTORE PUSH5 0x37BBB732B9 PUSH1 0xD9 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x3BA JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT SWAP1 DUP2 AND SWAP1 SWAP2 SSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 DUP2 AND DUP1 DUP7 MSTORE PUSH1 0x5 DUP6 MSTORE DUP4 DUP7 KECCAK256 DUP1 SLOAD PUSH1 0x0 NOT ADD SWAP1 SSTORE SWAP1 DUP8 AND DUP1 DUP7 MSTORE DUP4 DUP7 KECCAK256 DUP1 SLOAD PUSH1 0x1 ADD SWAP1 SSTORE DUP7 DUP7 MSTORE PUSH1 0x4 SWAP1 SWAP5 MSTORE DUP3 DUP6 KECCAK256 DUP1 SLOAD SWAP1 SWAP3 AND DUP5 OR SWAP1 SWAP2 SSTORE SWAP1 MLOAD DUP5 SWAP4 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x14BB DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP2 LOG4 POP POP POP JUMP JUMPDEST PUSH2 0x4B3 DUP3 DUP3 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0xCD8 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x9F7 DUP3 PUSH2 0x51A JUMP JUMPDEST SWAP1 POP PUSH2 0xA07 DUP2 PUSH1 0x0 DUP5 PUSH1 0x1 PUSH2 0xC50 JUMP JUMPDEST PUSH2 0xA10 DUP3 PUSH2 0x51A JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT SWAP1 DUP2 AND SWAP1 SWAP2 SSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND DUP1 DUP6 MSTORE PUSH1 0x5 DUP5 MSTORE DUP3 DUP6 KECCAK256 DUP1 SLOAD PUSH1 0x0 NOT ADD SWAP1 SSTORE DUP8 DUP6 MSTORE PUSH1 0x4 SWAP1 SWAP4 MSTORE DUP2 DUP5 KECCAK256 DUP1 SLOAD SWAP1 SWAP2 AND SWAP1 SSTORE MLOAD SWAP3 SWAP4 POP DUP5 SWAP3 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x14BB DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP1 DUP4 SWAP1 LOG4 POP POP JUMP JUMPDEST PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO PUSH2 0xAF7 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1A PUSH1 0x24 DUP3 ADD MSTORE PUSH26 0x26282A37B5B2B71D1030B8383937BB32903A379031B0B63632B9 PUSH1 0x31 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x3BA JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP5 DUP8 AND DUP1 DUP5 MSTORE SWAP5 DUP3 MSTORE SWAP2 DUP3 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND DUP7 ISZERO ISZERO SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE SWAP2 MLOAD SWAP2 DUP3 MSTORE PUSH32 0x17307EAB39AB6107E8899845AD3D59BD9653F200F220920489CA2B5937696C31 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH2 0xB6F DUP5 DUP5 DUP5 PUSH2 0x7F4 JUMP JUMPDEST PUSH2 0xB7B DUP5 DUP5 DUP5 DUP5 PUSH2 0xD0B JUMP JUMPDEST PUSH2 0x621 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x3BA SWAP1 PUSH2 0x1391 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH2 0xBA4 DUP4 PUSH2 0xE09 JUMP JUMPDEST PUSH1 0x1 ADD SWAP1 POP PUSH1 0x0 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0xBC3 JUMPI PUSH2 0xBC3 PUSH2 0x1182 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0xBED JUMPI PUSH1 0x20 DUP3 ADD DUP2 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP DUP2 DUP2 ADD PUSH1 0x20 ADD JUMPDEST PUSH1 0x0 NOT ADD PUSH16 0x181899199A1A9B1B9C1CB0B131B232B3 PUSH1 0x81 SHL PUSH1 0xA DUP7 MOD BYTE DUP2 MSTORE8 PUSH1 0xA DUP6 DIV SWAP5 POP DUP5 PUSH2 0xC26 JUMPI PUSH2 0xC2B JUMP JUMPDEST PUSH2 0xBF7 JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0xC3F DUP4 PUSH2 0xA7D JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x621 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND ISZERO PUSH2 0xC96 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD DUP4 SWAP3 SWAP1 PUSH2 0xC90 SWAP1 DUP5 SWAP1 PUSH2 0x13FA JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND ISZERO PUSH2 0x621 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD DUP4 SWAP3 SWAP1 PUSH2 0xCCD SWAP1 DUP5 SWAP1 PUSH2 0x1411 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0xCE2 DUP4 DUP4 PUSH2 0xEDF JUMP JUMPDEST PUSH2 0xCEF PUSH1 0x0 DUP5 DUP5 DUP5 PUSH2 0xD0B JUMP JUMPDEST PUSH2 0x45B JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x3BA SWAP1 PUSH2 0x1391 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND EXTCODESIZE ISZERO PUSH2 0xDFE JUMPI PUSH1 0x40 MLOAD PUSH4 0xA85BD01 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND SWAP1 PUSH4 0x150B7A02 SWAP1 PUSH2 0xD4F SWAP1 CALLER SWAP1 DUP10 SWAP1 DUP9 SWAP1 DUP9 SWAP1 PUSH1 0x4 ADD PUSH2 0x1429 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0xD8A JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0xD87 SWAP2 DUP2 ADD SWAP1 PUSH2 0x1466 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0xDE4 JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0xDB8 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0xDBD JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP DUP1 MLOAD PUSH2 0xDDC JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x3BA SWAP1 PUSH2 0x1391 JUMP JUMPDEST DUP1 MLOAD DUP2 PUSH1 0x20 ADD REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND PUSH4 0xA85BD01 PUSH1 0xE1 SHL EQ SWAP1 POP PUSH2 0x7EC JUMP JUMPDEST POP PUSH1 0x1 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH19 0x184F03E93FF9F4DAA797ED6E38ED64BF6A1F01 PUSH1 0x40 SHL DUP4 LT PUSH2 0xE48 JUMPI PUSH19 0x184F03E93FF9F4DAA797ED6E38ED64BF6A1F01 PUSH1 0x40 SHL DUP4 DIV SWAP3 POP PUSH1 0x40 ADD JUMPDEST PUSH10 0x4EE2D6D415B85ACEF81 PUSH1 0x20 SHL DUP4 LT PUSH2 0xE72 JUMPI PUSH10 0x4EE2D6D415B85ACEF81 PUSH1 0x20 SHL DUP4 DIV SWAP3 POP PUSH1 0x20 ADD JUMPDEST PUSH7 0x2386F26FC10000 DUP4 LT PUSH2 0xE90 JUMPI PUSH7 0x2386F26FC10000 DUP4 DIV SWAP3 POP PUSH1 0x10 ADD JUMPDEST PUSH4 0x5F5E100 DUP4 LT PUSH2 0xEA8 JUMPI PUSH4 0x5F5E100 DUP4 DIV SWAP3 POP PUSH1 0x8 ADD JUMPDEST PUSH2 0x2710 DUP4 LT PUSH2 0xEBC JUMPI PUSH2 0x2710 DUP4 DIV SWAP3 POP PUSH1 0x4 ADD JUMPDEST PUSH1 0x64 DUP4 LT PUSH2 0xECE JUMPI PUSH1 0x64 DUP4 DIV SWAP3 POP PUSH1 0x2 ADD JUMPDEST PUSH1 0xA DUP4 LT PUSH2 0x285 JUMPI PUSH1 0x1 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0xF3F JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x21 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4C50546F6B656E3A206D696E7420746F20746865207A65726F20616464726573 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x73 PUSH1 0xF8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x3BA JUMP JUMPDEST PUSH2 0xF48 DUP2 PUSH2 0xC33 JUMP JUMPDEST ISZERO PUSH2 0xF65 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x3BA SWAP1 PUSH2 0x1483 JUMP JUMPDEST PUSH2 0xF73 PUSH1 0x0 DUP4 DUP4 PUSH1 0x1 PUSH2 0xC50 JUMP JUMPDEST PUSH2 0xF7C DUP2 PUSH2 0xC33 JUMP JUMPDEST ISZERO PUSH2 0xF99 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x3BA SWAP1 PUSH2 0x1483 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP1 SLOAD PUSH1 0x1 ADD SWAP1 SSTORE DUP5 DUP4 MSTORE PUSH1 0x4 SWAP1 SWAP2 MSTORE DUP1 DUP3 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND DUP5 OR SWAP1 SSTORE MLOAD DUP4 SWAP3 SWAP2 SWAP1 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x14BB DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP1 DUP3 SWAP1 LOG4 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND DUP2 EQ PUSH2 0x517 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x101A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x6CD DUP2 PUSH2 0xFF2 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x1040 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x1028 JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0x621 JUMPI POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH2 0x1069 DUP2 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP7 ADD PUSH2 0x1025 JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 PUSH2 0x6CD PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x1051 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x10A2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x10C0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x10D8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x10E1 DUP4 PUSH2 0x10A9 JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x1104 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x110D DUP5 PUSH2 0x10A9 JUMP JUMPDEST SWAP3 POP PUSH2 0x111B PUSH1 0x20 DUP6 ADD PUSH2 0x10A9 JUMP JUMPDEST SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x113D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x6CD DUP3 PUSH2 0x10A9 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1159 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1162 DUP4 PUSH2 0x10A9 JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x1177 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x11AE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x11B7 DUP6 PUSH2 0x10A9 JUMP JUMPDEST SWAP4 POP PUSH2 0x11C5 PUSH1 0x20 DUP7 ADD PUSH2 0x10A9 JUMP JUMPDEST SWAP3 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD SWAP2 POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0x11E8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP8 ADD SWAP2 POP DUP8 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x11FC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0x120E JUMPI PUSH2 0x120E PUSH2 0x1182 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT SWAP1 DUP2 AND PUSH1 0x3F ADD AND DUP2 ADD SWAP1 DUP4 DUP3 GT DUP2 DUP4 LT OR ISZERO PUSH2 0x1236 JUMPI PUSH2 0x1236 PUSH2 0x1182 JUMP JUMPDEST DUP2 PUSH1 0x40 MSTORE DUP3 DUP2 MSTORE DUP11 PUSH1 0x20 DUP5 DUP8 ADD ADD GT ISZERO PUSH2 0x124F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP4 ADD CALLDATACOPY PUSH1 0x0 PUSH1 0x20 DUP5 DUP4 ADD ADD MSTORE DUP1 SWAP6 POP POP POP POP POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1286 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x128F DUP4 PUSH2 0x10A9 JUMP JUMPDEST SWAP2 POP PUSH2 0x129D PUSH1 0x20 DUP5 ADD PUSH2 0x10A9 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0x12BA JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 EQ ISZERO PUSH2 0x12DB JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x2E SWAP1 DUP3 ADD MSTORE PUSH32 0x4C50546F6B656E3A2063616C6C6572206973206E6F7420746F6B656E206F776E PUSH1 0x40 DUP3 ADD MSTORE PUSH14 0x195C881BDC88185C1C1C9BDD9959 PUSH1 0x92 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x19 SWAP1 DUP3 ADD MSTORE PUSH25 0x1314151BDAD95B8E881A5B9D985B1A59081D1BDAD95B881251 PUSH1 0x3A SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP4 MLOAD PUSH2 0x1374 DUP2 DUP5 PUSH1 0x20 DUP9 ADD PUSH2 0x1025 JUMP JUMPDEST DUP4 MLOAD SWAP1 DUP4 ADD SWAP1 PUSH2 0x1388 DUP2 DUP4 PUSH1 0x20 DUP9 ADD PUSH2 0x1025 JUMP JUMPDEST ADD SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x33 SWAP1 DUP3 ADD MSTORE PUSH32 0x4C50546F6B656E3A207472616E7366657220746F206E6F6E2045524337323152 PUSH1 0x40 DUP3 ADD MSTORE PUSH19 0x32B1B2B4BB32B91034B6B83632B6B2B73A32B9 PUSH1 0x69 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP3 DUP3 LT ISZERO PUSH2 0x140C JUMPI PUSH2 0x140C PUSH2 0x13E4 JUMP JUMPDEST POP SUB SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 NOT DUP3 GT ISZERO PUSH2 0x1424 JUMPI PUSH2 0x1424 PUSH2 0x13E4 JUMP JUMPDEST POP ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 DUP2 AND DUP3 MSTORE DUP5 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x80 PUSH1 0x60 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH2 0x145C SWAP1 DUP4 ADD DUP5 PUSH2 0x1051 JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1478 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x6CD DUP2 PUSH2 0xFF2 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x1D SWAP1 DUP3 ADD MSTORE PUSH32 0x4C50546F6B656E3A20746F6B656E20616C7265616479206D696E746564000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP INVALID 0xDD CALLCODE MSTORE 0xAD SHL 0xE2 0xC8 SWAP12 PUSH10 0xC2B068FC378DAA952BA7 CALL PUSH4 0xC4A11628 CREATE2 GAS 0x4D CREATE2 0x23 0xB3 0xEF LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xDC 0xD4 LT PUSH31 0xCDAE1C68FC5DDB541EBFE4982A8137784F4F83ACAD9AAD1B16295BEE64736F PUSH13 0x634300080A0033000000000000 ",
							"sourceMap": "745:16820:9:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2421:300;;;;;;:::i;:::-;;:::i;:::-;;;565:14:10;;558:22;540:41;;528:2;513:18;2421:300:9;;;;;;;;3324:98;;;:::i;:::-;;;;;;;:::i;4791:167::-;;;;;;:::i;:::-;;:::i;:::-;;;-1:-1:-1;;;;;1692:32:10;;;1674:51;;1662:2;1647:18;4791:167:9;1528:203:10;4321:409:9;;;;;;:::i;:::-;;:::i;:::-;;5468:297;;;;;;:::i;:::-;;:::i;2046:106::-;;;;;;:::i;:::-;;:::i;5831:149::-;;;;;;:::i;:::-;;:::i;2158:196::-;;;;;;:::i;:::-;;:::i;3042:220::-;;;;;;:::i;:::-;;:::i;2780:205::-;;;;;;:::i;:::-;;:::i;:::-;;;2843:25:10;;;2831:2;2816:18;2780:205:9;2697:177:10;3486:102:9;;;:::i;5025:153::-;;;;;;:::i;:::-;;:::i;6046:277::-;;;;;;:::i;:::-;;:::i;1946:90::-;;;;;;:::i;:::-;;:::i;3654:276::-;;;;;;:::i;:::-;;:::i;5244:162::-;;;;;;:::i;:::-;;:::i;2421:300::-;2523:4;-1:-1:-1;;;;;;2558:40:9;;-1:-1:-1;;;2558:40:9;;:104;;-1:-1:-1;;;;;;;2614:48:9;;-1:-1:-1;;;2614:48:9;2558:104;:156;;;-1:-1:-1;;;;;;;;;;937:40:6;;;2678:36:9;2539:175;2421:300;-1:-1:-1;;2421:300:9:o;3324:98::-;3378:13;3410:5;3403:12;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3324:98;:::o;4791:167::-;4867:7;4886:23;4901:7;4886:14;:23::i;:::-;-1:-1:-1;4927:24:9;;;;:15;:24;;;;;;-1:-1:-1;;;;;4927:24:9;;4791:167::o;4321:409::-;4401:13;4417:24;4433:7;4417:15;:24::i;:::-;4401:40;;4465:5;-1:-1:-1;;;;;4459:11:9;:2;-1:-1:-1;;;;;4459:11:9;;;4451:58;;;;-1:-1:-1;;;4451:58:9;;5358:2:10;4451:58:9;;;5340:21:10;5397:2;5377:18;;;5370:30;5436:34;5416:18;;;5409:62;-1:-1:-1;;;5487:18:10;;;5480:32;5529:19;;4451:58:9;;;;;;;;;719:10:4;-1:-1:-1;;;;;4541:21:9;;;;:62;;-1:-1:-1;4566:37:9;4583:5;719:10:4;5244:162:9;:::i;4566:37::-;4520:171;;;;-1:-1:-1;;;4520:171:9;;5761:2:10;4520:171:9;;;5743:21:10;5800:2;5780:18;;;5773:30;5839:34;5819:18;;;5812:62;5910:32;5890:18;;;5883:60;5960:19;;4520:171:9;5559:426:10;4520:171:9;4702:21;4711:2;4715:7;4702:8;:21::i;:::-;4391:339;4321:409;;:::o;5468:297::-;5627:41;719:10:4;5646:12:9;5660:7;5627:18;:41::i;:::-;5619:100;;;;-1:-1:-1;;;5619:100:9;;;;;;;:::i;:::-;5730:28;5740:4;5746:2;5750:7;5730:9;:28::i;2046:106::-;1830:5;;-1:-1:-1;;;;;1830:5:9;1816:10;:19;1808:28;;;;;;2123:22:::1;2133:2;2137:7;2123:9;:22::i;:::-;2046:106:::0;;:::o;5831:149::-;5934:39;5951:4;5957:2;5961:7;5934:39;;;;;;;;;;;;:16;:39::i;2158:196::-;1830:5;;-1:-1:-1;;;;;1830:5:9;1816:10;:19;1808:28;;;;;;2231:41:::1;719:10:4::0;2250:12:9::1;640:96:4::0;2231:41:9::1;2223:100;;;;-1:-1:-1::0;;;2223:100:9::1;;;;;;;:::i;:::-;2333:14;2339:7;2333:5;:14::i;:::-;2158:196:::0;:::o;3042:220::-;3114:7;3133:13;3149:17;3158:7;3149:8;:17::i;:::-;3133:33;-1:-1:-1;;;;;;3184:19:9;;3176:57;;;;-1:-1:-1;;;3176:57:9;;;;;;;:::i;2780:205::-;2852:7;-1:-1:-1;;;;;2879:19:9;;2871:74;;;;-1:-1:-1;;;2871:74:9;;6961:2:10;2871:74:9;;;6943:21:10;7000:2;6980:18;;;6973:30;7039:34;7019:18;;;7012:62;-1:-1:-1;;;7090:18:10;;;7083:40;7140:19;;2871:74:9;6759:406:10;2871:74:9;-1:-1:-1;;;;;;2962:16:9;;;;;:9;:16;;;;;;;2780:205::o;3486:102::-;3542:13;3574:7;3567:14;;;;;:::i;5025:153::-;5119:52;719:10:4;5152:8:9;5162;5119:18;:52::i;6046:277::-;6176:41;719:10:4;6209:7:9;6176:18;:41::i;:::-;6168:100;;;;-1:-1:-1;;;6168:100:9;;;;;;;:::i;:::-;6278:38;6292:4;6298:2;6302:7;6311:4;6278:13;:38::i;:::-;6046:277;;;;:::o;1946:90::-;1913:8;;-1:-1:-1;;;;;1913:8:9;1899:10;:22;1891:31;;;;;;2017:5:::1;:12:::0;;-1:-1:-1;;;;;;2017:12:9::1;-1:-1:-1::0;;;;;2017:12:9;;;::::1;::::0;;;::::1;::::0;;1946:90::o;3654:276::-;3727:13;3752:23;3767:7;3752:14;:23::i;:::-;3786:21;3810:10;4248:9;;;;;;;;;-1:-1:-1;4248:9:9;;;4172:92;3810:10;3786:34;;3861:1;3843:7;3837:21;:25;:86;;;;;;;;;;;;;;;;;3889:7;3898:18;:7;:16;:18::i;:::-;3872:45;;;;;;;;;:::i;:::-;;;;;;;;;;;;;3837:86;3830:93;3654:276;-1:-1:-1;;;3654:276:9:o;5244:162::-;-1:-1:-1;;;;;5364:25:9;;;5341:4;5364:25;;;:18;:25;;;;;;;;:35;;;;;;;;;;;;;;;5244:162::o;14112:134::-;14193:16;14201:7;14193;:16::i;:::-;14185:54;;;;-1:-1:-1;;;14185:54:9;;;;;;;:::i;13442:172::-;13516:24;;;;:15;:24;;;;;:29;;-1:-1:-1;;;;;;13516:29:9;-1:-1:-1;;;;;13516:29:9;;;;;;;;:24;;13569;13516;13569:15;:24::i;:::-;-1:-1:-1;;;;;13560:47:9;;;;;;;;;;;13442:172;;:::o;8263:262::-;8356:4;8372:13;8388:24;8404:7;8388:15;:24::i;:::-;8372:40;;8441:5;-1:-1:-1;;;;;8430:16:9;:7;-1:-1:-1;;;;;8430:16:9;;:52;;;;8450:32;8467:5;8474:7;8450:16;:32::i;:::-;8430:87;;;;8510:7;-1:-1:-1;;;;;8486:31:9;:20;8498:7;8486:11;:20::i;:::-;-1:-1:-1;;;;;8486:31:9;;8430:87;8422:96;8263:262;-1:-1:-1;;;;8263:262:9:o;12123:1207::-;12248:4;-1:-1:-1;;;;;12220:32:9;:24;12236:7;12220:15;:24::i;:::-;-1:-1:-1;;;;;12220:32:9;;12212:83;;;;-1:-1:-1;;;12212:83:9;;7847:2:10;12212:83:9;;;7829:21:10;7886:2;7866:18;;;7859:30;7925:34;7905:18;;;7898:62;-1:-1:-1;;;7976:18:10;;;7969:36;8022:19;;12212:83:9;7645:402:10;12212:83:9;-1:-1:-1;;;;;12313:16:9;;12305:66;;;;-1:-1:-1;;;12305:66:9;;8254:2:10;12305:66:9;;;8236:21:10;8293:2;8273:18;;;8266:30;8332:34;8312:18;;;8305:62;-1:-1:-1;;;8383:18:10;;;8376:35;8428:19;;12305:66:9;8052:401:10;12305:66:9;12382:42;12403:4;12409:2;12413:7;12422:1;12382:20;:42::i;:::-;12552:4;-1:-1:-1;;;;;12524:32:9;:24;12540:7;12524:15;:24::i;:::-;-1:-1:-1;;;;;12524:32:9;;12516:82;;;;-1:-1:-1;;;12516:82:9;;8660:2:10;12516:82:9;;;8642:21:10;8699:2;8679:18;;;8672:30;8738:34;8718:18;;;8711:62;-1:-1:-1;;;8789:18:10;;;8782:35;8834:19;;12516:82:9;8458:401:10;12516:82:9;12667:24;;;;:15;:24;;;;;;;;12660:31;;-1:-1:-1;;;;;;12660:31:9;;;;;;-1:-1:-1;;;;;13135:15:9;;;;;;:9;:15;;;;;:20;;-1:-1:-1;;13135:20:9;;;13169:13;;;;;;;;;:18;;12660:31;13169:18;;;13207:16;;;:7;:16;;;;;;:21;;;;;;;;;;13244:27;;12683:7;;-1:-1:-1;;;;;;;;;;;13244:27:9;;4391:339;4321:409;;:::o;8855:108::-;8930:26;8940:2;8944:7;8930:26;;;;;;;;;;;;:9;:26::i;11035:764::-;11094:13;11110:24;11126:7;11110:15;:24::i;:::-;11094:40;;11145:51;11166:5;11181:1;11185:7;11194:1;11145:20;:51::i;:::-;11306:24;11322:7;11306:15;:24::i;:::-;11375;;;;:15;:24;;;;;;;;11368:31;;-1:-1:-1;;;;;;11368:31:9;;;;;;-1:-1:-1;;;;;11615:16:9;;;;;:9;:16;;;;;:21;;-1:-1:-1;;11615:21:9;;;11663:16;;;:7;:16;;;;;;11656:23;;;;;;;11695:36;11298:32;;-1:-1:-1;11391:7:9;;-1:-1:-1;;;;;;;;;;;11695:36:9;11375:24;;11695:36;2046:106;;:::o;7561:115::-;7627:7;7653:16;;;:7;:16;;;;;;-1:-1:-1;;;;;7653:16:9;;7561:115::o;13750:278::-;13870:8;-1:-1:-1;;;;;13861:17:9;:5;-1:-1:-1;;;;;13861:17:9;;;13853:56;;;;-1:-1:-1;;;13853:56:9;;9066:2:10;13853:56:9;;;9048:21:10;9105:2;9085:18;;;9078:30;-1:-1:-1;;;9124:18:10;;;9117:56;9190:18;;13853:56:9;8864:350:10;13853:56:9;-1:-1:-1;;;;;13919:25:9;;;;;;;:18;:25;;;;;;;;:35;;;;;;;;;;;;;:46;;-1:-1:-1;;13919:46:9;;;;;;;;;;13980:41;;540::10;;;13980::9;;513:18:10;13980:41:9;;;;;;;13750:278;;;:::o;7184:268::-;7296:28;7306:4;7312:2;7316:7;7296:9;:28::i;:::-;7342:47;7365:4;7371:2;7375:7;7384:4;7342:22;:47::i;:::-;7334:111;;;;-1:-1:-1;;;7334:111:9;;;;;;;:::i;415:696:5:-;471:13;520:14;537:17;548:5;537:10;:17::i;:::-;557:1;537:21;520:38;;572:20;606:6;-1:-1:-1;;;;;595:18:5;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;595:18:5;-1:-1:-1;572:41:5;-1:-1:-1;733:28:5;;;749:2;733:28;788:280;-1:-1:-1;;819:5:5;-1:-1:-1;;;953:2:5;942:14;;937:30;819:5;924:44;1012:2;1003:11;;;-1:-1:-1;1036:10:5;1032:21;;1048:5;;1032:21;788:280;;;-1:-1:-1;1088:6:5;415:696;-1:-1:-1;;;415:696:5:o;7979:126:9:-;8044:4;;8067:17;8076:7;8067:8;:17::i;:::-;-1:-1:-1;;;;;8067:31:9;;;;7979:126;-1:-1:-1;;7979:126:9:o;16346:396::-;16530:1;16518:9;:13;16514:222;;;-1:-1:-1;;;;;16551:18:9;;;16547:85;;-1:-1:-1;;;;;16589:15:9;;;;;;:9;:15;;;;;:28;;16608:9;;16589:15;:28;;16608:9;;16589:28;:::i;:::-;;;;-1:-1:-1;;16547:85:9;-1:-1:-1;;;;;16649:16:9;;;16645:81;;-1:-1:-1;;;;;16685:13:9;;;;;;:9;:13;;;;;:26;;16702:9;;16685:13;:26;;16702:9;;16685:26;:::i;:::-;;;;-1:-1:-1;;16346:396:9;;;;:::o;9184:280::-;9278:18;9284:2;9288:7;9278:5;:18::i;:::-;9327:53;9358:1;9362:2;9366:7;9375:4;9327:22;:53::i;:::-;9306:151;;;;-1:-1:-1;;;9306:151:9;;;;;;;:::i;14798:832::-;14947:4;-1:-1:-1;;;;;14967:13:9;;1465:19:3;:23;14963:661:9;;15002:71;;-1:-1:-1;;;15002:71:9;;-1:-1:-1;;;;;15002:36:9;;;;;:71;;719:10:4;;15053:4:9;;15059:7;;15068:4;;15002:71;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;-1:-1:-1;15002:71:9;;;;;;;;-1:-1:-1;;15002:71:9;;;;;;;;;;;;:::i;:::-;;;14998:574;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;15240:13:9;;15236:322;;15282:61;;-1:-1:-1;;;15282:61:9;;;;;;;:::i;15236:322::-;15510:6;15504:13;15495:6;15491:2;15487:15;15480:38;14998:574;-1:-1:-1;;;;;;15123:51:9;-1:-1:-1;;;15123:51:9;;-1:-1:-1;15116:58:9;;14963:661;-1:-1:-1;15609:4:9;14798:832;;;;;;:::o;9889:890:8:-;9942:7;;-1:-1:-1;;;10017:15:8;;10013:99;;-1:-1:-1;;;10052:15:8;;;-1:-1:-1;10095:2:8;10085:12;10013:99;-1:-1:-1;;;10129:5:8;:15;10125:99;;-1:-1:-1;;;10164:15:8;;;-1:-1:-1;10207:2:8;10197:12;10125:99;10250:6;10241:5;:15;10237:99;;10285:6;10276:15;;;-1:-1:-1;10319:2:8;10309:12;10237:99;10362:5;10353;:14;10349:96;;10396:5;10387:14;;;-1:-1:-1;10429:1:8;10419:11;10349:96;10471:5;10462;:14;10458:96;;10505:5;10496:14;;;-1:-1:-1;10538:1:8;10528:11;10458:96;10580:5;10571;:14;10567:96;;10614:5;10605:14;;;-1:-1:-1;10647:1:8;10637:11;10567:96;10689:5;10680;:14;10676:64;;10724:1;10714:11;10766:6;9889:890;-1:-1:-1;;9889:890:8:o;9786:923:9:-;-1:-1:-1;;;;;9865:16:9;;9857:62;;;;-1:-1:-1;;;9857:62:9;;11116:2:10;9857:62:9;;;11098:21:10;11155:2;11135:18;;;11128:30;11194:34;11174:18;;;11167:62;-1:-1:-1;;;11245:18:10;;;11238:31;11286:19;;9857:62:9;10914:397:10;9857:62:9;9938:16;9946:7;9938;:16::i;:::-;9937:17;9929:59;;;;-1:-1:-1;;;9929:59:9;;;;;;;:::i;:::-;9999:48;10028:1;10032:2;10036:7;10045:1;9999:20;:48::i;:::-;10143:16;10151:7;10143;:16::i;:::-;10142:17;10134:59;;;;-1:-1:-1;;;10134:59:9;;;;;;;:::i;:::-;-1:-1:-1;;;;;10535:13:9;;;;;;:9;:13;;;;;;;;:18;;10552:1;10535:18;;;10574:16;;;:7;:16;;;;;;:21;;-1:-1:-1;;;;;;10574:21:9;;;;;10611:33;10582:7;;10535:13;;-1:-1:-1;;;;;;;;;;;10611:33:9;10535:13;;10611:33;2046:106;;:::o;14:131:10:-;-1:-1:-1;;;;;;88:32:10;;78:43;;68:71;;135:1;132;125:12;150:245;208:6;261:2;249:9;240:7;236:23;232:32;229:52;;;277:1;274;267:12;229:52;316:9;303:23;335:30;359:5;335:30;:::i;592:258::-;664:1;674:113;688:6;685:1;682:13;674:113;;;764:11;;;758:18;745:11;;;738:39;710:2;703:10;674:113;;;805:6;802:1;799:13;796:48;;;-1:-1:-1;;840:1:10;822:16;;815:27;592:258::o;855:::-;897:3;935:5;929:12;962:6;957:3;950:19;978:63;1034:6;1027:4;1022:3;1018:14;1011:4;1004:5;1000:16;978:63;:::i;:::-;1095:2;1074:15;-1:-1:-1;;1070:29:10;1061:39;;;;1102:4;1057:50;;855:258;-1:-1:-1;;855:258:10:o;1118:220::-;1267:2;1256:9;1249:21;1230:4;1287:45;1328:2;1317:9;1313:18;1305:6;1287:45;:::i;1343:180::-;1402:6;1455:2;1443:9;1434:7;1430:23;1426:32;1423:52;;;1471:1;1468;1461:12;1423:52;-1:-1:-1;1494:23:10;;1343:180;-1:-1:-1;1343:180:10:o;1736:173::-;1804:20;;-1:-1:-1;;;;;1853:31:10;;1843:42;;1833:70;;1899:1;1896;1889:12;1833:70;1736:173;;;:::o;1914:254::-;1982:6;1990;2043:2;2031:9;2022:7;2018:23;2014:32;2011:52;;;2059:1;2056;2049:12;2011:52;2082:29;2101:9;2082:29;:::i;:::-;2072:39;2158:2;2143:18;;;;2130:32;;-1:-1:-1;;;1914:254:10:o;2173:328::-;2250:6;2258;2266;2319:2;2307:9;2298:7;2294:23;2290:32;2287:52;;;2335:1;2332;2325:12;2287:52;2358:29;2377:9;2358:29;:::i;:::-;2348:39;;2406:38;2440:2;2429:9;2425:18;2406:38;:::i;:::-;2396:48;;2491:2;2480:9;2476:18;2463:32;2453:42;;2173:328;;;;;:::o;2506:186::-;2565:6;2618:2;2606:9;2597:7;2593:23;2589:32;2586:52;;;2634:1;2631;2624:12;2586:52;2657:29;2676:9;2657:29;:::i;2879:347::-;2944:6;2952;3005:2;2993:9;2984:7;2980:23;2976:32;2973:52;;;3021:1;3018;3011:12;2973:52;3044:29;3063:9;3044:29;:::i;:::-;3034:39;;3123:2;3112:9;3108:18;3095:32;3170:5;3163:13;3156:21;3149:5;3146:32;3136:60;;3192:1;3189;3182:12;3136:60;3215:5;3205:15;;;2879:347;;;;;:::o;3231:127::-;3292:10;3287:3;3283:20;3280:1;3273:31;3323:4;3320:1;3313:15;3347:4;3344:1;3337:15;3363:1138;3458:6;3466;3474;3482;3535:3;3523:9;3514:7;3510:23;3506:33;3503:53;;;3552:1;3549;3542:12;3503:53;3575:29;3594:9;3575:29;:::i;:::-;3565:39;;3623:38;3657:2;3646:9;3642:18;3623:38;:::i;:::-;3613:48;-1:-1:-1;3708:2:10;3693:18;;3680:32;;-1:-1:-1;3763:2:10;3748:18;;3735:32;-1:-1:-1;;;;;3816:14:10;;;3813:34;;;3843:1;3840;3833:12;3813:34;3881:6;3870:9;3866:22;3856:32;;3926:7;3919:4;3915:2;3911:13;3907:27;3897:55;;3948:1;3945;3938:12;3897:55;3984:2;3971:16;4006:2;4002;3999:10;3996:36;;;4012:18;;:::i;:::-;4087:2;4081:9;4055:2;4141:13;;-1:-1:-1;;4137:22:10;;;4161:2;4133:31;4129:40;4117:53;;;4185:18;;;4205:22;;;4182:46;4179:72;;;4231:18;;:::i;:::-;4271:10;4267:2;4260:22;4306:2;4298:6;4291:18;4346:7;4341:2;4336;4332;4328:11;4324:20;4321:33;4318:53;;;4367:1;4364;4357:12;4318:53;4423:2;4418;4414;4410:11;4405:2;4397:6;4393:15;4380:46;4468:1;4463:2;4458;4450:6;4446:15;4442:24;4435:35;4489:6;4479:16;;;;;;;3363:1138;;;;;;;:::o;4506:260::-;4574:6;4582;4635:2;4623:9;4614:7;4610:23;4606:32;4603:52;;;4651:1;4648;4641:12;4603:52;4674:29;4693:9;4674:29;:::i;:::-;4664:39;;4722:38;4756:2;4745:9;4741:18;4722:38;:::i;:::-;4712:48;;4506:260;;;;;:::o;4771:380::-;4850:1;4846:12;;;;4893;;;4914:61;;4968:4;4960:6;4956:17;4946:27;;4914:61;5021:2;5013:6;5010:14;4990:18;4987:38;4984:161;;;5067:10;5062:3;5058:20;5055:1;5048:31;5102:4;5099:1;5092:15;5130:4;5127:1;5120:15;4984:161;;4771:380;;;:::o;5990:410::-;6192:2;6174:21;;;6231:2;6211:18;;;6204:30;6270:34;6265:2;6250:18;;6243:62;-1:-1:-1;;;6336:2:10;6321:18;;6314:44;6390:3;6375:19;;5990:410::o;6405:349::-;6607:2;6589:21;;;6646:2;6626:18;;;6619:30;-1:-1:-1;;;6680:2:10;6665:18;;6658:55;6745:2;6730:18;;6405:349::o;7170:470::-;7349:3;7387:6;7381:13;7403:53;7449:6;7444:3;7437:4;7429:6;7425:17;7403:53;:::i;:::-;7519:13;;7478:16;;;;7541:57;7519:13;7478:16;7575:4;7563:17;;7541:57;:::i;:::-;7614:20;;7170:470;-1:-1:-1;;;;7170:470:10:o;9219:415::-;9421:2;9403:21;;;9460:2;9440:18;;;9433:30;9499:34;9494:2;9479:18;;9472:62;-1:-1:-1;;;9565:2:10;9550:18;;9543:49;9624:3;9609:19;;9219:415::o;9771:127::-;9832:10;9827:3;9823:20;9820:1;9813:31;9863:4;9860:1;9853:15;9887:4;9884:1;9877:15;9903:125;9943:4;9971:1;9968;9965:8;9962:34;;;9976:18;;:::i;:::-;-1:-1:-1;10013:9:10;;9903:125::o;10033:128::-;10073:3;10104:1;10100:6;10097:1;10094:13;10091:39;;;10110:18;;:::i;:::-;-1:-1:-1;10146:9:10;;10033:128::o;10166:489::-;-1:-1:-1;;;;;10435:15:10;;;10417:34;;10487:15;;10482:2;10467:18;;10460:43;10534:2;10519:18;;10512:34;;;10582:3;10577:2;10562:18;;10555:31;;;10360:4;;10603:46;;10629:19;;10621:6;10603:46;:::i;:::-;10595:54;10166:489;-1:-1:-1;;;;;;10166:489:10:o;10660:249::-;10729:6;10782:2;10770:9;10761:7;10757:23;10753:32;10750:52;;;10798:1;10795;10788:12;10750:52;10830:9;10824:16;10849:30;10873:5;10849:30;:::i;11316:353::-;11518:2;11500:21;;;11557:2;11537:18;;;11530:30;11596:31;11591:2;11576:18;;11569:59;11660:2;11645:18;;11316:353::o"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "1078400",
								"executionCost": "infinite",
								"totalCost": "infinite"
							},
							"external": {
								"approve(address,uint256)": "infinite",
								"balanceOf(address)": "2765",
								"burn(uint256)": "infinite",
								"getApproved(uint256)": "4843",
								"initialize(address)": "26975",
								"isApprovedForAll(address,address)": "infinite",
								"mint(address,uint256)": "infinite",
								"name()": "infinite",
								"ownerOf(uint256)": "2772",
								"safeTransferFrom(address,address,uint256)": "infinite",
								"safeTransferFrom(address,address,uint256,bytes)": "infinite",
								"setApprovalForAll(address,bool)": "26906",
								"supportsInterface(bytes4)": "488",
								"symbol()": "infinite",
								"tokenURI(uint256)": "infinite",
								"transferFrom(address,address,uint256)": "infinite"
							},
							"internal": {
								"_afterTokenTransfer(address,address,uint256,uint256)": "infinite",
								"_approve(address,uint256)": "infinite",
								"_baseURI()": "infinite",
								"_beforeTokenTransfer(address,address,uint256,uint256)": "48890",
								"_burn(uint256)": "infinite",
								"_checkOnERC721Received(address,address,uint256,bytes memory)": "infinite",
								"_exists(uint256)": "2272",
								"_isApprovedOrOwner(address,uint256)": "infinite",
								"_mint(address,uint256)": "infinite",
								"_ownerOf(uint256)": "2205",
								"_requireMinted(uint256)": "infinite",
								"_safeMint(address,uint256)": "infinite",
								"_safeMint(address,uint256,bytes memory)": "infinite",
								"_safeTransfer(address,address,uint256,bytes memory)": "infinite",
								"_setApprovalForAll(address,address,bool)": "infinite",
								"_transfer(address,address,uint256)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 745,
									"end": 17565,
									"name": "PUSH",
									"source": 9,
									"value": "80"
								},
								{
									"begin": 745,
									"end": 17565,
									"name": "PUSH",
									"source": 9,
									"value": "40"
								},
								{
									"begin": 745,
									"end": 17565,
									"name": "MSTORE",
									"source": 9
								},
								{
									"begin": 1610,
									"end": 1770,
									"name": "CALLVALUE",
									"source": 9
								},
								{
									"begin": 1610,
									"end": 1770,
									"name": "DUP1",
									"source": 9
								},
								{
									"begin": 1610,
									"end": 1770,
									"name": "ISZERO",
									"source": 9
								},
								{
									"begin": 1610,
									"end": 1770,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "1"
								},
								{
									"begin": 1610,
									"end": 1770,
									"name": "JUMPI",
									"source": 9
								},
								{
									"begin": 1610,
									"end": 1770,
									"name": "PUSH",
									"source": 9,
									"value": "0"
								},
								{
									"begin": 1610,
									"end": 1770,
									"name": "DUP1",
									"source": 9
								},
								{
									"begin": 1610,
									"end": 1770,
									"name": "REVERT",
									"source": 9
								},
								{
									"begin": 1610,
									"end": 1770,
									"name": "tag",
									"source": 9,
									"value": "1"
								},
								{
									"begin": 1610,
									"end": 1770,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 1610,
									"end": 1770,
									"name": "POP",
									"source": 9
								},
								{
									"begin": 1610,
									"end": 1770,
									"name": "PUSH",
									"source": 9,
									"value": "40"
								},
								{
									"begin": 1610,
									"end": 1770,
									"name": "MLOAD",
									"source": 9
								},
								{
									"begin": 1610,
									"end": 1770,
									"name": "PUSHSIZE",
									"source": 9
								},
								{
									"begin": 1610,
									"end": 1770,
									"name": "CODESIZE",
									"source": 9
								},
								{
									"begin": 1610,
									"end": 1770,
									"name": "SUB",
									"source": 9
								},
								{
									"begin": 1610,
									"end": 1770,
									"name": "DUP1",
									"source": 9
								},
								{
									"begin": 1610,
									"end": 1770,
									"name": "PUSHSIZE",
									"source": 9
								},
								{
									"begin": 1610,
									"end": 1770,
									"name": "DUP4",
									"source": 9
								},
								{
									"begin": 1610,
									"end": 1770,
									"name": "CODECOPY",
									"source": 9
								},
								{
									"begin": 1610,
									"end": 1770,
									"name": "DUP2",
									"source": 9
								},
								{
									"begin": 1610,
									"end": 1770,
									"name": "ADD",
									"source": 9
								},
								{
									"begin": 1610,
									"end": 1770,
									"name": "PUSH",
									"source": 9,
									"value": "40"
								},
								{
									"begin": 1610,
									"end": 1770,
									"name": "DUP2",
									"source": 9
								},
								{
									"begin": 1610,
									"end": 1770,
									"name": "SWAP1",
									"source": 9
								},
								{
									"begin": 1610,
									"end": 1770,
									"name": "MSTORE",
									"source": 9
								},
								{
									"begin": 1610,
									"end": 1770,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "2"
								},
								{
									"begin": 1610,
									"end": 1770,
									"name": "SWAP2",
									"source": 9
								},
								{
									"begin": 1610,
									"end": 1770,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "3"
								},
								{
									"begin": 1610,
									"end": 1770,
									"name": "JUMP",
									"source": 9,
									"value": "[in]"
								},
								{
									"begin": 1610,
									"end": 1770,
									"name": "tag",
									"source": 9,
									"value": "2"
								},
								{
									"begin": 1610,
									"end": 1770,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 1694,
									"end": 1707,
									"name": "DUP3",
									"source": 9
								},
								{
									"begin": 1694,
									"end": 1707,
									"name": "MLOAD",
									"source": 9
								},
								{
									"begin": 1694,
									"end": 1707,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "6"
								},
								{
									"begin": 1694,
									"end": 1707,
									"name": "SWAP1",
									"source": 9
								},
								{
									"begin": 1694,
									"end": 1699,
									"name": "PUSH",
									"source": 9,
									"value": "0"
								},
								{
									"begin": 1694,
									"end": 1699,
									"name": "SWAP1",
									"source": 9
								},
								{
									"begin": 1694,
									"end": 1707,
									"name": "PUSH",
									"source": 9,
									"value": "20"
								},
								{
									"begin": 1694,
									"end": 1707,
									"name": "DUP7",
									"source": 9
								},
								{
									"begin": 1694,
									"end": 1707,
									"name": "ADD",
									"source": 9
								},
								{
									"begin": 1694,
									"end": 1707,
									"name": "SWAP1",
									"source": 9
								},
								{
									"begin": 1694,
									"end": 1707,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "7"
								},
								{
									"begin": 1694,
									"end": 1707,
									"name": "JUMP",
									"source": 9,
									"value": "[in]"
								},
								{
									"begin": 1694,
									"end": 1707,
									"name": "tag",
									"source": 9,
									"value": "6"
								},
								{
									"begin": 1694,
									"end": 1707,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 1717,
									"end": 1734,
									"name": "DUP2",
									"source": 9
								},
								{
									"begin": 1717,
									"end": 1734,
									"name": "MLOAD",
									"source": 9
								},
								{
									"begin": 1717,
									"end": 1734,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "8"
								},
								{
									"begin": 1717,
									"end": 1734,
									"name": "SWAP1",
									"source": 9
								},
								{
									"begin": 1717,
									"end": 1724,
									"name": "PUSH",
									"source": 9,
									"value": "1"
								},
								{
									"begin": 1717,
									"end": 1724,
									"name": "SWAP1",
									"source": 9
								},
								{
									"begin": 1717,
									"end": 1734,
									"name": "PUSH",
									"source": 9,
									"value": "20"
								},
								{
									"begin": 1717,
									"end": 1734,
									"name": "DUP6",
									"source": 9
								},
								{
									"begin": 1717,
									"end": 1734,
									"name": "ADD",
									"source": 9
								},
								{
									"begin": 1717,
									"end": 1734,
									"name": "SWAP1",
									"source": 9
								},
								{
									"begin": 1717,
									"end": 1734,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "7"
								},
								{
									"begin": 1717,
									"end": 1734,
									"name": "JUMP",
									"source": 9,
									"value": "[in]"
								},
								{
									"begin": 1717,
									"end": 1734,
									"name": "tag",
									"source": 9,
									"value": "8"
								},
								{
									"begin": 1717,
									"end": 1734,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 1744,
									"end": 1752,
									"name": "PUSH",
									"source": 9,
									"value": "3"
								},
								{
									"begin": 1744,
									"end": 1763,
									"name": "DUP1",
									"source": 9
								},
								{
									"begin": 1744,
									"end": 1763,
									"name": "SLOAD",
									"source": 9
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "NOT",
									"source": -1
								},
								{
									"begin": 1744,
									"end": 1763,
									"name": "AND",
									"source": 9
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 1744,
									"end": 1763,
									"name": "SWAP3",
									"source": 9
								},
								{
									"begin": 1744,
									"end": 1763,
									"name": "SWAP1",
									"source": 9
								},
								{
									"begin": 1744,
									"end": 1763,
									"name": "SWAP3",
									"source": 9
								},
								{
									"begin": 1744,
									"end": 1763,
									"name": "AND",
									"source": 9
								},
								{
									"begin": 1744,
									"end": 1763,
									"name": "SWAP2",
									"source": 9
								},
								{
									"begin": 1744,
									"end": 1763,
									"name": "SWAP1",
									"source": 9
								},
								{
									"begin": 1744,
									"end": 1763,
									"name": "SWAP2",
									"source": 9
								},
								{
									"begin": 1744,
									"end": 1763,
									"name": "OR",
									"source": 9
								},
								{
									"begin": 1744,
									"end": 1763,
									"name": "SWAP1",
									"source": 9
								},
								{
									"begin": 1744,
									"end": 1763,
									"name": "SSTORE",
									"source": 9
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 745,
									"end": 17565,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "23"
								},
								{
									"begin": 745,
									"end": 17565,
									"name": "SWAP1",
									"source": 9
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 745,
									"end": 17565,
									"name": "JUMP",
									"source": 9
								},
								{
									"begin": 745,
									"end": 17565,
									"name": "tag",
									"source": 9,
									"value": "7"
								},
								{
									"begin": 745,
									"end": 17565,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 745,
									"end": 17565,
									"name": "DUP3",
									"source": 9
								},
								{
									"begin": 745,
									"end": 17565,
									"name": "DUP1",
									"source": 9
								},
								{
									"begin": 745,
									"end": 17565,
									"name": "SLOAD",
									"source": 9
								},
								{
									"begin": 745,
									"end": 17565,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "10"
								},
								{
									"begin": 745,
									"end": 17565,
									"name": "SWAP1",
									"source": 9
								},
								{
									"begin": 745,
									"end": 17565,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "11"
								},
								{
									"begin": 745,
									"end": 17565,
									"name": "JUMP",
									"source": 9,
									"value": "[in]"
								},
								{
									"begin": 745,
									"end": 17565,
									"name": "tag",
									"source": 9,
									"value": "10"
								},
								{
									"begin": 745,
									"end": 17565,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 745,
									"end": 17565,
									"name": "SWAP1",
									"source": 9
								},
								{
									"begin": 745,
									"end": 17565,
									"name": "PUSH",
									"source": 9,
									"value": "0"
								},
								{
									"begin": 745,
									"end": 17565,
									"name": "MSTORE",
									"source": 9
								},
								{
									"begin": 745,
									"end": 17565,
									"name": "PUSH",
									"source": 9,
									"value": "20"
								},
								{
									"begin": 745,
									"end": 17565,
									"name": "PUSH",
									"source": 9,
									"value": "0"
								},
								{
									"begin": 745,
									"end": 17565,
									"name": "KECCAK256",
									"source": 9
								},
								{
									"begin": 745,
									"end": 17565,
									"name": "SWAP1",
									"source": 9
								},
								{
									"begin": 745,
									"end": 17565,
									"name": "PUSH",
									"source": 9,
									"value": "1F"
								},
								{
									"begin": 745,
									"end": 17565,
									"name": "ADD",
									"source": 9
								},
								{
									"begin": 745,
									"end": 17565,
									"name": "PUSH",
									"source": 9,
									"value": "20"
								},
								{
									"begin": 745,
									"end": 17565,
									"name": "SWAP1",
									"source": 9
								},
								{
									"begin": 745,
									"end": 17565,
									"name": "DIV",
									"source": 9
								},
								{
									"begin": 745,
									"end": 17565,
									"name": "DUP2",
									"source": 9
								},
								{
									"begin": 745,
									"end": 17565,
									"name": "ADD",
									"source": 9
								},
								{
									"begin": 745,
									"end": 17565,
									"name": "SWAP3",
									"source": 9
								},
								{
									"begin": 745,
									"end": 17565,
									"name": "DUP3",
									"source": 9
								},
								{
									"begin": 745,
									"end": 17565,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "13"
								},
								{
									"begin": 745,
									"end": 17565,
									"name": "JUMPI",
									"source": 9
								},
								{
									"begin": 745,
									"end": 17565,
									"name": "PUSH",
									"source": 9,
									"value": "0"
								},
								{
									"begin": 745,
									"end": 17565,
									"name": "DUP6",
									"source": 9
								},
								{
									"begin": 745,
									"end": 17565,
									"name": "SSTORE",
									"source": 9
								},
								{
									"begin": 745,
									"end": 17565,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "16"
								},
								{
									"begin": 745,
									"end": 17565,
									"name": "JUMP",
									"source": 9
								},
								{
									"begin": 745,
									"end": 17565,
									"name": "tag",
									"source": 9,
									"value": "13"
								},
								{
									"begin": 745,
									"end": 17565,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 745,
									"end": 17565,
									"name": "DUP3",
									"source": 9
								},
								{
									"begin": 745,
									"end": 17565,
									"name": "PUSH",
									"source": 9,
									"value": "1F"
								},
								{
									"begin": 745,
									"end": 17565,
									"name": "LT",
									"source": 9
								},
								{
									"begin": 745,
									"end": 17565,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "14"
								},
								{
									"begin": 745,
									"end": 17565,
									"name": "JUMPI",
									"source": 9
								},
								{
									"begin": 745,
									"end": 17565,
									"name": "DUP1",
									"source": 9
								},
								{
									"begin": 745,
									"end": 17565,
									"name": "MLOAD",
									"source": 9
								},
								{
									"begin": 745,
									"end": 17565,
									"name": "PUSH",
									"source": 9,
									"value": "FF"
								},
								{
									"begin": 745,
									"end": 17565,
									"name": "NOT",
									"source": 9
								},
								{
									"begin": 745,
									"end": 17565,
									"name": "AND",
									"source": 9
								},
								{
									"begin": 745,
									"end": 17565,
									"name": "DUP4",
									"source": 9
								},
								{
									"begin": 745,
									"end": 17565,
									"name": "DUP1",
									"source": 9
								},
								{
									"begin": 745,
									"end": 17565,
									"name": "ADD",
									"source": 9
								},
								{
									"begin": 745,
									"end": 17565,
									"name": "OR",
									"source": 9
								},
								{
									"begin": 745,
									"end": 17565,
									"name": "DUP6",
									"source": 9
								},
								{
									"begin": 745,
									"end": 17565,
									"name": "SSTORE",
									"source": 9
								},
								{
									"begin": 745,
									"end": 17565,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "16"
								},
								{
									"begin": 745,
									"end": 17565,
									"name": "JUMP",
									"source": 9
								},
								{
									"begin": 745,
									"end": 17565,
									"name": "tag",
									"source": 9,
									"value": "14"
								},
								{
									"begin": 745,
									"end": 17565,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 745,
									"end": 17565,
									"name": "DUP3",
									"source": 9
								},
								{
									"begin": 745,
									"end": 17565,
									"name": "DUP1",
									"source": 9
								},
								{
									"begin": 745,
									"end": 17565,
									"name": "ADD",
									"source": 9
								},
								{
									"begin": 745,
									"end": 17565,
									"name": "PUSH",
									"source": 9,
									"value": "1"
								},
								{
									"begin": 745,
									"end": 17565,
									"name": "ADD",
									"source": 9
								},
								{
									"begin": 745,
									"end": 17565,
									"name": "DUP6",
									"source": 9
								},
								{
									"begin": 745,
									"end": 17565,
									"name": "SSTORE",
									"source": 9
								},
								{
									"begin": 745,
									"end": 17565,
									"name": "DUP3",
									"source": 9
								},
								{
									"begin": 745,
									"end": 17565,
									"name": "ISZERO",
									"source": 9
								},
								{
									"begin": 745,
									"end": 17565,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "16"
								},
								{
									"begin": 745,
									"end": 17565,
									"name": "JUMPI",
									"source": 9
								},
								{
									"begin": 745,
									"end": 17565,
									"name": "SWAP2",
									"source": 9
								},
								{
									"begin": 745,
									"end": 17565,
									"name": "DUP3",
									"source": 9
								},
								{
									"begin": 745,
									"end": 17565,
									"name": "ADD",
									"source": 9
								},
								{
									"begin": 745,
									"end": 17565,
									"name": "tag",
									"source": 9,
									"value": "15"
								},
								{
									"begin": 745,
									"end": 17565,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 745,
									"end": 17565,
									"name": "DUP3",
									"source": 9
								},
								{
									"begin": 745,
									"end": 17565,
									"name": "DUP2",
									"source": 9
								},
								{
									"begin": 745,
									"end": 17565,
									"name": "GT",
									"source": 9
								},
								{
									"begin": 745,
									"end": 17565,
									"name": "ISZERO",
									"source": 9
								},
								{
									"begin": 745,
									"end": 17565,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "16"
								},
								{
									"begin": 745,
									"end": 17565,
									"name": "JUMPI",
									"source": 9
								},
								{
									"begin": 745,
									"end": 17565,
									"name": "DUP3",
									"source": 9
								},
								{
									"begin": 745,
									"end": 17565,
									"name": "MLOAD",
									"source": 9
								},
								{
									"begin": 745,
									"end": 17565,
									"name": "DUP3",
									"source": 9
								},
								{
									"begin": 745,
									"end": 17565,
									"name": "SSTORE",
									"source": 9
								},
								{
									"begin": 745,
									"end": 17565,
									"name": "SWAP2",
									"source": 9
								},
								{
									"begin": 745,
									"end": 17565,
									"name": "PUSH",
									"source": 9,
									"value": "20"
								},
								{
									"begin": 745,
									"end": 17565,
									"name": "ADD",
									"source": 9
								},
								{
									"begin": 745,
									"end": 17565,
									"name": "SWAP2",
									"source": 9
								},
								{
									"begin": 745,
									"end": 17565,
									"name": "SWAP1",
									"source": 9
								},
								{
									"begin": 745,
									"end": 17565,
									"name": "PUSH",
									"source": 9,
									"value": "1"
								},
								{
									"begin": 745,
									"end": 17565,
									"name": "ADD",
									"source": 9
								},
								{
									"begin": 745,
									"end": 17565,
									"name": "SWAP1",
									"source": 9
								},
								{
									"begin": 745,
									"end": 17565,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "15"
								},
								{
									"begin": 745,
									"end": 17565,
									"name": "JUMP",
									"source": 9
								},
								{
									"begin": 745,
									"end": 17565,
									"name": "tag",
									"source": 9,
									"value": "16"
								},
								{
									"begin": 745,
									"end": 17565,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 745,
									"end": 17565,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "17"
								},
								{
									"begin": 745,
									"end": 17565,
									"name": "SWAP3",
									"source": 9
								},
								{
									"begin": 745,
									"end": 17565,
									"name": "SWAP2",
									"source": 9
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 745,
									"end": 17565,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "18"
								},
								{
									"begin": 745,
									"end": 17565,
									"name": "JUMP",
									"source": 9,
									"value": "[in]"
								},
								{
									"begin": 745,
									"end": 17565,
									"name": "tag",
									"source": 9,
									"value": "17"
								},
								{
									"begin": 745,
									"end": 17565,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 745,
									"end": 17565,
									"name": "POP",
									"source": 9
								},
								{
									"begin": 745,
									"end": 17565,
									"name": "SWAP1",
									"source": 9
								},
								{
									"begin": 745,
									"end": 17565,
									"name": "JUMP",
									"source": 9,
									"value": "[out]"
								},
								{
									"begin": 745,
									"end": 17565,
									"name": "tag",
									"source": 9,
									"value": "18"
								},
								{
									"begin": 745,
									"end": 17565,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 745,
									"end": 17565,
									"name": "tag",
									"source": 9,
									"value": "19"
								},
								{
									"begin": 745,
									"end": 17565,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 745,
									"end": 17565,
									"name": "DUP1",
									"source": 9
								},
								{
									"begin": 745,
									"end": 17565,
									"name": "DUP3",
									"source": 9
								},
								{
									"begin": 745,
									"end": 17565,
									"name": "GT",
									"source": 9
								},
								{
									"begin": 745,
									"end": 17565,
									"name": "ISZERO",
									"source": 9
								},
								{
									"begin": 745,
									"end": 17565,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "17"
								},
								{
									"begin": 745,
									"end": 17565,
									"name": "JUMPI",
									"source": 9
								},
								{
									"begin": 745,
									"end": 17565,
									"name": "PUSH",
									"source": 9,
									"value": "0"
								},
								{
									"begin": 745,
									"end": 17565,
									"name": "DUP2",
									"source": 9
								},
								{
									"begin": 745,
									"end": 17565,
									"name": "SSTORE",
									"source": 9
								},
								{
									"begin": 745,
									"end": 17565,
									"name": "PUSH",
									"source": 9,
									"value": "1"
								},
								{
									"begin": 745,
									"end": 17565,
									"name": "ADD",
									"source": 9
								},
								{
									"begin": 745,
									"end": 17565,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "19"
								},
								{
									"begin": 745,
									"end": 17565,
									"name": "JUMP",
									"source": 9
								},
								{
									"begin": 14,
									"end": 141,
									"name": "tag",
									"source": 10,
									"value": "21"
								},
								{
									"begin": 14,
									"end": 141,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 75,
									"end": 85,
									"name": "PUSH",
									"source": 10,
									"value": "4E487B71"
								},
								{
									"begin": 70,
									"end": 73,
									"name": "PUSH",
									"source": 10,
									"value": "E0"
								},
								{
									"begin": 66,
									"end": 86,
									"name": "SHL",
									"source": 10
								},
								{
									"begin": 63,
									"end": 64,
									"name": "PUSH",
									"source": 10,
									"value": "0"
								},
								{
									"begin": 56,
									"end": 87,
									"name": "MSTORE",
									"source": 10
								},
								{
									"begin": 106,
									"end": 110,
									"name": "PUSH",
									"source": 10,
									"value": "41"
								},
								{
									"begin": 103,
									"end": 104,
									"name": "PUSH",
									"source": 10,
									"value": "4"
								},
								{
									"begin": 96,
									"end": 111,
									"name": "MSTORE",
									"source": 10
								},
								{
									"begin": 130,
									"end": 134,
									"name": "PUSH",
									"source": 10,
									"value": "24"
								},
								{
									"begin": 127,
									"end": 128,
									"name": "PUSH",
									"source": 10,
									"value": "0"
								},
								{
									"begin": 120,
									"end": 135,
									"name": "REVERT",
									"source": 10
								},
								{
									"begin": 146,
									"end": 1031,
									"name": "tag",
									"source": 10,
									"value": "22"
								},
								{
									"begin": 146,
									"end": 1031,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 200,
									"end": 205,
									"name": "PUSH",
									"source": 10,
									"value": "0"
								},
								{
									"begin": 253,
									"end": 256,
									"name": "DUP3",
									"source": 10
								},
								{
									"begin": 246,
									"end": 250,
									"name": "PUSH",
									"source": 10,
									"value": "1F"
								},
								{
									"begin": 238,
									"end": 244,
									"name": "DUP4",
									"source": 10
								},
								{
									"begin": 234,
									"end": 251,
									"name": "ADD",
									"source": 10
								},
								{
									"begin": 230,
									"end": 257,
									"name": "SLT",
									"source": 10
								},
								{
									"begin": 220,
									"end": 275,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "26"
								},
								{
									"begin": 220,
									"end": 275,
									"name": "JUMPI",
									"source": 10
								},
								{
									"begin": 271,
									"end": 272,
									"name": "PUSH",
									"source": 10,
									"value": "0"
								},
								{
									"begin": 268,
									"end": 269,
									"name": "DUP1",
									"source": 10
								},
								{
									"begin": 261,
									"end": 273,
									"name": "REVERT",
									"source": 10
								},
								{
									"begin": 220,
									"end": 275,
									"name": "tag",
									"source": 10,
									"value": "26"
								},
								{
									"begin": 220,
									"end": 275,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 294,
									"end": 307,
									"name": "DUP2",
									"source": 10
								},
								{
									"begin": 294,
									"end": 307,
									"name": "MLOAD",
									"source": 10
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "40"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 356,
									"end": 366,
									"name": "DUP1",
									"source": 10
								},
								{
									"begin": 356,
									"end": 366,
									"name": "DUP3",
									"source": 10
								},
								{
									"begin": 356,
									"end": 366,
									"name": "GT",
									"source": 10
								},
								{
									"begin": 353,
									"end": 389,
									"name": "ISZERO",
									"source": 10
								},
								{
									"begin": 353,
									"end": 389,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "28"
								},
								{
									"begin": 353,
									"end": 389,
									"name": "JUMPI",
									"source": 10
								},
								{
									"begin": 369,
									"end": 387,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "28"
								},
								{
									"begin": 369,
									"end": 387,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "21"
								},
								{
									"begin": 369,
									"end": 387,
									"name": "JUMP",
									"source": 10,
									"value": "[in]"
								},
								{
									"begin": 369,
									"end": 387,
									"name": "tag",
									"source": 10,
									"value": "28"
								},
								{
									"begin": 369,
									"end": 387,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 444,
									"end": 446,
									"name": "PUSH",
									"source": 10,
									"value": "40"
								},
								{
									"begin": 438,
									"end": 447,
									"name": "MLOAD",
									"source": 10
								},
								{
									"begin": 412,
									"end": 414,
									"name": "PUSH",
									"source": 10,
									"value": "1F"
								},
								{
									"begin": 498,
									"end": 511,
									"name": "DUP4",
									"source": 10
								},
								{
									"begin": 498,
									"end": 511,
									"name": "ADD",
									"source": 10
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1F"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "NOT",
									"source": -1
								},
								{
									"begin": 494,
									"end": 516,
									"name": "SWAP1",
									"source": 10
								},
								{
									"begin": 494,
									"end": 516,
									"name": "DUP2",
									"source": 10
								},
								{
									"begin": 494,
									"end": 516,
									"name": "AND",
									"source": 10
								},
								{
									"begin": 518,
									"end": 520,
									"name": "PUSH",
									"source": 10,
									"value": "3F"
								},
								{
									"begin": 490,
									"end": 521,
									"name": "ADD",
									"source": 10
								},
								{
									"begin": 486,
									"end": 526,
									"name": "AND",
									"source": 10
								},
								{
									"begin": 474,
									"end": 527,
									"name": "DUP2",
									"source": 10
								},
								{
									"begin": 474,
									"end": 527,
									"name": "ADD",
									"source": 10
								},
								{
									"begin": 474,
									"end": 527,
									"name": "SWAP1",
									"source": 10
								},
								{
									"begin": 542,
									"end": 560,
									"name": "DUP3",
									"source": 10
								},
								{
									"begin": 542,
									"end": 560,
									"name": "DUP3",
									"source": 10
								},
								{
									"begin": 542,
									"end": 560,
									"name": "GT",
									"source": 10
								},
								{
									"begin": 562,
									"end": 584,
									"name": "DUP2",
									"source": 10
								},
								{
									"begin": 562,
									"end": 584,
									"name": "DUP4",
									"source": 10
								},
								{
									"begin": 562,
									"end": 584,
									"name": "LT",
									"source": 10
								},
								{
									"begin": 539,
									"end": 585,
									"name": "OR",
									"source": 10
								},
								{
									"begin": 536,
									"end": 608,
									"name": "ISZERO",
									"source": 10
								},
								{
									"begin": 536,
									"end": 608,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "30"
								},
								{
									"begin": 536,
									"end": 608,
									"name": "JUMPI",
									"source": 10
								},
								{
									"begin": 588,
									"end": 606,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "30"
								},
								{
									"begin": 588,
									"end": 606,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "21"
								},
								{
									"begin": 588,
									"end": 606,
									"name": "JUMP",
									"source": 10,
									"value": "[in]"
								},
								{
									"begin": 588,
									"end": 606,
									"name": "tag",
									"source": 10,
									"value": "30"
								},
								{
									"begin": 588,
									"end": 606,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 628,
									"end": 638,
									"name": "DUP2",
									"source": 10
								},
								{
									"begin": 624,
									"end": 626,
									"name": "PUSH",
									"source": 10,
									"value": "40"
								},
								{
									"begin": 617,
									"end": 639,
									"name": "MSTORE",
									"source": 10
								},
								{
									"begin": 663,
									"end": 665,
									"name": "DUP4",
									"source": 10
								},
								{
									"begin": 655,
									"end": 661,
									"name": "DUP2",
									"source": 10
								},
								{
									"begin": 648,
									"end": 666,
									"name": "MSTORE",
									"source": 10
								},
								{
									"begin": 685,
									"end": 689,
									"name": "PUSH",
									"source": 10,
									"value": "20"
								},
								{
									"begin": 675,
									"end": 689,
									"name": "SWAP3",
									"source": 10
								},
								{
									"begin": 675,
									"end": 689,
									"name": "POP",
									"source": 10
								},
								{
									"begin": 730,
									"end": 733,
									"name": "DUP7",
									"source": 10
								},
								{
									"begin": 725,
									"end": 727,
									"name": "DUP4",
									"source": 10
								},
								{
									"begin": 720,
									"end": 722,
									"name": "DUP6",
									"source": 10
								},
								{
									"begin": 712,
									"end": 718,
									"name": "DUP9",
									"source": 10
								},
								{
									"begin": 708,
									"end": 723,
									"name": "ADD",
									"source": 10
								},
								{
									"begin": 704,
									"end": 728,
									"name": "ADD",
									"source": 10
								},
								{
									"begin": 701,
									"end": 734,
									"name": "GT",
									"source": 10
								},
								{
									"begin": 698,
									"end": 751,
									"name": "ISZERO",
									"source": 10
								},
								{
									"begin": 698,
									"end": 751,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "31"
								},
								{
									"begin": 698,
									"end": 751,
									"name": "JUMPI",
									"source": 10
								},
								{
									"begin": 747,
									"end": 748,
									"name": "PUSH",
									"source": 10,
									"value": "0"
								},
								{
									"begin": 744,
									"end": 745,
									"name": "DUP1",
									"source": 10
								},
								{
									"begin": 737,
									"end": 749,
									"name": "REVERT",
									"source": 10
								},
								{
									"begin": 698,
									"end": 751,
									"name": "tag",
									"source": 10,
									"value": "31"
								},
								{
									"begin": 698,
									"end": 751,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 769,
									"end": 770,
									"name": "PUSH",
									"source": 10,
									"value": "0"
								},
								{
									"begin": 760,
									"end": 770,
									"name": "SWAP2",
									"source": 10
								},
								{
									"begin": 760,
									"end": 770,
									"name": "POP",
									"source": 10
								},
								{
									"begin": 779,
									"end": 912,
									"name": "tag",
									"source": 10,
									"value": "32"
								},
								{
									"begin": 779,
									"end": 912,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 793,
									"end": 795,
									"name": "DUP4",
									"source": 10
								},
								{
									"begin": 790,
									"end": 791,
									"name": "DUP3",
									"source": 10
								},
								{
									"begin": 787,
									"end": 796,
									"name": "LT",
									"source": 10
								},
								{
									"begin": 779,
									"end": 912,
									"name": "ISZERO",
									"source": 10
								},
								{
									"begin": 779,
									"end": 912,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "34"
								},
								{
									"begin": 779,
									"end": 912,
									"name": "JUMPI",
									"source": 10
								},
								{
									"begin": 881,
									"end": 895,
									"name": "DUP6",
									"source": 10
								},
								{
									"begin": 881,
									"end": 895,
									"name": "DUP3",
									"source": 10
								},
								{
									"begin": 881,
									"end": 895,
									"name": "ADD",
									"source": 10
								},
								{
									"begin": 877,
									"end": 900,
									"name": "DUP4",
									"source": 10
								},
								{
									"begin": 877,
									"end": 900,
									"name": "ADD",
									"source": 10
								},
								{
									"begin": 871,
									"end": 901,
									"name": "MLOAD",
									"source": 10
								},
								{
									"begin": 850,
									"end": 864,
									"name": "DUP2",
									"source": 10
								},
								{
									"begin": 850,
									"end": 864,
									"name": "DUP4",
									"source": 10
								},
								{
									"begin": 850,
									"end": 864,
									"name": "ADD",
									"source": 10
								},
								{
									"begin": 846,
									"end": 869,
									"name": "DUP5",
									"source": 10
								},
								{
									"begin": 846,
									"end": 869,
									"name": "ADD",
									"source": 10
								},
								{
									"begin": 839,
									"end": 902,
									"name": "MSTORE",
									"source": 10
								},
								{
									"begin": 804,
									"end": 814,
									"name": "SWAP1",
									"source": 10
								},
								{
									"begin": 804,
									"end": 814,
									"name": "DUP3",
									"source": 10
								},
								{
									"begin": 804,
									"end": 814,
									"name": "ADD",
									"source": 10
								},
								{
									"begin": 804,
									"end": 814,
									"name": "SWAP1",
									"source": 10
								},
								{
									"begin": 779,
									"end": 912,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "32"
								},
								{
									"begin": 779,
									"end": 912,
									"name": "JUMP",
									"source": 10
								},
								{
									"begin": 779,
									"end": 912,
									"name": "tag",
									"source": 10,
									"value": "34"
								},
								{
									"begin": 779,
									"end": 912,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 930,
									"end": 932,
									"name": "DUP4",
									"source": 10
								},
								{
									"begin": 927,
									"end": 928,
									"name": "DUP3",
									"source": 10
								},
								{
									"begin": 924,
									"end": 933,
									"name": "GT",
									"source": 10
								},
								{
									"begin": 921,
									"end": 1001,
									"name": "ISZERO",
									"source": 10
								},
								{
									"begin": 921,
									"end": 1001,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "35"
								},
								{
									"begin": 921,
									"end": 1001,
									"name": "JUMPI",
									"source": 10
								},
								{
									"begin": 989,
									"end": 990,
									"name": "PUSH",
									"source": 10,
									"value": "0"
								},
								{
									"begin": 984,
									"end": 986,
									"name": "DUP4",
									"source": 10
								},
								{
									"begin": 979,
									"end": 981,
									"name": "DUP6",
									"source": 10
								},
								{
									"begin": 971,
									"end": 977,
									"name": "DUP4",
									"source": 10
								},
								{
									"begin": 967,
									"end": 982,
									"name": "ADD",
									"source": 10
								},
								{
									"begin": 963,
									"end": 987,
									"name": "ADD",
									"source": 10
								},
								{
									"begin": 956,
									"end": 991,
									"name": "MSTORE",
									"source": 10
								},
								{
									"begin": 921,
									"end": 1001,
									"name": "tag",
									"source": 10,
									"value": "35"
								},
								{
									"begin": 921,
									"end": 1001,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 1019,
									"end": 1025,
									"name": "SWAP7",
									"source": 10
								},
								{
									"begin": 146,
									"end": 1031,
									"name": "SWAP6",
									"source": 10
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 146,
									"end": 1031,
									"name": "JUMP",
									"source": 10,
									"value": "[out]"
								},
								{
									"begin": 1036,
									"end": 1765,
									"name": "tag",
									"source": 10,
									"value": "3"
								},
								{
									"begin": 1036,
									"end": 1765,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 1144,
									"end": 1150,
									"name": "PUSH",
									"source": 10,
									"value": "0"
								},
								{
									"begin": 1152,
									"end": 1158,
									"name": "DUP1",
									"source": 10
								},
								{
									"begin": 1160,
									"end": 1166,
									"name": "PUSH",
									"source": 10,
									"value": "0"
								},
								{
									"begin": 1213,
									"end": 1215,
									"name": "PUSH",
									"source": 10,
									"value": "60"
								},
								{
									"begin": 1201,
									"end": 1210,
									"name": "DUP5",
									"source": 10
								},
								{
									"begin": 1192,
									"end": 1199,
									"name": "DUP7",
									"source": 10
								},
								{
									"begin": 1188,
									"end": 1211,
									"name": "SUB",
									"source": 10
								},
								{
									"begin": 1184,
									"end": 1216,
									"name": "SLT",
									"source": 10
								},
								{
									"begin": 1181,
									"end": 1233,
									"name": "ISZERO",
									"source": 10
								},
								{
									"begin": 1181,
									"end": 1233,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "37"
								},
								{
									"begin": 1181,
									"end": 1233,
									"name": "JUMPI",
									"source": 10
								},
								{
									"begin": 1229,
									"end": 1230,
									"name": "PUSH",
									"source": 10,
									"value": "0"
								},
								{
									"begin": 1226,
									"end": 1227,
									"name": "DUP1",
									"source": 10
								},
								{
									"begin": 1219,
									"end": 1231,
									"name": "REVERT",
									"source": 10
								},
								{
									"begin": 1181,
									"end": 1233,
									"name": "tag",
									"source": 10,
									"value": "37"
								},
								{
									"begin": 1181,
									"end": 1233,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 1256,
									"end": 1272,
									"name": "DUP4",
									"source": 10
								},
								{
									"begin": 1256,
									"end": 1272,
									"name": "MLOAD",
									"source": 10
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "40"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 1321,
									"end": 1335,
									"name": "DUP1",
									"source": 10
								},
								{
									"begin": 1321,
									"end": 1335,
									"name": "DUP3",
									"source": 10
								},
								{
									"begin": 1321,
									"end": 1335,
									"name": "GT",
									"source": 10
								},
								{
									"begin": 1318,
									"end": 1352,
									"name": "ISZERO",
									"source": 10
								},
								{
									"begin": 1318,
									"end": 1352,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "38"
								},
								{
									"begin": 1318,
									"end": 1352,
									"name": "JUMPI",
									"source": 10
								},
								{
									"begin": 1348,
									"end": 1349,
									"name": "PUSH",
									"source": 10,
									"value": "0"
								},
								{
									"begin": 1345,
									"end": 1346,
									"name": "DUP1",
									"source": 10
								},
								{
									"begin": 1338,
									"end": 1350,
									"name": "REVERT",
									"source": 10
								},
								{
									"begin": 1318,
									"end": 1352,
									"name": "tag",
									"source": 10,
									"value": "38"
								},
								{
									"begin": 1318,
									"end": 1352,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 1371,
									"end": 1432,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "39"
								},
								{
									"begin": 1424,
									"end": 1431,
									"name": "DUP8",
									"source": 10
								},
								{
									"begin": 1415,
									"end": 1421,
									"name": "DUP4",
									"source": 10
								},
								{
									"begin": 1404,
									"end": 1413,
									"name": "DUP9",
									"source": 10
								},
								{
									"begin": 1400,
									"end": 1422,
									"name": "ADD",
									"source": 10
								},
								{
									"begin": 1371,
									"end": 1432,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "22"
								},
								{
									"begin": 1371,
									"end": 1432,
									"name": "JUMP",
									"source": 10,
									"value": "[in]"
								},
								{
									"begin": 1371,
									"end": 1432,
									"name": "tag",
									"source": 10,
									"value": "39"
								},
								{
									"begin": 1371,
									"end": 1432,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 1361,
									"end": 1432,
									"name": "SWAP5",
									"source": 10
								},
								{
									"begin": 1361,
									"end": 1432,
									"name": "POP",
									"source": 10
								},
								{
									"begin": 1478,
									"end": 1480,
									"name": "PUSH",
									"source": 10,
									"value": "20"
								},
								{
									"begin": 1467,
									"end": 1476,
									"name": "DUP7",
									"source": 10
								},
								{
									"begin": 1463,
									"end": 1481,
									"name": "ADD",
									"source": 10
								},
								{
									"begin": 1457,
									"end": 1482,
									"name": "MLOAD",
									"source": 10
								},
								{
									"begin": 1441,
									"end": 1482,
									"name": "SWAP2",
									"source": 10
								},
								{
									"begin": 1441,
									"end": 1482,
									"name": "POP",
									"source": 10
								},
								{
									"begin": 1507,
									"end": 1509,
									"name": "DUP1",
									"source": 10
								},
								{
									"begin": 1497,
									"end": 1505,
									"name": "DUP3",
									"source": 10
								},
								{
									"begin": 1494,
									"end": 1510,
									"name": "GT",
									"source": 10
								},
								{
									"begin": 1491,
									"end": 1527,
									"name": "ISZERO",
									"source": 10
								},
								{
									"begin": 1491,
									"end": 1527,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "40"
								},
								{
									"begin": 1491,
									"end": 1527,
									"name": "JUMPI",
									"source": 10
								},
								{
									"begin": 1523,
									"end": 1524,
									"name": "PUSH",
									"source": 10,
									"value": "0"
								},
								{
									"begin": 1520,
									"end": 1521,
									"name": "DUP1",
									"source": 10
								},
								{
									"begin": 1513,
									"end": 1525,
									"name": "REVERT",
									"source": 10
								},
								{
									"begin": 1491,
									"end": 1527,
									"name": "tag",
									"source": 10,
									"value": "40"
								},
								{
									"begin": 1491,
									"end": 1527,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 1491,
									"end": 1527,
									"name": "POP",
									"source": 10
								},
								{
									"begin": 1546,
									"end": 1609,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "41"
								},
								{
									"begin": 1601,
									"end": 1608,
									"name": "DUP7",
									"source": 10
								},
								{
									"begin": 1590,
									"end": 1598,
									"name": "DUP3",
									"source": 10
								},
								{
									"begin": 1579,
									"end": 1588,
									"name": "DUP8",
									"source": 10
								},
								{
									"begin": 1575,
									"end": 1599,
									"name": "ADD",
									"source": 10
								},
								{
									"begin": 1546,
									"end": 1609,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "22"
								},
								{
									"begin": 1546,
									"end": 1609,
									"name": "JUMP",
									"source": 10,
									"value": "[in]"
								},
								{
									"begin": 1546,
									"end": 1609,
									"name": "tag",
									"source": 10,
									"value": "41"
								},
								{
									"begin": 1546,
									"end": 1609,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 1652,
									"end": 1654,
									"name": "PUSH",
									"source": 10,
									"value": "40"
								},
								{
									"begin": 1637,
									"end": 1655,
									"name": "DUP7",
									"source": 10
								},
								{
									"begin": 1637,
									"end": 1655,
									"name": "ADD",
									"source": 10
								},
								{
									"begin": 1631,
									"end": 1656,
									"name": "MLOAD",
									"source": 10
								},
								{
									"begin": 1536,
									"end": 1609,
									"name": "SWAP1",
									"source": 10
								},
								{
									"begin": 1536,
									"end": 1609,
									"name": "SWAP4",
									"source": 10
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 1631,
									"end": 1656,
									"name": "SWAP1",
									"source": 10
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 1685,
									"end": 1716,
									"name": "DUP2",
									"source": 10
								},
								{
									"begin": 1685,
									"end": 1716,
									"name": "AND",
									"source": 10
								},
								{
									"begin": 1675,
									"end": 1717,
									"name": "DUP2",
									"source": 10
								},
								{
									"begin": 1675,
									"end": 1717,
									"name": "EQ",
									"source": 10
								},
								{
									"begin": 1665,
									"end": 1735,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "42"
								},
								{
									"begin": 1665,
									"end": 1735,
									"name": "JUMPI",
									"source": 10
								},
								{
									"begin": 1731,
									"end": 1732,
									"name": "PUSH",
									"source": 10,
									"value": "0"
								},
								{
									"begin": 1728,
									"end": 1729,
									"name": "DUP1",
									"source": 10
								},
								{
									"begin": 1721,
									"end": 1733,
									"name": "REVERT",
									"source": 10
								},
								{
									"begin": 1665,
									"end": 1735,
									"name": "tag",
									"source": 10,
									"value": "42"
								},
								{
									"begin": 1665,
									"end": 1735,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 1754,
									"end": 1759,
									"name": "DUP1",
									"source": 10
								},
								{
									"begin": 1744,
									"end": 1759,
									"name": "SWAP2",
									"source": 10
								},
								{
									"begin": 1744,
									"end": 1759,
									"name": "POP",
									"source": 10
								},
								{
									"begin": 1744,
									"end": 1759,
									"name": "POP",
									"source": 10
								},
								{
									"begin": 1036,
									"end": 1765,
									"name": "SWAP3",
									"source": 10
								},
								{
									"begin": 1036,
									"end": 1765,
									"name": "POP",
									"source": 10
								},
								{
									"begin": 1036,
									"end": 1765,
									"name": "SWAP3",
									"source": 10
								},
								{
									"begin": 1036,
									"end": 1765,
									"name": "POP",
									"source": 10
								},
								{
									"begin": 1036,
									"end": 1765,
									"name": "SWAP3",
									"source": 10
								},
								{
									"begin": 1036,
									"end": 1765,
									"name": "JUMP",
									"source": 10,
									"value": "[out]"
								},
								{
									"begin": 1770,
									"end": 2150,
									"name": "tag",
									"source": 10,
									"value": "11"
								},
								{
									"begin": 1770,
									"end": 2150,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 1849,
									"end": 1850,
									"name": "PUSH",
									"source": 10,
									"value": "1"
								},
								{
									"begin": 1845,
									"end": 1857,
									"name": "DUP2",
									"source": 10
								},
								{
									"begin": 1845,
									"end": 1857,
									"name": "DUP2",
									"source": 10
								},
								{
									"begin": 1845,
									"end": 1857,
									"name": "SHR",
									"source": 10
								},
								{
									"begin": 1845,
									"end": 1857,
									"name": "SWAP1",
									"source": 10
								},
								{
									"begin": 1892,
									"end": 1904,
									"name": "DUP3",
									"source": 10
								},
								{
									"begin": 1892,
									"end": 1904,
									"name": "AND",
									"source": 10
								},
								{
									"begin": 1892,
									"end": 1904,
									"name": "DUP1",
									"source": 10
								},
								{
									"begin": 1913,
									"end": 1974,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "44"
								},
								{
									"begin": 1913,
									"end": 1974,
									"name": "JUMPI",
									"source": 10
								},
								{
									"begin": 1967,
									"end": 1971,
									"name": "PUSH",
									"source": 10,
									"value": "7F"
								},
								{
									"begin": 1959,
									"end": 1965,
									"name": "DUP3",
									"source": 10
								},
								{
									"begin": 1955,
									"end": 1972,
									"name": "AND",
									"source": 10
								},
								{
									"begin": 1945,
									"end": 1972,
									"name": "SWAP2",
									"source": 10
								},
								{
									"begin": 1945,
									"end": 1972,
									"name": "POP",
									"source": 10
								},
								{
									"begin": 1913,
									"end": 1974,
									"name": "tag",
									"source": 10,
									"value": "44"
								},
								{
									"begin": 1913,
									"end": 1974,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 2020,
									"end": 2022,
									"name": "PUSH",
									"source": 10,
									"value": "20"
								},
								{
									"begin": 2012,
									"end": 2018,
									"name": "DUP3",
									"source": 10
								},
								{
									"begin": 2009,
									"end": 2023,
									"name": "LT",
									"source": 10
								},
								{
									"begin": 1989,
									"end": 2007,
									"name": "DUP2",
									"source": 10
								},
								{
									"begin": 1986,
									"end": 2024,
									"name": "EQ",
									"source": 10
								},
								{
									"begin": 1983,
									"end": 2144,
									"name": "ISZERO",
									"source": 10
								},
								{
									"begin": 1983,
									"end": 2144,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "45"
								},
								{
									"begin": 1983,
									"end": 2144,
									"name": "JUMPI",
									"source": 10
								},
								{
									"begin": 2066,
									"end": 2076,
									"name": "PUSH",
									"source": 10,
									"value": "4E487B71"
								},
								{
									"begin": 2061,
									"end": 2064,
									"name": "PUSH",
									"source": 10,
									"value": "E0"
								},
								{
									"begin": 2057,
									"end": 2077,
									"name": "SHL",
									"source": 10
								},
								{
									"begin": 2054,
									"end": 2055,
									"name": "PUSH",
									"source": 10,
									"value": "0"
								},
								{
									"begin": 2047,
									"end": 2078,
									"name": "MSTORE",
									"source": 10
								},
								{
									"begin": 2101,
									"end": 2105,
									"name": "PUSH",
									"source": 10,
									"value": "22"
								},
								{
									"begin": 2098,
									"end": 2099,
									"name": "PUSH",
									"source": 10,
									"value": "4"
								},
								{
									"begin": 2091,
									"end": 2106,
									"name": "MSTORE",
									"source": 10
								},
								{
									"begin": 2129,
									"end": 2133,
									"name": "PUSH",
									"source": 10,
									"value": "24"
								},
								{
									"begin": 2126,
									"end": 2127,
									"name": "PUSH",
									"source": 10,
									"value": "0"
								},
								{
									"begin": 2119,
									"end": 2134,
									"name": "REVERT",
									"source": 10
								},
								{
									"begin": 1983,
									"end": 2144,
									"name": "tag",
									"source": 10,
									"value": "45"
								},
								{
									"begin": 1983,
									"end": 2144,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 1983,
									"end": 2144,
									"name": "POP",
									"source": 10
								},
								{
									"begin": 1770,
									"end": 2150,
									"name": "SWAP2",
									"source": 10
								},
								{
									"begin": 1770,
									"end": 2150,
									"name": "SWAP1",
									"source": 10
								},
								{
									"begin": 1770,
									"end": 2150,
									"name": "POP",
									"source": 10
								},
								{
									"begin": 1770,
									"end": 2150,
									"name": "JUMP",
									"source": 10,
									"value": "[out]"
								},
								{
									"begin": 1770,
									"end": 2150,
									"name": "tag",
									"source": 10,
									"value": "23"
								},
								{
									"begin": 1770,
									"end": 2150,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 745,
									"end": 17565,
									"name": "PUSH #[$]",
									"source": 9,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 745,
									"end": 17565,
									"name": "DUP1",
									"source": 9
								},
								{
									"begin": 745,
									"end": 17565,
									"name": "PUSH [$]",
									"source": 9,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 745,
									"end": 17565,
									"name": "PUSH",
									"source": 9,
									"value": "0"
								},
								{
									"begin": 745,
									"end": 17565,
									"name": "CODECOPY",
									"source": 9
								},
								{
									"begin": 745,
									"end": 17565,
									"name": "PUSH",
									"source": 9,
									"value": "0"
								},
								{
									"begin": 745,
									"end": 17565,
									"name": "RETURN",
									"source": 9
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220dcd4107ecdae1c68fc5ddb541ebfe4982a8137784f4f83acad9aad1b16295bee64736f6c634300080a0033",
									".code": [
										{
											"begin": 745,
											"end": 17565,
											"name": "PUSH",
											"source": 9,
											"value": "80"
										},
										{
											"begin": 745,
											"end": 17565,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 745,
											"end": 17565,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 745,
											"end": 17565,
											"name": "CALLVALUE",
											"source": 9
										},
										{
											"begin": 745,
											"end": 17565,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 745,
											"end": 17565,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 745,
											"end": 17565,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "1"
										},
										{
											"begin": 745,
											"end": 17565,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 745,
											"end": 17565,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 745,
											"end": 17565,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 745,
											"end": 17565,
											"name": "REVERT",
											"source": 9
										},
										{
											"begin": 745,
											"end": 17565,
											"name": "tag",
											"source": 9,
											"value": "1"
										},
										{
											"begin": 745,
											"end": 17565,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 745,
											"end": 17565,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 745,
											"end": 17565,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 745,
											"end": 17565,
											"name": "CALLDATASIZE",
											"source": 9
										},
										{
											"begin": 745,
											"end": 17565,
											"name": "LT",
											"source": 9
										},
										{
											"begin": 745,
											"end": 17565,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "2"
										},
										{
											"begin": 745,
											"end": 17565,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 745,
											"end": 17565,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 745,
											"end": 17565,
											"name": "CALLDATALOAD",
											"source": 9
										},
										{
											"begin": 745,
											"end": 17565,
											"name": "PUSH",
											"source": 9,
											"value": "E0"
										},
										{
											"begin": 745,
											"end": 17565,
											"name": "SHR",
											"source": 9
										},
										{
											"begin": 745,
											"end": 17565,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 745,
											"end": 17565,
											"name": "PUSH",
											"source": 9,
											"value": "1FFC9A7"
										},
										{
											"begin": 745,
											"end": 17565,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 745,
											"end": 17565,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "3"
										},
										{
											"begin": 745,
											"end": 17565,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 745,
											"end": 17565,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 745,
											"end": 17565,
											"name": "PUSH",
											"source": 9,
											"value": "6FDDE03"
										},
										{
											"begin": 745,
											"end": 17565,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 745,
											"end": 17565,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 745,
											"end": 17565,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 745,
											"end": 17565,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 745,
											"end": 17565,
											"name": "PUSH",
											"source": 9,
											"value": "81812FC"
										},
										{
											"begin": 745,
											"end": 17565,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 745,
											"end": 17565,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "5"
										},
										{
											"begin": 745,
											"end": 17565,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 745,
											"end": 17565,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 745,
											"end": 17565,
											"name": "PUSH",
											"source": 9,
											"value": "95EA7B3"
										},
										{
											"begin": 745,
											"end": 17565,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 745,
											"end": 17565,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "6"
										},
										{
											"begin": 745,
											"end": 17565,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 745,
											"end": 17565,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 745,
											"end": 17565,
											"name": "PUSH",
											"source": 9,
											"value": "23B872DD"
										},
										{
											"begin": 745,
											"end": 17565,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 745,
											"end": 17565,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "7"
										},
										{
											"begin": 745,
											"end": 17565,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 745,
											"end": 17565,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 745,
											"end": 17565,
											"name": "PUSH",
											"source": 9,
											"value": "40C10F19"
										},
										{
											"begin": 745,
											"end": 17565,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 745,
											"end": 17565,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "8"
										},
										{
											"begin": 745,
											"end": 17565,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 745,
											"end": 17565,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 745,
											"end": 17565,
											"name": "PUSH",
											"source": 9,
											"value": "42842E0E"
										},
										{
											"begin": 745,
											"end": 17565,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 745,
											"end": 17565,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "9"
										},
										{
											"begin": 745,
											"end": 17565,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 745,
											"end": 17565,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 745,
											"end": 17565,
											"name": "PUSH",
											"source": 9,
											"value": "42966C68"
										},
										{
											"begin": 745,
											"end": 17565,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 745,
											"end": 17565,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "10"
										},
										{
											"begin": 745,
											"end": 17565,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 745,
											"end": 17565,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 745,
											"end": 17565,
											"name": "PUSH",
											"source": 9,
											"value": "6352211E"
										},
										{
											"begin": 745,
											"end": 17565,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 745,
											"end": 17565,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "11"
										},
										{
											"begin": 745,
											"end": 17565,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 745,
											"end": 17565,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 745,
											"end": 17565,
											"name": "PUSH",
											"source": 9,
											"value": "70A08231"
										},
										{
											"begin": 745,
											"end": 17565,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 745,
											"end": 17565,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "12"
										},
										{
											"begin": 745,
											"end": 17565,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 745,
											"end": 17565,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 745,
											"end": 17565,
											"name": "PUSH",
											"source": 9,
											"value": "95D89B41"
										},
										{
											"begin": 745,
											"end": 17565,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 745,
											"end": 17565,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "13"
										},
										{
											"begin": 745,
											"end": 17565,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 745,
											"end": 17565,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 745,
											"end": 17565,
											"name": "PUSH",
											"source": 9,
											"value": "A22CB465"
										},
										{
											"begin": 745,
											"end": 17565,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 745,
											"end": 17565,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "14"
										},
										{
											"begin": 745,
											"end": 17565,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 745,
											"end": 17565,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 745,
											"end": 17565,
											"name": "PUSH",
											"source": 9,
											"value": "B88D4FDE"
										},
										{
											"begin": 745,
											"end": 17565,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 745,
											"end": 17565,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "15"
										},
										{
											"begin": 745,
											"end": 17565,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 745,
											"end": 17565,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 745,
											"end": 17565,
											"name": "PUSH",
											"source": 9,
											"value": "C4D66DE8"
										},
										{
											"begin": 745,
											"end": 17565,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 745,
											"end": 17565,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "16"
										},
										{
											"begin": 745,
											"end": 17565,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 745,
											"end": 17565,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 745,
											"end": 17565,
											"name": "PUSH",
											"source": 9,
											"value": "C87B56DD"
										},
										{
											"begin": 745,
											"end": 17565,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 745,
											"end": 17565,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "17"
										},
										{
											"begin": 745,
											"end": 17565,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 745,
											"end": 17565,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 745,
											"end": 17565,
											"name": "PUSH",
											"source": 9,
											"value": "E985E9C5"
										},
										{
											"begin": 745,
											"end": 17565,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 745,
											"end": 17565,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "18"
										},
										{
											"begin": 745,
											"end": 17565,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 745,
											"end": 17565,
											"name": "tag",
											"source": 9,
											"value": "2"
										},
										{
											"begin": 745,
											"end": 17565,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 745,
											"end": 17565,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 745,
											"end": 17565,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 745,
											"end": 17565,
											"name": "REVERT",
											"source": 9
										},
										{
											"begin": 2421,
											"end": 2721,
											"name": "tag",
											"source": 9,
											"value": "3"
										},
										{
											"begin": 2421,
											"end": 2721,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 2421,
											"end": 2721,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "19"
										},
										{
											"begin": 2421,
											"end": 2721,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 2421,
											"end": 2721,
											"name": "CALLDATASIZE",
											"source": 9
										},
										{
											"begin": 2421,
											"end": 2721,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 2421,
											"end": 2721,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "21"
										},
										{
											"begin": 2421,
											"end": 2721,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 2421,
											"end": 2721,
											"name": "tag",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 2421,
											"end": 2721,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 2421,
											"end": 2721,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "22"
										},
										{
											"begin": 2421,
											"end": 2721,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 2421,
											"end": 2721,
											"name": "tag",
											"source": 9,
											"value": "19"
										},
										{
											"begin": 2421,
											"end": 2721,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 2421,
											"end": 2721,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 2421,
											"end": 2721,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 565,
											"end": 579,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 565,
											"end": 579,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 558,
											"end": 580,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 540,
											"end": 581,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 540,
											"end": 581,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 528,
											"end": 530,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 513,
											"end": 531,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 2421,
											"end": 2721,
											"name": "tag",
											"source": 9,
											"value": "23"
										},
										{
											"begin": 2421,
											"end": 2721,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 2421,
											"end": 2721,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 2421,
											"end": 2721,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 2421,
											"end": 2721,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 2421,
											"end": 2721,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 2421,
											"end": 2721,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 2421,
											"end": 2721,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2421,
											"end": 2721,
											"name": "RETURN",
											"source": 9
										},
										{
											"begin": 3324,
											"end": 3422,
											"name": "tag",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 3324,
											"end": 3422,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 3324,
											"end": 3422,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "25"
										},
										{
											"begin": 3324,
											"end": 3422,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "26"
										},
										{
											"begin": 3324,
											"end": 3422,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 3324,
											"end": 3422,
											"name": "tag",
											"source": 9,
											"value": "25"
										},
										{
											"begin": 3324,
											"end": 3422,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 3324,
											"end": 3422,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 3324,
											"end": 3422,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 3324,
											"end": 3422,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "23"
										},
										{
											"begin": 3324,
											"end": 3422,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 3324,
											"end": 3422,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 3324,
											"end": 3422,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "28"
										},
										{
											"begin": 3324,
											"end": 3422,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 4791,
											"end": 4958,
											"name": "tag",
											"source": 9,
											"value": "5"
										},
										{
											"begin": 4791,
											"end": 4958,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 4791,
											"end": 4958,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "29"
										},
										{
											"begin": 4791,
											"end": 4958,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "30"
										},
										{
											"begin": 4791,
											"end": 4958,
											"name": "CALLDATASIZE",
											"source": 9
										},
										{
											"begin": 4791,
											"end": 4958,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 4791,
											"end": 4958,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "31"
										},
										{
											"begin": 4791,
											"end": 4958,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 4791,
											"end": 4958,
											"name": "tag",
											"source": 9,
											"value": "30"
										},
										{
											"begin": 4791,
											"end": 4958,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 4791,
											"end": 4958,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "32"
										},
										{
											"begin": 4791,
											"end": 4958,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 4791,
											"end": 4958,
											"name": "tag",
											"source": 9,
											"value": "29"
										},
										{
											"begin": 4791,
											"end": 4958,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 4791,
											"end": 4958,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 4791,
											"end": 4958,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1692,
											"end": 1724,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 1692,
											"end": 1724,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 1692,
											"end": 1724,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 1674,
											"end": 1725,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 1674,
											"end": 1725,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 1662,
											"end": 1664,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 1647,
											"end": 1665,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 4791,
											"end": 4958,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "23"
										},
										{
											"begin": 1528,
											"end": 1731,
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 4321,
											"end": 4730,
											"name": "tag",
											"source": 9,
											"value": "6"
										},
										{
											"begin": 4321,
											"end": 4730,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 4321,
											"end": 4730,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "35"
										},
										{
											"begin": 4321,
											"end": 4730,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "36"
										},
										{
											"begin": 4321,
											"end": 4730,
											"name": "CALLDATASIZE",
											"source": 9
										},
										{
											"begin": 4321,
											"end": 4730,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 4321,
											"end": 4730,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "37"
										},
										{
											"begin": 4321,
											"end": 4730,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 4321,
											"end": 4730,
											"name": "tag",
											"source": 9,
											"value": "36"
										},
										{
											"begin": 4321,
											"end": 4730,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 4321,
											"end": 4730,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "38"
										},
										{
											"begin": 4321,
											"end": 4730,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 4321,
											"end": 4730,
											"name": "tag",
											"source": 9,
											"value": "35"
										},
										{
											"begin": 4321,
											"end": 4730,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 4321,
											"end": 4730,
											"name": "STOP",
											"source": 9
										},
										{
											"begin": 5468,
											"end": 5765,
											"name": "tag",
											"source": 9,
											"value": "7"
										},
										{
											"begin": 5468,
											"end": 5765,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 5468,
											"end": 5765,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "35"
										},
										{
											"begin": 5468,
											"end": 5765,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 5468,
											"end": 5765,
											"name": "CALLDATASIZE",
											"source": 9
										},
										{
											"begin": 5468,
											"end": 5765,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 5468,
											"end": 5765,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "41"
										},
										{
											"begin": 5468,
											"end": 5765,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 5468,
											"end": 5765,
											"name": "tag",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 5468,
											"end": 5765,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 5468,
											"end": 5765,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "42"
										},
										{
											"begin": 5468,
											"end": 5765,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 2046,
											"end": 2152,
											"name": "tag",
											"source": 9,
											"value": "8"
										},
										{
											"begin": 2046,
											"end": 2152,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 2046,
											"end": 2152,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "35"
										},
										{
											"begin": 2046,
											"end": 2152,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "44"
										},
										{
											"begin": 2046,
											"end": 2152,
											"name": "CALLDATASIZE",
											"source": 9
										},
										{
											"begin": 2046,
											"end": 2152,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 2046,
											"end": 2152,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "37"
										},
										{
											"begin": 2046,
											"end": 2152,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 2046,
											"end": 2152,
											"name": "tag",
											"source": 9,
											"value": "44"
										},
										{
											"begin": 2046,
											"end": 2152,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 2046,
											"end": 2152,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "45"
										},
										{
											"begin": 2046,
											"end": 2152,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 5831,
											"end": 5980,
											"name": "tag",
											"source": 9,
											"value": "9"
										},
										{
											"begin": 5831,
											"end": 5980,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 5831,
											"end": 5980,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "35"
										},
										{
											"begin": 5831,
											"end": 5980,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "47"
										},
										{
											"begin": 5831,
											"end": 5980,
											"name": "CALLDATASIZE",
											"source": 9
										},
										{
											"begin": 5831,
											"end": 5980,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 5831,
											"end": 5980,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "41"
										},
										{
											"begin": 5831,
											"end": 5980,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 5831,
											"end": 5980,
											"name": "tag",
											"source": 9,
											"value": "47"
										},
										{
											"begin": 5831,
											"end": 5980,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 5831,
											"end": 5980,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "48"
										},
										{
											"begin": 5831,
											"end": 5980,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 2158,
											"end": 2354,
											"name": "tag",
											"source": 9,
											"value": "10"
										},
										{
											"begin": 2158,
											"end": 2354,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 2158,
											"end": 2354,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "35"
										},
										{
											"begin": 2158,
											"end": 2354,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "50"
										},
										{
											"begin": 2158,
											"end": 2354,
											"name": "CALLDATASIZE",
											"source": 9
										},
										{
											"begin": 2158,
											"end": 2354,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 2158,
											"end": 2354,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "31"
										},
										{
											"begin": 2158,
											"end": 2354,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 2158,
											"end": 2354,
											"name": "tag",
											"source": 9,
											"value": "50"
										},
										{
											"begin": 2158,
											"end": 2354,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 2158,
											"end": 2354,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "51"
										},
										{
											"begin": 2158,
											"end": 2354,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 3042,
											"end": 3262,
											"name": "tag",
											"source": 9,
											"value": "11"
										},
										{
											"begin": 3042,
											"end": 3262,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 3042,
											"end": 3262,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "29"
										},
										{
											"begin": 3042,
											"end": 3262,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "53"
										},
										{
											"begin": 3042,
											"end": 3262,
											"name": "CALLDATASIZE",
											"source": 9
										},
										{
											"begin": 3042,
											"end": 3262,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 3042,
											"end": 3262,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "31"
										},
										{
											"begin": 3042,
											"end": 3262,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 3042,
											"end": 3262,
											"name": "tag",
											"source": 9,
											"value": "53"
										},
										{
											"begin": 3042,
											"end": 3262,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 3042,
											"end": 3262,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "54"
										},
										{
											"begin": 3042,
											"end": 3262,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 2780,
											"end": 2985,
											"name": "tag",
											"source": 9,
											"value": "12"
										},
										{
											"begin": 2780,
											"end": 2985,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 2780,
											"end": 2985,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "56"
										},
										{
											"begin": 2780,
											"end": 2985,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "57"
										},
										{
											"begin": 2780,
											"end": 2985,
											"name": "CALLDATASIZE",
											"source": 9
										},
										{
											"begin": 2780,
											"end": 2985,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 2780,
											"end": 2985,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "58"
										},
										{
											"begin": 2780,
											"end": 2985,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 2780,
											"end": 2985,
											"name": "tag",
											"source": 9,
											"value": "57"
										},
										{
											"begin": 2780,
											"end": 2985,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 2780,
											"end": 2985,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "59"
										},
										{
											"begin": 2780,
											"end": 2985,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 2780,
											"end": 2985,
											"name": "tag",
											"source": 9,
											"value": "56"
										},
										{
											"begin": 2780,
											"end": 2985,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 2780,
											"end": 2985,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 2780,
											"end": 2985,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 2843,
											"end": 2868,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 2843,
											"end": 2868,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 2843,
											"end": 2868,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 2831,
											"end": 2833,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 2816,
											"end": 2834,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 2780,
											"end": 2985,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "23"
										},
										{
											"begin": 2697,
											"end": 2874,
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 3486,
											"end": 3588,
											"name": "tag",
											"source": 9,
											"value": "13"
										},
										{
											"begin": 3486,
											"end": 3588,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 3486,
											"end": 3588,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "25"
										},
										{
											"begin": 3486,
											"end": 3588,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "63"
										},
										{
											"begin": 3486,
											"end": 3588,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 5025,
											"end": 5178,
											"name": "tag",
											"source": 9,
											"value": "14"
										},
										{
											"begin": 5025,
											"end": 5178,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 5025,
											"end": 5178,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "35"
										},
										{
											"begin": 5025,
											"end": 5178,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "66"
										},
										{
											"begin": 5025,
											"end": 5178,
											"name": "CALLDATASIZE",
											"source": 9
										},
										{
											"begin": 5025,
											"end": 5178,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 5025,
											"end": 5178,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "67"
										},
										{
											"begin": 5025,
											"end": 5178,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 5025,
											"end": 5178,
											"name": "tag",
											"source": 9,
											"value": "66"
										},
										{
											"begin": 5025,
											"end": 5178,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 5025,
											"end": 5178,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "68"
										},
										{
											"begin": 5025,
											"end": 5178,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 6046,
											"end": 6323,
											"name": "tag",
											"source": 9,
											"value": "15"
										},
										{
											"begin": 6046,
											"end": 6323,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 6046,
											"end": 6323,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "35"
										},
										{
											"begin": 6046,
											"end": 6323,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "70"
										},
										{
											"begin": 6046,
											"end": 6323,
											"name": "CALLDATASIZE",
											"source": 9
										},
										{
											"begin": 6046,
											"end": 6323,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 6046,
											"end": 6323,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "71"
										},
										{
											"begin": 6046,
											"end": 6323,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 6046,
											"end": 6323,
											"name": "tag",
											"source": 9,
											"value": "70"
										},
										{
											"begin": 6046,
											"end": 6323,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 6046,
											"end": 6323,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "72"
										},
										{
											"begin": 6046,
											"end": 6323,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 1946,
											"end": 2036,
											"name": "tag",
											"source": 9,
											"value": "16"
										},
										{
											"begin": 1946,
											"end": 2036,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 1946,
											"end": 2036,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "35"
										},
										{
											"begin": 1946,
											"end": 2036,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "74"
										},
										{
											"begin": 1946,
											"end": 2036,
											"name": "CALLDATASIZE",
											"source": 9
										},
										{
											"begin": 1946,
											"end": 2036,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 1946,
											"end": 2036,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "58"
										},
										{
											"begin": 1946,
											"end": 2036,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 1946,
											"end": 2036,
											"name": "tag",
											"source": 9,
											"value": "74"
										},
										{
											"begin": 1946,
											"end": 2036,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 1946,
											"end": 2036,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "75"
										},
										{
											"begin": 1946,
											"end": 2036,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 3654,
											"end": 3930,
											"name": "tag",
											"source": 9,
											"value": "17"
										},
										{
											"begin": 3654,
											"end": 3930,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 3654,
											"end": 3930,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "25"
										},
										{
											"begin": 3654,
											"end": 3930,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "77"
										},
										{
											"begin": 3654,
											"end": 3930,
											"name": "CALLDATASIZE",
											"source": 9
										},
										{
											"begin": 3654,
											"end": 3930,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 3654,
											"end": 3930,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "31"
										},
										{
											"begin": 3654,
											"end": 3930,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 3654,
											"end": 3930,
											"name": "tag",
											"source": 9,
											"value": "77"
										},
										{
											"begin": 3654,
											"end": 3930,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 3654,
											"end": 3930,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "78"
										},
										{
											"begin": 3654,
											"end": 3930,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 5244,
											"end": 5406,
											"name": "tag",
											"source": 9,
											"value": "18"
										},
										{
											"begin": 5244,
											"end": 5406,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 5244,
											"end": 5406,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "19"
										},
										{
											"begin": 5244,
											"end": 5406,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "81"
										},
										{
											"begin": 5244,
											"end": 5406,
											"name": "CALLDATASIZE",
											"source": 9
										},
										{
											"begin": 5244,
											"end": 5406,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 5244,
											"end": 5406,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "82"
										},
										{
											"begin": 5244,
											"end": 5406,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 5244,
											"end": 5406,
											"name": "tag",
											"source": 9,
											"value": "81"
										},
										{
											"begin": 5244,
											"end": 5406,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 5244,
											"end": 5406,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "83"
										},
										{
											"begin": 5244,
											"end": 5406,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 2421,
											"end": 2721,
											"name": "tag",
											"source": 9,
											"value": "22"
										},
										{
											"begin": 2421,
											"end": 2721,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 2523,
											"end": 2527,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 2558,
											"end": 2598,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 2558,
											"end": 2598,
											"name": "AND",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "80AC58CD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 2558,
											"end": 2598,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 2558,
											"end": 2598,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 2558,
											"end": 2662,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "86"
										},
										{
											"begin": 2558,
											"end": 2662,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 2614,
											"end": 2662,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 2614,
											"end": 2662,
											"name": "AND",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "5B5E139F"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 2614,
											"end": 2662,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 2558,
											"end": 2662,
											"name": "tag",
											"source": 9,
											"value": "86"
										},
										{
											"begin": 2558,
											"end": 2662,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 2558,
											"end": 2714,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 2558,
											"end": 2714,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "88"
										},
										{
											"begin": 2558,
											"end": 2714,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1FFC9A7"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 937,
											"end": 977,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 937,
											"end": 977,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 937,
											"end": 977,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 2678,
											"end": 2714,
											"name": "tag",
											"source": 9,
											"value": "88"
										},
										{
											"begin": 2678,
											"end": 2714,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 2539,
											"end": 2714,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": 2421,
											"end": 2721,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2421,
											"end": 2721,
											"name": "JUMP",
											"source": 9,
											"value": "[out]"
										},
										{
											"begin": 3324,
											"end": 3422,
											"name": "tag",
											"source": 9,
											"value": "26"
										},
										{
											"begin": 3324,
											"end": 3422,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 3378,
											"end": 3391,
											"name": "PUSH",
											"source": 9,
											"value": "60"
										},
										{
											"begin": 3410,
											"end": 3415,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 3403,
											"end": 3415,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 3403,
											"end": 3415,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 3403,
											"end": 3415,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "91"
										},
										{
											"begin": 3403,
											"end": 3415,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 3403,
											"end": 3415,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "92"
										},
										{
											"begin": 3403,
											"end": 3415,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 3403,
											"end": 3415,
											"name": "tag",
											"source": 9,
											"value": "91"
										},
										{
											"begin": 3403,
											"end": 3415,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 3403,
											"end": 3415,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 3403,
											"end": 3415,
											"name": "PUSH",
											"source": 9,
											"value": "1F"
										},
										{
											"begin": 3403,
											"end": 3415,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 3403,
											"end": 3415,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 3403,
											"end": 3415,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 3403,
											"end": 3415,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 3403,
											"end": 3415,
											"name": "DIV",
											"source": 9
										},
										{
											"begin": 3403,
											"end": 3415,
											"name": "MUL",
											"source": 9
										},
										{
											"begin": 3403,
											"end": 3415,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 3403,
											"end": 3415,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 3403,
											"end": 3415,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 3403,
											"end": 3415,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 3403,
											"end": 3415,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 3403,
											"end": 3415,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 3403,
											"end": 3415,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 3403,
											"end": 3415,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 3403,
											"end": 3415,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 3403,
											"end": 3415,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 3403,
											"end": 3415,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": 3403,
											"end": 3415,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 3403,
											"end": 3415,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 3403,
											"end": 3415,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 3403,
											"end": 3415,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 3403,
											"end": 3415,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 3403,
											"end": 3415,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 3403,
											"end": 3415,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 3403,
											"end": 3415,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 3403,
											"end": 3415,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 3403,
											"end": 3415,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 3403,
											"end": 3415,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "93"
										},
										{
											"begin": 3403,
											"end": 3415,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 3403,
											"end": 3415,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "92"
										},
										{
											"begin": 3403,
											"end": 3415,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 3403,
											"end": 3415,
											"name": "tag",
											"source": 9,
											"value": "93"
										},
										{
											"begin": 3403,
											"end": 3415,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 3403,
											"end": 3415,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 3403,
											"end": 3415,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 3403,
											"end": 3415,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "94"
										},
										{
											"begin": 3403,
											"end": 3415,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 3403,
											"end": 3415,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 3403,
											"end": 3415,
											"name": "PUSH",
											"source": 9,
											"value": "1F"
										},
										{
											"begin": 3403,
											"end": 3415,
											"name": "LT",
											"source": 9
										},
										{
											"begin": 3403,
											"end": 3415,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "95"
										},
										{
											"begin": 3403,
											"end": 3415,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 3403,
											"end": 3415,
											"name": "PUSH",
											"source": 9,
											"value": "100"
										},
										{
											"begin": 3403,
											"end": 3415,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 3403,
											"end": 3415,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 3403,
											"end": 3415,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 3403,
											"end": 3415,
											"name": "DIV",
											"source": 9
										},
										{
											"begin": 3403,
											"end": 3415,
											"name": "MUL",
											"source": 9
										},
										{
											"begin": 3403,
											"end": 3415,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 3403,
											"end": 3415,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 3403,
											"end": 3415,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 3403,
											"end": 3415,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 3403,
											"end": 3415,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 3403,
											"end": 3415,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 3403,
											"end": 3415,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "94"
										},
										{
											"begin": 3403,
											"end": 3415,
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 3403,
											"end": 3415,
											"name": "tag",
											"source": 9,
											"value": "95"
										},
										{
											"begin": 3403,
											"end": 3415,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 3403,
											"end": 3415,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 3403,
											"end": 3415,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 3403,
											"end": 3415,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 3403,
											"end": 3415,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 3403,
											"end": 3415,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 3403,
											"end": 3415,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 3403,
											"end": 3415,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 3403,
											"end": 3415,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 3403,
											"end": 3415,
											"name": "KECCAK256",
											"source": 9
										},
										{
											"begin": 3403,
											"end": 3415,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 3403,
											"end": 3415,
											"name": "tag",
											"source": 9,
											"value": "96"
										},
										{
											"begin": 3403,
											"end": 3415,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 3403,
											"end": 3415,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 3403,
											"end": 3415,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 3403,
											"end": 3415,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 3403,
											"end": 3415,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 3403,
											"end": 3415,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 3403,
											"end": 3415,
											"name": "PUSH",
											"source": 9,
											"value": "1"
										},
										{
											"begin": 3403,
											"end": 3415,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 3403,
											"end": 3415,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 3403,
											"end": 3415,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 3403,
											"end": 3415,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 3403,
											"end": 3415,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 3403,
											"end": 3415,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 3403,
											"end": 3415,
											"name": "GT",
											"source": 9
										},
										{
											"begin": 3403,
											"end": 3415,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "96"
										},
										{
											"begin": 3403,
											"end": 3415,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 3403,
											"end": 3415,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 3403,
											"end": 3415,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 3403,
											"end": 3415,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 3403,
											"end": 3415,
											"name": "PUSH",
											"source": 9,
											"value": "1F"
										},
										{
											"begin": 3403,
											"end": 3415,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 3403,
											"end": 3415,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 3403,
											"end": 3415,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 3403,
											"end": 3415,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 3403,
											"end": 3415,
											"name": "tag",
											"source": 9,
											"value": "94"
										},
										{
											"begin": 3403,
											"end": 3415,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 3403,
											"end": 3415,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 3403,
											"end": 3415,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 3403,
											"end": 3415,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 3403,
											"end": 3415,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 3403,
											"end": 3415,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 3403,
											"end": 3415,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 3403,
											"end": 3415,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 3324,
											"end": 3422,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 3324,
											"end": 3422,
											"name": "JUMP",
											"source": 9,
											"value": "[out]"
										},
										{
											"begin": 4791,
											"end": 4958,
											"name": "tag",
											"source": 9,
											"value": "32"
										},
										{
											"begin": 4791,
											"end": 4958,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 4867,
											"end": 4874,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 4886,
											"end": 4909,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "98"
										},
										{
											"begin": 4901,
											"end": 4908,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 4886,
											"end": 4900,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "99"
										},
										{
											"begin": 4886,
											"end": 4909,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 4886,
											"end": 4909,
											"name": "tag",
											"source": 9,
											"value": "98"
										},
										{
											"begin": 4886,
											"end": 4909,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 4927,
											"end": 4951,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 4927,
											"end": 4951,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 4927,
											"end": 4951,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 4927,
											"end": 4951,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 4927,
											"end": 4942,
											"name": "PUSH",
											"source": 9,
											"value": "6"
										},
										{
											"begin": 4927,
											"end": 4951,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 4927,
											"end": 4951,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 4927,
											"end": 4951,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 4927,
											"end": 4951,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 4927,
											"end": 4951,
											"name": "KECCAK256",
											"source": 9
										},
										{
											"begin": 4927,
											"end": 4951,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 4927,
											"end": 4951,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 4927,
											"end": 4951,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 4791,
											"end": 4958,
											"name": "JUMP",
											"source": 9,
											"value": "[out]"
										},
										{
											"begin": 4321,
											"end": 4730,
											"name": "tag",
											"source": 9,
											"value": "38"
										},
										{
											"begin": 4321,
											"end": 4730,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 4401,
											"end": 4414,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 4417,
											"end": 4441,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "101"
										},
										{
											"begin": 4433,
											"end": 4440,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 4417,
											"end": 4432,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "54"
										},
										{
											"begin": 4417,
											"end": 4441,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 4417,
											"end": 4441,
											"name": "tag",
											"source": 9,
											"value": "101"
										},
										{
											"begin": 4417,
											"end": 4441,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 4401,
											"end": 4441,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 4401,
											"end": 4441,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 4465,
											"end": 4470,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 4459,
											"end": 4470,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 4459,
											"end": 4461,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 4459,
											"end": 4470,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 4459,
											"end": 4470,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 4459,
											"end": 4470,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 4451,
											"end": 4509,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "102"
										},
										{
											"begin": 4451,
											"end": 4509,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 4451,
											"end": 4509,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 4451,
											"end": 4509,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 4451,
											"end": 4509,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 4451,
											"end": 4509,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 5358,
											"end": 5360,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 4451,
											"end": 4509,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 4451,
											"end": 4509,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 4451,
											"end": 4509,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 5340,
											"end": 5361,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 5397,
											"end": 5399,
											"name": "PUSH",
											"source": 10,
											"value": "22"
										},
										{
											"begin": 5377,
											"end": 5395,
											"name": "PUSH",
											"source": 10,
											"value": "24"
										},
										{
											"begin": 5377,
											"end": 5395,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 5377,
											"end": 5395,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 5370,
											"end": 5400,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 5436,
											"end": 5470,
											"name": "PUSH",
											"source": 10,
											"value": "4C50546F6B656E3A20617070726F76616C20746F2063757272656E74206F776E"
										},
										{
											"begin": 5416,
											"end": 5434,
											"name": "PUSH",
											"source": 10,
											"value": "44"
										},
										{
											"begin": 5416,
											"end": 5434,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 5416,
											"end": 5434,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 5409,
											"end": 5471,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "32B9"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "F1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 5487,
											"end": 5505,
											"name": "PUSH",
											"source": 10,
											"value": "64"
										},
										{
											"begin": 5487,
											"end": 5505,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 5487,
											"end": 5505,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 5480,
											"end": 5512,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 5529,
											"end": 5548,
											"name": "PUSH",
											"source": 10,
											"value": "84"
										},
										{
											"begin": 5529,
											"end": 5548,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 4451,
											"end": 4509,
											"name": "tag",
											"source": 9,
											"value": "103"
										},
										{
											"begin": 4451,
											"end": 4509,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 4451,
											"end": 4509,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 4451,
											"end": 4509,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 4451,
											"end": 4509,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 4451,
											"end": 4509,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 4451,
											"end": 4509,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 4451,
											"end": 4509,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 4451,
											"end": 4509,
											"name": "REVERT",
											"source": 9
										},
										{
											"begin": 4451,
											"end": 4509,
											"name": "tag",
											"source": 9,
											"value": "102"
										},
										{
											"begin": 4451,
											"end": 4509,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 719,
											"end": 729,
											"name": "CALLER",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 4541,
											"end": 4562,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 4541,
											"end": 4562,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 4541,
											"end": 4562,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 4541,
											"end": 4562,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 4541,
											"end": 4603,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "108"
										},
										{
											"begin": 4541,
											"end": 4603,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 4566,
											"end": 4603,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "108"
										},
										{
											"begin": 4583,
											"end": 4588,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 719,
											"end": 729,
											"name": "CALLER",
											"source": 4
										},
										{
											"begin": 5244,
											"end": 5406,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "83"
										},
										{
											"begin": 5244,
											"end": 5406,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 4566,
											"end": 4603,
											"name": "tag",
											"source": 9,
											"value": "108"
										},
										{
											"begin": 4566,
											"end": 4603,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 4520,
											"end": 4691,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "110"
										},
										{
											"begin": 4520,
											"end": 4691,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 4520,
											"end": 4691,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 4520,
											"end": 4691,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 4520,
											"end": 4691,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 4520,
											"end": 4691,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 5761,
											"end": 5763,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 4520,
											"end": 4691,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 4520,
											"end": 4691,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 4520,
											"end": 4691,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 5743,
											"end": 5764,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 5800,
											"end": 5802,
											"name": "PUSH",
											"source": 10,
											"value": "3E"
										},
										{
											"begin": 5780,
											"end": 5798,
											"name": "PUSH",
											"source": 10,
											"value": "24"
										},
										{
											"begin": 5780,
											"end": 5798,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 5780,
											"end": 5798,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 5773,
											"end": 5803,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 5839,
											"end": 5873,
											"name": "PUSH",
											"source": 10,
											"value": "4C50546F6B656E3A20617070726F76652063616C6C6572206973206E6F742074"
										},
										{
											"begin": 5819,
											"end": 5837,
											"name": "PUSH",
											"source": 10,
											"value": "44"
										},
										{
											"begin": 5819,
											"end": 5837,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 5819,
											"end": 5837,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 5812,
											"end": 5874,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 5910,
											"end": 5942,
											"name": "PUSH",
											"source": 10,
											"value": "6F6B656E206F776E6572206F7220617070726F76656420666F7220616C6C0000"
										},
										{
											"begin": 5890,
											"end": 5908,
											"name": "PUSH",
											"source": 10,
											"value": "64"
										},
										{
											"begin": 5890,
											"end": 5908,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 5890,
											"end": 5908,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 5883,
											"end": 5943,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 5960,
											"end": 5979,
											"name": "PUSH",
											"source": 10,
											"value": "84"
										},
										{
											"begin": 5960,
											"end": 5979,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 4520,
											"end": 4691,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "103"
										},
										{
											"begin": 5559,
											"end": 5985,
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 4520,
											"end": 4691,
											"name": "tag",
											"source": 9,
											"value": "110"
										},
										{
											"begin": 4520,
											"end": 4691,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 4702,
											"end": 4723,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "113"
										},
										{
											"begin": 4711,
											"end": 4713,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 4715,
											"end": 4722,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 4702,
											"end": 4710,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "114"
										},
										{
											"begin": 4702,
											"end": 4723,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 4702,
											"end": 4723,
											"name": "tag",
											"source": 9,
											"value": "113"
										},
										{
											"begin": 4702,
											"end": 4723,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 4391,
											"end": 4730,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 4321,
											"end": 4730,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 4321,
											"end": 4730,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 4321,
											"end": 4730,
											"name": "JUMP",
											"source": 9,
											"value": "[out]"
										},
										{
											"begin": 5468,
											"end": 5765,
											"name": "tag",
											"source": 9,
											"value": "42"
										},
										{
											"begin": 5468,
											"end": 5765,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 5627,
											"end": 5668,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "116"
										},
										{
											"begin": 719,
											"end": 729,
											"name": "CALLER",
											"source": 4
										},
										{
											"begin": 5646,
											"end": 5658,
											"name": "tag",
											"source": 9,
											"value": "117"
										},
										{
											"begin": 5646,
											"end": 5658,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 5660,
											"end": 5667,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 5627,
											"end": 5645,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "118"
										},
										{
											"begin": 5627,
											"end": 5668,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 5627,
											"end": 5668,
											"name": "tag",
											"source": 9,
											"value": "116"
										},
										{
											"begin": 5627,
											"end": 5668,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 5619,
											"end": 5719,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "119"
										},
										{
											"begin": 5619,
											"end": 5719,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 5619,
											"end": 5719,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 5619,
											"end": 5719,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 5619,
											"end": 5719,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 5619,
											"end": 5719,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 5619,
											"end": 5719,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 5619,
											"end": 5719,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 5619,
											"end": 5719,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "103"
										},
										{
											"begin": 5619,
											"end": 5719,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 5619,
											"end": 5719,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "121"
										},
										{
											"begin": 5619,
											"end": 5719,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 5619,
											"end": 5719,
											"name": "tag",
											"source": 9,
											"value": "119"
										},
										{
											"begin": 5619,
											"end": 5719,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 5730,
											"end": 5758,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "113"
										},
										{
											"begin": 5740,
											"end": 5744,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 5746,
											"end": 5748,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 5750,
											"end": 5757,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 5730,
											"end": 5739,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "123"
										},
										{
											"begin": 5730,
											"end": 5758,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 2046,
											"end": 2152,
											"name": "tag",
											"source": 9,
											"value": "45"
										},
										{
											"begin": 2046,
											"end": 2152,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 1830,
											"end": 1835,
											"name": "PUSH",
											"source": 9,
											"value": "2"
										},
										{
											"begin": 1830,
											"end": 1835,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1830,
											"end": 1835,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 1816,
											"end": 1826,
											"name": "CALLER",
											"source": 9
										},
										{
											"begin": 1816,
											"end": 1835,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 1808,
											"end": 1836,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "125"
										},
										{
											"begin": 1808,
											"end": 1836,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 1808,
											"end": 1836,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 1808,
											"end": 1836,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 1808,
											"end": 1836,
											"name": "REVERT",
											"source": 9
										},
										{
											"begin": 1808,
											"end": 1836,
											"name": "tag",
											"source": 9,
											"value": "125"
										},
										{
											"begin": 1808,
											"end": 1836,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 2123,
											"end": 2145,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "127"
										},
										{
											"begin": 2133,
											"end": 2135,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 2137,
											"end": 2144,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 2123,
											"end": 2132,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "128"
										},
										{
											"begin": 2123,
											"end": 2145,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 2123,
											"end": 2145,
											"name": "tag",
											"source": 9,
											"value": "127"
										},
										{
											"begin": 2123,
											"end": 2145,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 2046,
											"end": 2152,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 2046,
											"end": 2152,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 2046,
											"end": 2152,
											"name": "JUMP",
											"source": 9,
											"value": "[out]"
										},
										{
											"begin": 5831,
											"end": 5980,
											"name": "tag",
											"source": 9,
											"value": "48"
										},
										{
											"begin": 5831,
											"end": 5980,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 5934,
											"end": 5973,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "113"
										},
										{
											"begin": 5951,
											"end": 5955,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 5957,
											"end": 5959,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 5961,
											"end": 5968,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 5934,
											"end": 5973,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 5934,
											"end": 5973,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 5934,
											"end": 5973,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 5934,
											"end": 5973,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 5934,
											"end": 5973,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 5934,
											"end": 5973,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 5934,
											"end": 5973,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 5934,
											"end": 5973,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 5934,
											"end": 5973,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 5934,
											"end": 5973,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 5934,
											"end": 5973,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 5934,
											"end": 5973,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 5934,
											"end": 5950,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "72"
										},
										{
											"begin": 5934,
											"end": 5973,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 2158,
											"end": 2354,
											"name": "tag",
											"source": 9,
											"value": "51"
										},
										{
											"begin": 2158,
											"end": 2354,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 1830,
											"end": 1835,
											"name": "PUSH",
											"source": 9,
											"value": "2"
										},
										{
											"begin": 1830,
											"end": 1835,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1830,
											"end": 1835,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 1816,
											"end": 1826,
											"name": "CALLER",
											"source": 9
										},
										{
											"begin": 1816,
											"end": 1835,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 1808,
											"end": 1836,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "132"
										},
										{
											"begin": 1808,
											"end": 1836,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 1808,
											"end": 1836,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 1808,
											"end": 1836,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 1808,
											"end": 1836,
											"name": "REVERT",
											"source": 9
										},
										{
											"begin": 1808,
											"end": 1836,
											"name": "tag",
											"source": 9,
											"value": "132"
										},
										{
											"begin": 1808,
											"end": 1836,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 2231,
											"end": 2272,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "134"
										},
										{
											"begin": 719,
											"end": 729,
											"name": "CALLER",
											"source": 4
										},
										{
											"begin": 2250,
											"end": 2262,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "117"
										},
										{
											"begin": 640,
											"end": 736,
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 2231,
											"end": 2272,
											"name": "tag",
											"source": 9,
											"value": "134"
										},
										{
											"begin": 2231,
											"end": 2272,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 2223,
											"end": 2323,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "136"
										},
										{
											"begin": 2223,
											"end": 2323,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 2223,
											"end": 2323,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 2223,
											"end": 2323,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 2223,
											"end": 2323,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 2223,
											"end": 2323,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 2223,
											"end": 2323,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 2223,
											"end": 2323,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 2223,
											"end": 2323,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "103"
										},
										{
											"begin": 2223,
											"end": 2323,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2223,
											"end": 2323,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "121"
										},
										{
											"begin": 2223,
											"end": 2323,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 2223,
											"end": 2323,
											"name": "tag",
											"source": 9,
											"value": "136"
										},
										{
											"begin": 2223,
											"end": 2323,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 2333,
											"end": 2347,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "138"
										},
										{
											"begin": 2339,
											"end": 2346,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 2333,
											"end": 2338,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "139"
										},
										{
											"begin": 2333,
											"end": 2347,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 2333,
											"end": 2347,
											"name": "tag",
											"source": 9,
											"value": "138"
										},
										{
											"begin": 2333,
											"end": 2347,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 2158,
											"end": 2354,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 2158,
											"end": 2354,
											"name": "JUMP",
											"source": 9,
											"value": "[out]"
										},
										{
											"begin": 3042,
											"end": 3262,
											"name": "tag",
											"source": 9,
											"value": "54"
										},
										{
											"begin": 3042,
											"end": 3262,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 3114,
											"end": 3121,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 3133,
											"end": 3146,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 3149,
											"end": 3166,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "141"
										},
										{
											"begin": 3158,
											"end": 3165,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 3149,
											"end": 3157,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "142"
										},
										{
											"begin": 3149,
											"end": 3166,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 3149,
											"end": 3166,
											"name": "tag",
											"source": 9,
											"value": "141"
										},
										{
											"begin": 3149,
											"end": 3166,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 3133,
											"end": 3166,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 3184,
											"end": 3203,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 3184,
											"end": 3203,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 3176,
											"end": 3233,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "88"
										},
										{
											"begin": 3176,
											"end": 3233,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 3176,
											"end": 3233,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 3176,
											"end": 3233,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 3176,
											"end": 3233,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 3176,
											"end": 3233,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 3176,
											"end": 3233,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 3176,
											"end": 3233,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 3176,
											"end": 3233,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "103"
										},
										{
											"begin": 3176,
											"end": 3233,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 3176,
											"end": 3233,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "145"
										},
										{
											"begin": 3176,
											"end": 3233,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 2780,
											"end": 2985,
											"name": "tag",
											"source": 9,
											"value": "59"
										},
										{
											"begin": 2780,
											"end": 2985,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 2852,
											"end": 2859,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 2879,
											"end": 2898,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 2879,
											"end": 2898,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 2871,
											"end": 2945,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "147"
										},
										{
											"begin": 2871,
											"end": 2945,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 2871,
											"end": 2945,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 2871,
											"end": 2945,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 2871,
											"end": 2945,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 2871,
											"end": 2945,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 6961,
											"end": 6963,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 2871,
											"end": 2945,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 2871,
											"end": 2945,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 2871,
											"end": 2945,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 6943,
											"end": 6964,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 7000,
											"end": 7002,
											"name": "PUSH",
											"source": 10,
											"value": "2A"
										},
										{
											"begin": 6980,
											"end": 6998,
											"name": "PUSH",
											"source": 10,
											"value": "24"
										},
										{
											"begin": 6980,
											"end": 6998,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 6980,
											"end": 6998,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 6973,
											"end": 7003,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 7039,
											"end": 7073,
											"name": "PUSH",
											"source": 10,
											"value": "4C50546F6B656E3A2061646472657373207A65726F206973206E6F7420612076"
										},
										{
											"begin": 7019,
											"end": 7037,
											"name": "PUSH",
											"source": 10,
											"value": "44"
										},
										{
											"begin": 7019,
											"end": 7037,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 7019,
											"end": 7037,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 7012,
											"end": 7074,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "30B634B21037BBB732B9"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "B1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 7090,
											"end": 7108,
											"name": "PUSH",
											"source": 10,
											"value": "64"
										},
										{
											"begin": 7090,
											"end": 7108,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 7090,
											"end": 7108,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 7083,
											"end": 7123,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 7140,
											"end": 7159,
											"name": "PUSH",
											"source": 10,
											"value": "84"
										},
										{
											"begin": 7140,
											"end": 7159,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 2871,
											"end": 2945,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "103"
										},
										{
											"begin": 6759,
											"end": 7165,
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 2871,
											"end": 2945,
											"name": "tag",
											"source": 9,
											"value": "147"
										},
										{
											"begin": 2871,
											"end": 2945,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 2962,
											"end": 2978,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 2962,
											"end": 2978,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 2962,
											"end": 2978,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2962,
											"end": 2978,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 2962,
											"end": 2978,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 2962,
											"end": 2971,
											"name": "PUSH",
											"source": 9,
											"value": "5"
										},
										{
											"begin": 2962,
											"end": 2978,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 2962,
											"end": 2978,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 2962,
											"end": 2978,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 2962,
											"end": 2978,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2962,
											"end": 2978,
											"name": "KECCAK256",
											"source": 9
										},
										{
											"begin": 2962,
											"end": 2978,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 2962,
											"end": 2978,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2780,
											"end": 2985,
											"name": "JUMP",
											"source": 9,
											"value": "[out]"
										},
										{
											"begin": 3486,
											"end": 3588,
											"name": "tag",
											"source": 9,
											"value": "63"
										},
										{
											"begin": 3486,
											"end": 3588,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 3542,
											"end": 3555,
											"name": "PUSH",
											"source": 9,
											"value": "60"
										},
										{
											"begin": 3574,
											"end": 3581,
											"name": "PUSH",
											"source": 9,
											"value": "1"
										},
										{
											"begin": 3567,
											"end": 3581,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 3567,
											"end": 3581,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 3567,
											"end": 3581,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "91"
										},
										{
											"begin": 3567,
											"end": 3581,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 3567,
											"end": 3581,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "92"
										},
										{
											"begin": 3567,
											"end": 3581,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 5025,
											"end": 5178,
											"name": "tag",
											"source": 9,
											"value": "68"
										},
										{
											"begin": 5025,
											"end": 5178,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 5119,
											"end": 5171,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "127"
										},
										{
											"begin": 719,
											"end": 729,
											"name": "CALLER",
											"source": 4
										},
										{
											"begin": 5152,
											"end": 5160,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 5162,
											"end": 5170,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 5119,
											"end": 5137,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "159"
										},
										{
											"begin": 5119,
											"end": 5171,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 6046,
											"end": 6323,
											"name": "tag",
											"source": 9,
											"value": "72"
										},
										{
											"begin": 6046,
											"end": 6323,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 6176,
											"end": 6217,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "161"
										},
										{
											"begin": 719,
											"end": 729,
											"name": "CALLER",
											"source": 4
										},
										{
											"begin": 6209,
											"end": 6216,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 6176,
											"end": 6194,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "118"
										},
										{
											"begin": 6176,
											"end": 6217,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 6176,
											"end": 6217,
											"name": "tag",
											"source": 9,
											"value": "161"
										},
										{
											"begin": 6176,
											"end": 6217,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 6168,
											"end": 6268,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "163"
										},
										{
											"begin": 6168,
											"end": 6268,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 6168,
											"end": 6268,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 6168,
											"end": 6268,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 6168,
											"end": 6268,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 6168,
											"end": 6268,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 6168,
											"end": 6268,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 6168,
											"end": 6268,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 6168,
											"end": 6268,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "103"
										},
										{
											"begin": 6168,
											"end": 6268,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 6168,
											"end": 6268,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "121"
										},
										{
											"begin": 6168,
											"end": 6268,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 6168,
											"end": 6268,
											"name": "tag",
											"source": 9,
											"value": "163"
										},
										{
											"begin": 6168,
											"end": 6268,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 6278,
											"end": 6316,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "165"
										},
										{
											"begin": 6292,
											"end": 6296,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 6298,
											"end": 6300,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 6302,
											"end": 6309,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 6311,
											"end": 6315,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 6278,
											"end": 6291,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "166"
										},
										{
											"begin": 6278,
											"end": 6316,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 6278,
											"end": 6316,
											"name": "tag",
											"source": 9,
											"value": "165"
										},
										{
											"begin": 6278,
											"end": 6316,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 6046,
											"end": 6323,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 6046,
											"end": 6323,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 6046,
											"end": 6323,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 6046,
											"end": 6323,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 6046,
											"end": 6323,
											"name": "JUMP",
											"source": 9,
											"value": "[out]"
										},
										{
											"begin": 1946,
											"end": 2036,
											"name": "tag",
											"source": 9,
											"value": "75"
										},
										{
											"begin": 1946,
											"end": 2036,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 1913,
											"end": 1921,
											"name": "PUSH",
											"source": 9,
											"value": "3"
										},
										{
											"begin": 1913,
											"end": 1921,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1913,
											"end": 1921,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 1899,
											"end": 1909,
											"name": "CALLER",
											"source": 9
										},
										{
											"begin": 1899,
											"end": 1921,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 1891,
											"end": 1922,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "168"
										},
										{
											"begin": 1891,
											"end": 1922,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 1891,
											"end": 1922,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 1891,
											"end": 1922,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 1891,
											"end": 1922,
											"name": "REVERT",
											"source": 9
										},
										{
											"begin": 1891,
											"end": 1922,
											"name": "tag",
											"source": 9,
											"value": "168"
										},
										{
											"begin": 1891,
											"end": 1922,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 2017,
											"end": 2022,
											"name": "PUSH",
											"source": 9,
											"value": "2"
										},
										{
											"begin": 2017,
											"end": 2029,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 2017,
											"end": 2029,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 2017,
											"end": 2029,
											"name": "AND",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 2017,
											"end": 2029,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": 2017,
											"end": 2029,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2017,
											"end": 2029,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": 2017,
											"end": 2029,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 2017,
											"end": 2029,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 2017,
											"end": 2029,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2017,
											"end": 2029,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 2017,
											"end": 2029,
											"name": "OR",
											"source": 9
										},
										{
											"begin": 2017,
											"end": 2029,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2017,
											"end": 2029,
											"name": "SSTORE",
											"source": 9
										},
										{
											"begin": 1946,
											"end": 2036,
											"name": "JUMP",
											"source": 9,
											"value": "[out]"
										},
										{
											"begin": 3654,
											"end": 3930,
											"name": "tag",
											"source": 9,
											"value": "78"
										},
										{
											"begin": 3654,
											"end": 3930,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 3727,
											"end": 3740,
											"name": "PUSH",
											"source": 9,
											"value": "60"
										},
										{
											"begin": 3752,
											"end": 3775,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "171"
										},
										{
											"begin": 3767,
											"end": 3774,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 3752,
											"end": 3766,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "99"
										},
										{
											"begin": 3752,
											"end": 3775,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 3752,
											"end": 3775,
											"name": "tag",
											"source": 9,
											"value": "171"
										},
										{
											"begin": 3752,
											"end": 3775,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 3786,
											"end": 3807,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 3810,
											"end": 3820,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "172"
										},
										{
											"begin": 4248,
											"end": 4257,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 4248,
											"end": 4257,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 4248,
											"end": 4257,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 4248,
											"end": 4257,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 4248,
											"end": 4257,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 4248,
											"end": 4257,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 4248,
											"end": 4257,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 4248,
											"end": 4257,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 4248,
											"end": 4257,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": 4248,
											"end": 4257,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 4248,
											"end": 4257,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 4248,
											"end": 4257,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 4172,
											"end": 4264,
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 3810,
											"end": 3820,
											"name": "tag",
											"source": 9,
											"value": "172"
										},
										{
											"begin": 3810,
											"end": 3820,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 3786,
											"end": 3820,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 3786,
											"end": 3820,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 3861,
											"end": 3862,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 3843,
											"end": 3850,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 3837,
											"end": 3858,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 3837,
											"end": 3862,
											"name": "GT",
											"source": 9
										},
										{
											"begin": 3837,
											"end": 3923,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "174"
										},
										{
											"begin": 3837,
											"end": 3923,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 3837,
											"end": 3923,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 3837,
											"end": 3923,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 3837,
											"end": 3923,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 3837,
											"end": 3923,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 3837,
											"end": 3923,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 3837,
											"end": 3923,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 3837,
											"end": 3923,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 3837,
											"end": 3923,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 3837,
											"end": 3923,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 3837,
											"end": 3923,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 3837,
											"end": 3923,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 3837,
											"end": 3923,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 3837,
											"end": 3923,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "175"
										},
										{
											"begin": 3837,
											"end": 3923,
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 3837,
											"end": 3923,
											"name": "tag",
											"source": 9,
											"value": "174"
										},
										{
											"begin": 3837,
											"end": 3923,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 3889,
											"end": 3896,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 3898,
											"end": 3916,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "176"
										},
										{
											"begin": 3898,
											"end": 3905,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 3898,
											"end": 3914,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "177"
										},
										{
											"begin": 3898,
											"end": 3916,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 3898,
											"end": 3916,
											"name": "tag",
											"source": 9,
											"value": "176"
										},
										{
											"begin": 3898,
											"end": 3916,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 3872,
											"end": 3917,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 3872,
											"end": 3917,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 3872,
											"end": 3917,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 3872,
											"end": 3917,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 3872,
											"end": 3917,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "178"
										},
										{
											"begin": 3872,
											"end": 3917,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": 3872,
											"end": 3917,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 3872,
											"end": 3917,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 3872,
											"end": 3917,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "179"
										},
										{
											"begin": 3872,
											"end": 3917,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 3872,
											"end": 3917,
											"name": "tag",
											"source": 9,
											"value": "178"
										},
										{
											"begin": 3872,
											"end": 3917,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 3872,
											"end": 3917,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 3872,
											"end": 3917,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 3872,
											"end": 3917,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 3872,
											"end": 3917,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 3872,
											"end": 3917,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 3872,
											"end": 3917,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 3872,
											"end": 3917,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 3872,
											"end": 3917,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 3872,
											"end": 3917,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 3872,
											"end": 3917,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 3872,
											"end": 3917,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 3872,
											"end": 3917,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 3837,
											"end": 3923,
											"name": "tag",
											"source": 9,
											"value": "175"
										},
										{
											"begin": 3837,
											"end": 3923,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 3830,
											"end": 3923,
											"name": "SWAP4",
											"source": 9
										},
										{
											"begin": 3654,
											"end": 3930,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 3654,
											"end": 3930,
											"name": "JUMP",
											"source": 9,
											"value": "[out]"
										},
										{
											"begin": 5244,
											"end": 5406,
											"name": "tag",
											"source": 9,
											"value": "83"
										},
										{
											"begin": 5244,
											"end": 5406,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 5364,
											"end": 5389,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 5364,
											"end": 5389,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 5364,
											"end": 5389,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 5341,
											"end": 5345,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 5364,
											"end": 5389,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 5364,
											"end": 5389,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 5364,
											"end": 5389,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 5364,
											"end": 5382,
											"name": "PUSH",
											"source": 9,
											"value": "7"
										},
										{
											"begin": 5364,
											"end": 5389,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 5364,
											"end": 5389,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 5364,
											"end": 5389,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 5364,
											"end": 5389,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 5364,
											"end": 5389,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 5364,
											"end": 5389,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 5364,
											"end": 5389,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 5364,
											"end": 5389,
											"name": "KECCAK256",
											"source": 9
										},
										{
											"begin": 5364,
											"end": 5399,
											"name": "SWAP4",
											"source": 9
										},
										{
											"begin": 5364,
											"end": 5399,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 5364,
											"end": 5399,
											"name": "SWAP5",
											"source": 9
										},
										{
											"begin": 5364,
											"end": 5399,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 5364,
											"end": 5399,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 5364,
											"end": 5399,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 5364,
											"end": 5399,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 5364,
											"end": 5399,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 5364,
											"end": 5399,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 5364,
											"end": 5399,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 5364,
											"end": 5399,
											"name": "KECCAK256",
											"source": 9
										},
										{
											"begin": 5364,
											"end": 5399,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 5364,
											"end": 5399,
											"name": "PUSH",
											"source": 9,
											"value": "FF"
										},
										{
											"begin": 5364,
											"end": 5399,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 5364,
											"end": 5399,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 5244,
											"end": 5406,
											"name": "JUMP",
											"source": 9,
											"value": "[out]"
										},
										{
											"begin": 14112,
											"end": 14246,
											"name": "tag",
											"source": 9,
											"value": "99"
										},
										{
											"begin": 14112,
											"end": 14246,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 14193,
											"end": 14209,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "183"
										},
										{
											"begin": 14201,
											"end": 14208,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 14193,
											"end": 14200,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "184"
										},
										{
											"begin": 14193,
											"end": 14209,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 14193,
											"end": 14209,
											"name": "tag",
											"source": 9,
											"value": "183"
										},
										{
											"begin": 14193,
											"end": 14209,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 14185,
											"end": 14239,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "138"
										},
										{
											"begin": 14185,
											"end": 14239,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 14185,
											"end": 14239,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 14185,
											"end": 14239,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 14185,
											"end": 14239,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 14185,
											"end": 14239,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 14185,
											"end": 14239,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 14185,
											"end": 14239,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 14185,
											"end": 14239,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "103"
										},
										{
											"begin": 14185,
											"end": 14239,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 14185,
											"end": 14239,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "145"
										},
										{
											"begin": 14185,
											"end": 14239,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 13442,
											"end": 13614,
											"name": "tag",
											"source": 9,
											"value": "114"
										},
										{
											"begin": 13442,
											"end": 13614,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 13516,
											"end": 13540,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 13516,
											"end": 13540,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 13516,
											"end": 13540,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 13516,
											"end": 13540,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 13516,
											"end": 13531,
											"name": "PUSH",
											"source": 9,
											"value": "6"
										},
										{
											"begin": 13516,
											"end": 13540,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 13516,
											"end": 13540,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 13516,
											"end": 13540,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 13516,
											"end": 13540,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 13516,
											"end": 13540,
											"name": "KECCAK256",
											"source": 9
										},
										{
											"begin": 13516,
											"end": 13545,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 13516,
											"end": 13545,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 13516,
											"end": 13545,
											"name": "AND",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 13516,
											"end": 13545,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 13516,
											"end": 13545,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 13516,
											"end": 13545,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 13516,
											"end": 13545,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 13516,
											"end": 13545,
											"name": "OR",
											"source": 9
										},
										{
											"begin": 13516,
											"end": 13545,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 13516,
											"end": 13545,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 13516,
											"end": 13545,
											"name": "SSTORE",
											"source": 9
										},
										{
											"begin": 13516,
											"end": 13540,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 13516,
											"end": 13540,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 13569,
											"end": 13593,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "189"
										},
										{
											"begin": 13516,
											"end": 13540,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 13569,
											"end": 13584,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "54"
										},
										{
											"begin": 13569,
											"end": 13593,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 13569,
											"end": 13593,
											"name": "tag",
											"source": 9,
											"value": "189"
										},
										{
											"begin": 13569,
											"end": 13593,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 13560,
											"end": 13607,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 13560,
											"end": 13607,
											"name": "PUSH",
											"source": 9,
											"value": "8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925"
										},
										{
											"begin": 13560,
											"end": 13607,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 13560,
											"end": 13607,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 13560,
											"end": 13607,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 13560,
											"end": 13607,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 13560,
											"end": 13607,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 13560,
											"end": 13607,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 13560,
											"end": 13607,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 13560,
											"end": 13607,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 13560,
											"end": 13607,
											"name": "LOG4",
											"source": 9
										},
										{
											"begin": 13442,
											"end": 13614,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 13442,
											"end": 13614,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 13442,
											"end": 13614,
											"name": "JUMP",
											"source": 9,
											"value": "[out]"
										},
										{
											"begin": 8263,
											"end": 8525,
											"name": "tag",
											"source": 9,
											"value": "118"
										},
										{
											"begin": 8263,
											"end": 8525,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 8356,
											"end": 8360,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 8372,
											"end": 8385,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 8388,
											"end": 8412,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "191"
										},
										{
											"begin": 8404,
											"end": 8411,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 8388,
											"end": 8403,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "54"
										},
										{
											"begin": 8388,
											"end": 8412,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 8388,
											"end": 8412,
											"name": "tag",
											"source": 9,
											"value": "191"
										},
										{
											"begin": 8388,
											"end": 8412,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 8372,
											"end": 8412,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 8372,
											"end": 8412,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 8441,
											"end": 8446,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 8430,
											"end": 8446,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 8430,
											"end": 8437,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 8430,
											"end": 8446,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 8430,
											"end": 8446,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 8430,
											"end": 8482,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 8430,
											"end": 8482,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "193"
										},
										{
											"begin": 8430,
											"end": 8482,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 8430,
											"end": 8482,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 8450,
											"end": 8482,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "193"
										},
										{
											"begin": 8467,
											"end": 8472,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 8474,
											"end": 8481,
											"name": "DUP6",
											"source": 9
										},
										{
											"begin": 8450,
											"end": 8466,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "83"
										},
										{
											"begin": 8450,
											"end": 8482,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 8450,
											"end": 8482,
											"name": "tag",
											"source": 9,
											"value": "193"
										},
										{
											"begin": 8450,
											"end": 8482,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 8430,
											"end": 8517,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 8430,
											"end": 8517,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "194"
										},
										{
											"begin": 8430,
											"end": 8517,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 8430,
											"end": 8517,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 8510,
											"end": 8517,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 8486,
											"end": 8517,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 8486,
											"end": 8506,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "195"
										},
										{
											"begin": 8498,
											"end": 8505,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 8486,
											"end": 8497,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "32"
										},
										{
											"begin": 8486,
											"end": 8506,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 8486,
											"end": 8506,
											"name": "tag",
											"source": 9,
											"value": "195"
										},
										{
											"begin": 8486,
											"end": 8506,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 8486,
											"end": 8517,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 8486,
											"end": 8517,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 8430,
											"end": 8517,
											"name": "tag",
											"source": 9,
											"value": "194"
										},
										{
											"begin": 8430,
											"end": 8517,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 8422,
											"end": 8518,
											"name": "SWAP5",
											"source": 9
										},
										{
											"begin": 8263,
											"end": 8525,
											"name": "SWAP4",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 8263,
											"end": 8525,
											"name": "JUMP",
											"source": 9,
											"value": "[out]"
										},
										{
											"begin": 12123,
											"end": 13330,
											"name": "tag",
											"source": 9,
											"value": "123"
										},
										{
											"begin": 12123,
											"end": 13330,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 12248,
											"end": 12252,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 12220,
											"end": 12252,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 12220,
											"end": 12244,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "197"
										},
										{
											"begin": 12236,
											"end": 12243,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 12220,
											"end": 12235,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "54"
										},
										{
											"begin": 12220,
											"end": 12244,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 12220,
											"end": 12244,
											"name": "tag",
											"source": 9,
											"value": "197"
										},
										{
											"begin": 12220,
											"end": 12244,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 12220,
											"end": 12252,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 12220,
											"end": 12252,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 12212,
											"end": 12295,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "198"
										},
										{
											"begin": 12212,
											"end": 12295,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 12212,
											"end": 12295,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 12212,
											"end": 12295,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 12212,
											"end": 12295,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 12212,
											"end": 12295,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 7847,
											"end": 7849,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 12212,
											"end": 12295,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 12212,
											"end": 12295,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 12212,
											"end": 12295,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 7829,
											"end": 7850,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 7886,
											"end": 7888,
											"name": "PUSH",
											"source": 10,
											"value": "26"
										},
										{
											"begin": 7866,
											"end": 7884,
											"name": "PUSH",
											"source": 10,
											"value": "24"
										},
										{
											"begin": 7866,
											"end": 7884,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 7866,
											"end": 7884,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 7859,
											"end": 7889,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 7925,
											"end": 7959,
											"name": "PUSH",
											"source": 10,
											"value": "4C50546F6B656E3A207472616E736665722066726F6D20696E636F7272656374"
										},
										{
											"begin": 7905,
											"end": 7923,
											"name": "PUSH",
											"source": 10,
											"value": "44"
										},
										{
											"begin": 7905,
											"end": 7923,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 7905,
											"end": 7923,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 7898,
											"end": 7960,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1037BBB732B9"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "D1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 7976,
											"end": 7994,
											"name": "PUSH",
											"source": 10,
											"value": "64"
										},
										{
											"begin": 7976,
											"end": 7994,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 7976,
											"end": 7994,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 7969,
											"end": 8005,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 8022,
											"end": 8041,
											"name": "PUSH",
											"source": 10,
											"value": "84"
										},
										{
											"begin": 8022,
											"end": 8041,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 12212,
											"end": 12295,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "103"
										},
										{
											"begin": 7645,
											"end": 8047,
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 12212,
											"end": 12295,
											"name": "tag",
											"source": 9,
											"value": "198"
										},
										{
											"begin": 12212,
											"end": 12295,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 12313,
											"end": 12329,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 12313,
											"end": 12329,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 12305,
											"end": 12371,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "201"
										},
										{
											"begin": 12305,
											"end": 12371,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 12305,
											"end": 12371,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 12305,
											"end": 12371,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 12305,
											"end": 12371,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 12305,
											"end": 12371,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 8254,
											"end": 8256,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 12305,
											"end": 12371,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 12305,
											"end": 12371,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 12305,
											"end": 12371,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 8236,
											"end": 8257,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 8293,
											"end": 8295,
											"name": "PUSH",
											"source": 10,
											"value": "25"
										},
										{
											"begin": 8273,
											"end": 8291,
											"name": "PUSH",
											"source": 10,
											"value": "24"
										},
										{
											"begin": 8273,
											"end": 8291,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 8273,
											"end": 8291,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 8266,
											"end": 8296,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 8332,
											"end": 8366,
											"name": "PUSH",
											"source": 10,
											"value": "4C50546F6B656E3A207472616E7366657220746F20746865207A65726F206164"
										},
										{
											"begin": 8312,
											"end": 8330,
											"name": "PUSH",
											"source": 10,
											"value": "44"
										},
										{
											"begin": 8312,
											"end": 8330,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 8312,
											"end": 8330,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 8305,
											"end": 8367,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "6472657373"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "D8"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 8383,
											"end": 8401,
											"name": "PUSH",
											"source": 10,
											"value": "64"
										},
										{
											"begin": 8383,
											"end": 8401,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 8383,
											"end": 8401,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 8376,
											"end": 8411,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 8428,
											"end": 8447,
											"name": "PUSH",
											"source": 10,
											"value": "84"
										},
										{
											"begin": 8428,
											"end": 8447,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 12305,
											"end": 12371,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "103"
										},
										{
											"begin": 8052,
											"end": 8453,
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 12305,
											"end": 12371,
											"name": "tag",
											"source": 9,
											"value": "201"
										},
										{
											"begin": 12305,
											"end": 12371,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 12382,
											"end": 12424,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "204"
										},
										{
											"begin": 12403,
											"end": 12407,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 12409,
											"end": 12411,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 12413,
											"end": 12420,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 12422,
											"end": 12423,
											"name": "PUSH",
											"source": 9,
											"value": "1"
										},
										{
											"begin": 12382,
											"end": 12402,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "205"
										},
										{
											"begin": 12382,
											"end": 12424,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 12382,
											"end": 12424,
											"name": "tag",
											"source": 9,
											"value": "204"
										},
										{
											"begin": 12382,
											"end": 12424,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 12552,
											"end": 12556,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 12524,
											"end": 12556,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 12524,
											"end": 12548,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "206"
										},
										{
											"begin": 12540,
											"end": 12547,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 12524,
											"end": 12539,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "54"
										},
										{
											"begin": 12524,
											"end": 12548,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 12524,
											"end": 12548,
											"name": "tag",
											"source": 9,
											"value": "206"
										},
										{
											"begin": 12524,
											"end": 12548,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 12524,
											"end": 12556,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 12524,
											"end": 12556,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 12516,
											"end": 12598,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "207"
										},
										{
											"begin": 12516,
											"end": 12598,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 12516,
											"end": 12598,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 12516,
											"end": 12598,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 12516,
											"end": 12598,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 12516,
											"end": 12598,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 8660,
											"end": 8662,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 12516,
											"end": 12598,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 12516,
											"end": 12598,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 12516,
											"end": 12598,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 8642,
											"end": 8663,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 8699,
											"end": 8701,
											"name": "PUSH",
											"source": 10,
											"value": "25"
										},
										{
											"begin": 8679,
											"end": 8697,
											"name": "PUSH",
											"source": 10,
											"value": "24"
										},
										{
											"begin": 8679,
											"end": 8697,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 8679,
											"end": 8697,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 8672,
											"end": 8702,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 8738,
											"end": 8772,
											"name": "PUSH",
											"source": 10,
											"value": "4552433732313A207472616E736665722066726F6D20696E636F727265637420"
										},
										{
											"begin": 8718,
											"end": 8736,
											"name": "PUSH",
											"source": 10,
											"value": "44"
										},
										{
											"begin": 8718,
											"end": 8736,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 8718,
											"end": 8736,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 8711,
											"end": 8773,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "37BBB732B9"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "D9"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 8789,
											"end": 8807,
											"name": "PUSH",
											"source": 10,
											"value": "64"
										},
										{
											"begin": 8789,
											"end": 8807,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 8789,
											"end": 8807,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 8782,
											"end": 8817,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 8834,
											"end": 8853,
											"name": "PUSH",
											"source": 10,
											"value": "84"
										},
										{
											"begin": 8834,
											"end": 8853,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 12516,
											"end": 12598,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "103"
										},
										{
											"begin": 8458,
											"end": 8859,
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 12516,
											"end": 12598,
											"name": "tag",
											"source": 9,
											"value": "207"
										},
										{
											"begin": 12516,
											"end": 12598,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 12667,
											"end": 12691,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 12667,
											"end": 12691,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 12667,
											"end": 12691,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 12667,
											"end": 12691,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 12667,
											"end": 12682,
											"name": "PUSH",
											"source": 9,
											"value": "6"
										},
										{
											"begin": 12667,
											"end": 12691,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 12667,
											"end": 12691,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 12667,
											"end": 12691,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 12667,
											"end": 12691,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 12667,
											"end": 12691,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 12667,
											"end": 12691,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 12667,
											"end": 12691,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 12667,
											"end": 12691,
											"name": "KECCAK256",
											"source": 9
										},
										{
											"begin": 12660,
											"end": 12691,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 12660,
											"end": 12691,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 12660,
											"end": 12691,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 12660,
											"end": 12691,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 12660,
											"end": 12691,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 12660,
											"end": 12691,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 12660,
											"end": 12691,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 12660,
											"end": 12691,
											"name": "SSTORE",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 13135,
											"end": 13150,
											"name": "DUP8",
											"source": 9
										},
										{
											"begin": 13135,
											"end": 13150,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 13135,
											"end": 13150,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 13135,
											"end": 13150,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 13135,
											"end": 13150,
											"name": "DUP7",
											"source": 9
										},
										{
											"begin": 13135,
											"end": 13150,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 13135,
											"end": 13144,
											"name": "PUSH",
											"source": 9,
											"value": "5"
										},
										{
											"begin": 13135,
											"end": 13150,
											"name": "DUP6",
											"source": 9
										},
										{
											"begin": 13135,
											"end": 13150,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 13135,
											"end": 13150,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 13135,
											"end": 13150,
											"name": "DUP7",
											"source": 9
										},
										{
											"begin": 13135,
											"end": 13150,
											"name": "KECCAK256",
											"source": 9
										},
										{
											"begin": 13135,
											"end": 13155,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 13135,
											"end": 13155,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 13135,
											"end": 13155,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 13135,
											"end": 13155,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 13135,
											"end": 13155,
											"name": "SSTORE",
											"source": 9
										},
										{
											"begin": 13169,
											"end": 13182,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 13169,
											"end": 13182,
											"name": "DUP8",
											"source": 9
										},
										{
											"begin": 13169,
											"end": 13182,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 13169,
											"end": 13182,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 13169,
											"end": 13182,
											"name": "DUP7",
											"source": 9
										},
										{
											"begin": 13169,
											"end": 13182,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 13169,
											"end": 13182,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 13169,
											"end": 13182,
											"name": "DUP7",
											"source": 9
										},
										{
											"begin": 13169,
											"end": 13182,
											"name": "KECCAK256",
											"source": 9
										},
										{
											"begin": 13169,
											"end": 13187,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 13169,
											"end": 13187,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 12660,
											"end": 12691,
											"name": "PUSH",
											"source": 9,
											"value": "1"
										},
										{
											"begin": 13169,
											"end": 13187,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 13169,
											"end": 13187,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 13169,
											"end": 13187,
											"name": "SSTORE",
											"source": 9
										},
										{
											"begin": 13207,
											"end": 13223,
											"name": "DUP7",
											"source": 9
										},
										{
											"begin": 13207,
											"end": 13223,
											"name": "DUP7",
											"source": 9
										},
										{
											"begin": 13207,
											"end": 13223,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 13207,
											"end": 13214,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 13207,
											"end": 13223,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 13207,
											"end": 13223,
											"name": "SWAP5",
											"source": 9
										},
										{
											"begin": 13207,
											"end": 13223,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 13207,
											"end": 13223,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 13207,
											"end": 13223,
											"name": "DUP6",
											"source": 9
										},
										{
											"begin": 13207,
											"end": 13223,
											"name": "KECCAK256",
											"source": 9
										},
										{
											"begin": 13207,
											"end": 13228,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 13207,
											"end": 13228,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 13207,
											"end": 13228,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 13207,
											"end": 13228,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": 13207,
											"end": 13228,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 13207,
											"end": 13228,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 13207,
											"end": 13228,
											"name": "OR",
											"source": 9
										},
										{
											"begin": 13207,
											"end": 13228,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 13207,
											"end": 13228,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 13207,
											"end": 13228,
											"name": "SSTORE",
											"source": 9
										},
										{
											"begin": 13244,
											"end": 13271,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 13244,
											"end": 13271,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 12683,
											"end": 12690,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 12683,
											"end": 12690,
											"name": "SWAP4",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH data",
											"source": -1,
											"value": "ADA389E1FC24A8587C776340EFB91B36E675792AB631816100D55DF0B5CF3CBC"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP4",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "CODECOPY",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": 13244,
											"end": 13271,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 13244,
											"end": 13271,
											"name": "LOG4",
											"source": 9
										},
										{
											"begin": 4391,
											"end": 4730,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 4321,
											"end": 4730,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 4321,
											"end": 4730,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 4321,
											"end": 4730,
											"name": "JUMP",
											"source": 9,
											"value": "[out]"
										},
										{
											"begin": 8855,
											"end": 8963,
											"name": "tag",
											"source": 9,
											"value": "128"
										},
										{
											"begin": 8855,
											"end": 8963,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 8930,
											"end": 8956,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "127"
										},
										{
											"begin": 8940,
											"end": 8942,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 8944,
											"end": 8951,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 8930,
											"end": 8956,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 8930,
											"end": 8956,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 8930,
											"end": 8956,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 8930,
											"end": 8956,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 8930,
											"end": 8956,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 8930,
											"end": 8956,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 8930,
											"end": 8956,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 8930,
											"end": 8956,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 8930,
											"end": 8956,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 8930,
											"end": 8956,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 8930,
											"end": 8956,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 8930,
											"end": 8956,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 8930,
											"end": 8939,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "214"
										},
										{
											"begin": 8930,
											"end": 8956,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 11035,
											"end": 11799,
											"name": "tag",
											"source": 9,
											"value": "139"
										},
										{
											"begin": 11035,
											"end": 11799,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 11094,
											"end": 11107,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 11110,
											"end": 11134,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "216"
										},
										{
											"begin": 11126,
											"end": 11133,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 11110,
											"end": 11125,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "54"
										},
										{
											"begin": 11110,
											"end": 11134,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 11110,
											"end": 11134,
											"name": "tag",
											"source": 9,
											"value": "216"
										},
										{
											"begin": 11110,
											"end": 11134,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 11094,
											"end": 11134,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 11094,
											"end": 11134,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 11145,
											"end": 11196,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "217"
										},
										{
											"begin": 11166,
											"end": 11171,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 11181,
											"end": 11182,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 11185,
											"end": 11192,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 11194,
											"end": 11195,
											"name": "PUSH",
											"source": 9,
											"value": "1"
										},
										{
											"begin": 11145,
											"end": 11165,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "205"
										},
										{
											"begin": 11145,
											"end": 11196,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 11145,
											"end": 11196,
											"name": "tag",
											"source": 9,
											"value": "217"
										},
										{
											"begin": 11145,
											"end": 11196,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 11306,
											"end": 11330,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "218"
										},
										{
											"begin": 11322,
											"end": 11329,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 11306,
											"end": 11321,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "54"
										},
										{
											"begin": 11306,
											"end": 11330,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 11306,
											"end": 11330,
											"name": "tag",
											"source": 9,
											"value": "218"
										},
										{
											"begin": 11306,
											"end": 11330,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 11375,
											"end": 11399,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 11375,
											"end": 11399,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 11375,
											"end": 11399,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 11375,
											"end": 11399,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 11375,
											"end": 11390,
											"name": "PUSH",
											"source": 9,
											"value": "6"
										},
										{
											"begin": 11375,
											"end": 11399,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 11375,
											"end": 11399,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 11375,
											"end": 11399,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 11375,
											"end": 11399,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 11375,
											"end": 11399,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 11375,
											"end": 11399,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 11375,
											"end": 11399,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 11375,
											"end": 11399,
											"name": "KECCAK256",
											"source": 9
										},
										{
											"begin": 11368,
											"end": 11399,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 11368,
											"end": 11399,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 11368,
											"end": 11399,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 11368,
											"end": 11399,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 11368,
											"end": 11399,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 11368,
											"end": 11399,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 11368,
											"end": 11399,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 11368,
											"end": 11399,
											"name": "SSTORE",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 11615,
											"end": 11631,
											"name": "DUP6",
											"source": 9
										},
										{
											"begin": 11615,
											"end": 11631,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 11615,
											"end": 11631,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 11615,
											"end": 11631,
											"name": "DUP6",
											"source": 9
										},
										{
											"begin": 11615,
											"end": 11631,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 11615,
											"end": 11624,
											"name": "PUSH",
											"source": 9,
											"value": "5"
										},
										{
											"begin": 11615,
											"end": 11631,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 11615,
											"end": 11631,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 11615,
											"end": 11631,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 11615,
											"end": 11631,
											"name": "DUP6",
											"source": 9
										},
										{
											"begin": 11615,
											"end": 11631,
											"name": "KECCAK256",
											"source": 9
										},
										{
											"begin": 11615,
											"end": 11636,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 11615,
											"end": 11636,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 11615,
											"end": 11636,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 11615,
											"end": 11636,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 11615,
											"end": 11636,
											"name": "SSTORE",
											"source": 9
										},
										{
											"begin": 11663,
											"end": 11679,
											"name": "DUP8",
											"source": 9
										},
										{
											"begin": 11663,
											"end": 11679,
											"name": "DUP6",
											"source": 9
										},
										{
											"begin": 11663,
											"end": 11679,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 11663,
											"end": 11670,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 11663,
											"end": 11679,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 11663,
											"end": 11679,
											"name": "SWAP4",
											"source": 9
										},
										{
											"begin": 11663,
											"end": 11679,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 11663,
											"end": 11679,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 11663,
											"end": 11679,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 11663,
											"end": 11679,
											"name": "KECCAK256",
											"source": 9
										},
										{
											"begin": 11656,
											"end": 11679,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 11656,
											"end": 11679,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 11656,
											"end": 11679,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 11656,
											"end": 11679,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 11656,
											"end": 11679,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 11656,
											"end": 11679,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 11656,
											"end": 11679,
											"name": "SSTORE",
											"source": 9
										},
										{
											"begin": 11695,
											"end": 11731,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 11298,
											"end": 11330,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": 11298,
											"end": 11330,
											"name": "SWAP4",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 11391,
											"end": 11398,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 11391,
											"end": 11398,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH data",
											"source": -1,
											"value": "ADA389E1FC24A8587C776340EFB91B36E675792AB631816100D55DF0B5CF3CBC"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP4",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "CODECOPY",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": 11695,
											"end": 11731,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 11375,
											"end": 11399,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 11375,
											"end": 11399,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 11695,
											"end": 11731,
											"name": "LOG4",
											"source": 9
										},
										{
											"begin": 2046,
											"end": 2152,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 2046,
											"end": 2152,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 2046,
											"end": 2152,
											"name": "JUMP",
											"source": 9,
											"value": "[out]"
										},
										{
											"begin": 7561,
											"end": 7676,
											"name": "tag",
											"source": 9,
											"value": "142"
										},
										{
											"begin": 7561,
											"end": 7676,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 7627,
											"end": 7634,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 7653,
											"end": 7669,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 7653,
											"end": 7669,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 7653,
											"end": 7669,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 7653,
											"end": 7660,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 7653,
											"end": 7669,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 7653,
											"end": 7669,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 7653,
											"end": 7669,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 7653,
											"end": 7669,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 7653,
											"end": 7669,
											"name": "KECCAK256",
											"source": 9
										},
										{
											"begin": 7653,
											"end": 7669,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 7653,
											"end": 7669,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 7653,
											"end": 7669,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 7561,
											"end": 7676,
											"name": "JUMP",
											"source": 9,
											"value": "[out]"
										},
										{
											"begin": 13750,
											"end": 14028,
											"name": "tag",
											"source": 9,
											"value": "159"
										},
										{
											"begin": 13750,
											"end": 14028,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 13870,
											"end": 13878,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 13861,
											"end": 13878,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 13861,
											"end": 13866,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 13861,
											"end": 13878,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 13861,
											"end": 13878,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 13861,
											"end": 13878,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 13853,
											"end": 13909,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "222"
										},
										{
											"begin": 13853,
											"end": 13909,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 13853,
											"end": 13909,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 13853,
											"end": 13909,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 13853,
											"end": 13909,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 13853,
											"end": 13909,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 9066,
											"end": 9068,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 13853,
											"end": 13909,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 13853,
											"end": 13909,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 13853,
											"end": 13909,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 9048,
											"end": 9069,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 9105,
											"end": 9107,
											"name": "PUSH",
											"source": 10,
											"value": "1A"
										},
										{
											"begin": 9085,
											"end": 9103,
											"name": "PUSH",
											"source": 10,
											"value": "24"
										},
										{
											"begin": 9085,
											"end": 9103,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 9085,
											"end": 9103,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 9078,
											"end": 9108,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "26282A37B5B2B71D1030B8383937BB32903A379031B0B63632B9"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "31"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 9124,
											"end": 9142,
											"name": "PUSH",
											"source": 10,
											"value": "44"
										},
										{
											"begin": 9124,
											"end": 9142,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 9124,
											"end": 9142,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 9117,
											"end": 9173,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 9190,
											"end": 9208,
											"name": "PUSH",
											"source": 10,
											"value": "64"
										},
										{
											"begin": 9190,
											"end": 9208,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 13853,
											"end": 13909,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "103"
										},
										{
											"begin": 8864,
											"end": 9214,
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 13853,
											"end": 13909,
											"name": "tag",
											"source": 9,
											"value": "222"
										},
										{
											"begin": 13853,
											"end": 13909,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 13919,
											"end": 13944,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 13919,
											"end": 13944,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 13919,
											"end": 13944,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 13919,
											"end": 13944,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 13919,
											"end": 13944,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 13919,
											"end": 13944,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 13919,
											"end": 13944,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 13919,
											"end": 13937,
											"name": "PUSH",
											"source": 9,
											"value": "7"
										},
										{
											"begin": 13919,
											"end": 13944,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 13919,
											"end": 13944,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 13919,
											"end": 13944,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 13919,
											"end": 13944,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 13919,
											"end": 13944,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 13919,
											"end": 13944,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 13919,
											"end": 13944,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 13919,
											"end": 13944,
											"name": "KECCAK256",
											"source": 9
										},
										{
											"begin": 13919,
											"end": 13954,
											"name": "SWAP5",
											"source": 9
										},
										{
											"begin": 13919,
											"end": 13954,
											"name": "DUP8",
											"source": 9
										},
										{
											"begin": 13919,
											"end": 13954,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 13919,
											"end": 13954,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 13919,
											"end": 13954,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 13919,
											"end": 13954,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 13919,
											"end": 13954,
											"name": "SWAP5",
											"source": 9
										},
										{
											"begin": 13919,
											"end": 13954,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 13919,
											"end": 13954,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 13919,
											"end": 13954,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 13919,
											"end": 13954,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 13919,
											"end": 13954,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 13919,
											"end": 13954,
											"name": "KECCAK256",
											"source": 9
										},
										{
											"begin": 13919,
											"end": 13965,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 13919,
											"end": 13965,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FF"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 13919,
											"end": 13965,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 13919,
											"end": 13965,
											"name": "DUP7",
											"source": 9
										},
										{
											"begin": 13919,
											"end": 13965,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 13919,
											"end": 13965,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 13919,
											"end": 13965,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 13919,
											"end": 13965,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 13919,
											"end": 13965,
											"name": "OR",
											"source": 9
										},
										{
											"begin": 13919,
											"end": 13965,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 13919,
											"end": 13965,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 13919,
											"end": 13965,
											"name": "SSTORE",
											"source": 9
										},
										{
											"begin": 13980,
											"end": 14021,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 13980,
											"end": 14021,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 540,
											"end": 581,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 540,
											"end": 581,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 540,
											"end": 581,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 13980,
											"end": 14021,
											"name": "PUSH",
											"source": 9,
											"value": "17307EAB39AB6107E8899845AD3D59BD9653F200F220920489CA2B5937696C31"
										},
										{
											"begin": 13980,
											"end": 14021,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 513,
											"end": 531,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 13980,
											"end": 14021,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 13980,
											"end": 14021,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 13980,
											"end": 14021,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 13980,
											"end": 14021,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 13980,
											"end": 14021,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 13980,
											"end": 14021,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 13980,
											"end": 14021,
											"name": "LOG3",
											"source": 9
										},
										{
											"begin": 13750,
											"end": 14028,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 13750,
											"end": 14028,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 13750,
											"end": 14028,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 13750,
											"end": 14028,
											"name": "JUMP",
											"source": 9,
											"value": "[out]"
										},
										{
											"begin": 7184,
											"end": 7452,
											"name": "tag",
											"source": 9,
											"value": "166"
										},
										{
											"begin": 7184,
											"end": 7452,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 7296,
											"end": 7324,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "227"
										},
										{
											"begin": 7306,
											"end": 7310,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 7312,
											"end": 7314,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 7316,
											"end": 7323,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 7296,
											"end": 7305,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "123"
										},
										{
											"begin": 7296,
											"end": 7324,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 7296,
											"end": 7324,
											"name": "tag",
											"source": 9,
											"value": "227"
										},
										{
											"begin": 7296,
											"end": 7324,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 7342,
											"end": 7389,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "228"
										},
										{
											"begin": 7365,
											"end": 7369,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 7371,
											"end": 7373,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 7375,
											"end": 7382,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 7384,
											"end": 7388,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 7342,
											"end": 7364,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "229"
										},
										{
											"begin": 7342,
											"end": 7389,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 7342,
											"end": 7389,
											"name": "tag",
											"source": 9,
											"value": "228"
										},
										{
											"begin": 7342,
											"end": 7389,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 7334,
											"end": 7445,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "165"
										},
										{
											"begin": 7334,
											"end": 7445,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 7334,
											"end": 7445,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 7334,
											"end": 7445,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 7334,
											"end": 7445,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 7334,
											"end": 7445,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 7334,
											"end": 7445,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 7334,
											"end": 7445,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 7334,
											"end": 7445,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "103"
										},
										{
											"begin": 7334,
											"end": 7445,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 7334,
											"end": 7445,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "232"
										},
										{
											"begin": 7334,
											"end": 7445,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 415,
											"end": 1111,
											"name": "tag",
											"source": 5,
											"value": "177"
										},
										{
											"begin": 415,
											"end": 1111,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 471,
											"end": 484,
											"name": "PUSH",
											"source": 5,
											"value": "60"
										},
										{
											"begin": 520,
											"end": 534,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 537,
											"end": 554,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "235"
										},
										{
											"begin": 548,
											"end": 553,
											"name": "DUP4",
											"source": 5
										},
										{
											"begin": 537,
											"end": 547,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "236"
										},
										{
											"begin": 537,
											"end": 554,
											"name": "JUMP",
											"source": 5,
											"value": "[in]"
										},
										{
											"begin": 537,
											"end": 554,
											"name": "tag",
											"source": 5,
											"value": "235"
										},
										{
											"begin": 537,
											"end": 554,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 557,
											"end": 558,
											"name": "PUSH",
											"source": 5,
											"value": "1"
										},
										{
											"begin": 537,
											"end": 558,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 520,
											"end": 558,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 520,
											"end": 558,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 572,
											"end": 592,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 606,
											"end": 612,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "40"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 595,
											"end": 613,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 595,
											"end": 613,
											"name": "GT",
											"source": 5
										},
										{
											"begin": 595,
											"end": 613,
											"name": "ISZERO",
											"source": 5
										},
										{
											"begin": 595,
											"end": 613,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "238"
										},
										{
											"begin": 595,
											"end": 613,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 595,
											"end": 613,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "238"
										},
										{
											"begin": 595,
											"end": 613,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "239"
										},
										{
											"begin": 595,
											"end": 613,
											"name": "JUMP",
											"source": 5,
											"value": "[in]"
										},
										{
											"begin": 595,
											"end": 613,
											"name": "tag",
											"source": 5,
											"value": "238"
										},
										{
											"begin": 595,
											"end": 613,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 595,
											"end": 613,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 595,
											"end": 613,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 595,
											"end": 613,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 595,
											"end": 613,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 595,
											"end": 613,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 595,
											"end": 613,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 595,
											"end": 613,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 595,
											"end": 613,
											"name": "PUSH",
											"source": 5,
											"value": "1F"
										},
										{
											"begin": 595,
											"end": 613,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 595,
											"end": 613,
											"name": "PUSH",
											"source": 5,
											"value": "1F"
										},
										{
											"begin": 595,
											"end": 613,
											"name": "NOT",
											"source": 5
										},
										{
											"begin": 595,
											"end": 613,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 595,
											"end": 613,
											"name": "PUSH",
											"source": 5,
											"value": "20"
										},
										{
											"begin": 595,
											"end": 613,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 595,
											"end": 613,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 595,
											"end": 613,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 595,
											"end": 613,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 595,
											"end": 613,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 595,
											"end": 613,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 595,
											"end": 613,
											"name": "ISZERO",
											"source": 5
										},
										{
											"begin": 595,
											"end": 613,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "240"
										},
										{
											"begin": 595,
											"end": 613,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 595,
											"end": 613,
											"name": "PUSH",
											"source": 5,
											"value": "20"
										},
										{
											"begin": 595,
											"end": 613,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 595,
											"end": 613,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 595,
											"end": 613,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 595,
											"end": 613,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 595,
											"end": 613,
											"name": "CALLDATASIZE",
											"source": 5
										},
										{
											"begin": 595,
											"end": 613,
											"name": "DUP4",
											"source": 5
										},
										{
											"begin": 595,
											"end": 613,
											"name": "CALLDATACOPY",
											"source": 5
										},
										{
											"begin": 595,
											"end": 613,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 595,
											"end": 613,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 595,
											"end": 613,
											"name": "tag",
											"source": 5,
											"value": "240"
										},
										{
											"begin": 595,
											"end": 613,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 572,
											"end": 613,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 733,
											"end": 761,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 733,
											"end": 761,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 733,
											"end": 761,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 749,
											"end": 751,
											"name": "PUSH",
											"source": 5,
											"value": "20"
										},
										{
											"begin": 733,
											"end": 761,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 788,
											"end": 1068,
											"name": "tag",
											"source": 5,
											"value": "241"
										},
										{
											"begin": 788,
											"end": 1068,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 819,
											"end": 824,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "181899199A1A9B1B9C1CB0B131B232B3"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "81"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 953,
											"end": 955,
											"name": "PUSH",
											"source": 5,
											"value": "A"
										},
										{
											"begin": 942,
											"end": 956,
											"name": "DUP7",
											"source": 5
										},
										{
											"begin": 942,
											"end": 956,
											"name": "MOD",
											"source": 5
										},
										{
											"begin": 937,
											"end": 967,
											"name": "BYTE",
											"source": 5
										},
										{
											"begin": 819,
											"end": 824,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 924,
											"end": 968,
											"name": "MSTORE8",
											"source": 5
										},
										{
											"begin": 1012,
											"end": 1014,
											"name": "PUSH",
											"source": 5,
											"value": "A"
										},
										{
											"begin": 1003,
											"end": 1014,
											"name": "DUP6",
											"source": 5
										},
										{
											"begin": 1003,
											"end": 1014,
											"name": "DIV",
											"source": 5
										},
										{
											"begin": 1003,
											"end": 1014,
											"name": "SWAP5",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1036,
											"end": 1046,
											"name": "DUP5",
											"source": 5
										},
										{
											"begin": 1032,
											"end": 1053,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "246"
										},
										{
											"begin": 1032,
											"end": 1053,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 1048,
											"end": 1053,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "242"
										},
										{
											"begin": 1048,
											"end": 1053,
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 1032,
											"end": 1053,
											"name": "tag",
											"source": 5,
											"value": "246"
										},
										{
											"begin": 1032,
											"end": 1053,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 788,
											"end": 1068,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "241"
										},
										{
											"begin": 788,
											"end": 1068,
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 788,
											"end": 1068,
											"name": "tag",
											"source": 5,
											"value": "242"
										},
										{
											"begin": 788,
											"end": 1068,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1088,
											"end": 1094,
											"name": "SWAP4",
											"source": 5
										},
										{
											"begin": 415,
											"end": 1111,
											"name": "SWAP3",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 415,
											"end": 1111,
											"name": "JUMP",
											"source": 5,
											"value": "[out]"
										},
										{
											"begin": 7979,
											"end": 8105,
											"name": "tag",
											"source": 9,
											"value": "184"
										},
										{
											"begin": 7979,
											"end": 8105,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 8044,
											"end": 8048,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 8044,
											"end": 8048,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 8067,
											"end": 8084,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "248"
										},
										{
											"begin": 8076,
											"end": 8083,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 8067,
											"end": 8075,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "142"
										},
										{
											"begin": 8067,
											"end": 8084,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 8067,
											"end": 8084,
											"name": "tag",
											"source": 9,
											"value": "248"
										},
										{
											"begin": 8067,
											"end": 8084,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 8067,
											"end": 8098,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 8067,
											"end": 8098,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 8067,
											"end": 8098,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 8067,
											"end": 8098,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": 7979,
											"end": 8105,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 7979,
											"end": 8105,
											"name": "JUMP",
											"source": 9,
											"value": "[out]"
										},
										{
											"begin": 16346,
											"end": 16742,
											"name": "tag",
											"source": 9,
											"value": "205"
										},
										{
											"begin": 16346,
											"end": 16742,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 16530,
											"end": 16531,
											"name": "PUSH",
											"source": 9,
											"value": "1"
										},
										{
											"begin": 16518,
											"end": 16527,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 16518,
											"end": 16531,
											"name": "GT",
											"source": 9
										},
										{
											"begin": 16514,
											"end": 16736,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 16514,
											"end": 16736,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "165"
										},
										{
											"begin": 16514,
											"end": 16736,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 16551,
											"end": 16569,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 16551,
											"end": 16569,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 16551,
											"end": 16569,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 16547,
											"end": 16632,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "251"
										},
										{
											"begin": 16547,
											"end": 16632,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 16589,
											"end": 16604,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 16589,
											"end": 16604,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 16589,
											"end": 16604,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 16589,
											"end": 16604,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 16589,
											"end": 16604,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 16589,
											"end": 16604,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 16589,
											"end": 16598,
											"name": "PUSH",
											"source": 9,
											"value": "5"
										},
										{
											"begin": 16589,
											"end": 16604,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 16589,
											"end": 16604,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 16589,
											"end": 16604,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 16589,
											"end": 16604,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 16589,
											"end": 16604,
											"name": "KECCAK256",
											"source": 9
										},
										{
											"begin": 16589,
											"end": 16617,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 16589,
											"end": 16617,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 16608,
											"end": 16617,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 16608,
											"end": 16617,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": 16589,
											"end": 16604,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 16589,
											"end": 16617,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "252"
										},
										{
											"begin": 16589,
											"end": 16617,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 16608,
											"end": 16617,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 16608,
											"end": 16617,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 16589,
											"end": 16617,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "253"
										},
										{
											"begin": 16589,
											"end": 16617,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 16589,
											"end": 16617,
											"name": "tag",
											"source": 9,
											"value": "252"
										},
										{
											"begin": 16589,
											"end": 16617,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 16589,
											"end": 16617,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 16589,
											"end": 16617,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 16589,
											"end": 16617,
											"name": "SSTORE",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 16547,
											"end": 16632,
											"name": "tag",
											"source": 9,
											"value": "251"
										},
										{
											"begin": 16547,
											"end": 16632,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 16649,
											"end": 16665,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 16649,
											"end": 16665,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 16649,
											"end": 16665,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 16645,
											"end": 16726,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "165"
										},
										{
											"begin": 16645,
											"end": 16726,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 16685,
											"end": 16698,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 16685,
											"end": 16698,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 16685,
											"end": 16698,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 16685,
											"end": 16698,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 16685,
											"end": 16698,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 16685,
											"end": 16698,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 16685,
											"end": 16694,
											"name": "PUSH",
											"source": 9,
											"value": "5"
										},
										{
											"begin": 16685,
											"end": 16698,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 16685,
											"end": 16698,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 16685,
											"end": 16698,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 16685,
											"end": 16698,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 16685,
											"end": 16698,
											"name": "KECCAK256",
											"source": 9
										},
										{
											"begin": 16685,
											"end": 16711,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 16685,
											"end": 16711,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 16702,
											"end": 16711,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 16702,
											"end": 16711,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": 16685,
											"end": 16698,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 16685,
											"end": 16711,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "255"
										},
										{
											"begin": 16685,
											"end": 16711,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 16702,
											"end": 16711,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 16702,
											"end": 16711,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 16685,
											"end": 16711,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "256"
										},
										{
											"begin": 16685,
											"end": 16711,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 16685,
											"end": 16711,
											"name": "tag",
											"source": 9,
											"value": "255"
										},
										{
											"begin": 16685,
											"end": 16711,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 16685,
											"end": 16711,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 16685,
											"end": 16711,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 16685,
											"end": 16711,
											"name": "SSTORE",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 16346,
											"end": 16742,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 16346,
											"end": 16742,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 16346,
											"end": 16742,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 16346,
											"end": 16742,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 16346,
											"end": 16742,
											"name": "JUMP",
											"source": 9,
											"value": "[out]"
										},
										{
											"begin": 9184,
											"end": 9464,
											"name": "tag",
											"source": 9,
											"value": "214"
										},
										{
											"begin": 9184,
											"end": 9464,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 9278,
											"end": 9296,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "259"
										},
										{
											"begin": 9284,
											"end": 9286,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 9288,
											"end": 9295,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 9278,
											"end": 9283,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "260"
										},
										{
											"begin": 9278,
											"end": 9296,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 9278,
											"end": 9296,
											"name": "tag",
											"source": 9,
											"value": "259"
										},
										{
											"begin": 9278,
											"end": 9296,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 9327,
											"end": 9380,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "261"
										},
										{
											"begin": 9358,
											"end": 9359,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 9362,
											"end": 9364,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 9366,
											"end": 9373,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 9375,
											"end": 9379,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 9327,
											"end": 9349,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "229"
										},
										{
											"begin": 9327,
											"end": 9380,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 9327,
											"end": 9380,
											"name": "tag",
											"source": 9,
											"value": "261"
										},
										{
											"begin": 9327,
											"end": 9380,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 9306,
											"end": 9457,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "113"
										},
										{
											"begin": 9306,
											"end": 9457,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 9306,
											"end": 9457,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 9306,
											"end": 9457,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 9306,
											"end": 9457,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 9306,
											"end": 9457,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 9306,
											"end": 9457,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 9306,
											"end": 9457,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 9306,
											"end": 9457,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "103"
										},
										{
											"begin": 9306,
											"end": 9457,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 9306,
											"end": 9457,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "232"
										},
										{
											"begin": 9306,
											"end": 9457,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 14798,
											"end": 15630,
											"name": "tag",
											"source": 9,
											"value": "229"
										},
										{
											"begin": 14798,
											"end": 15630,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 14947,
											"end": 14951,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 14967,
											"end": 14980,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 14967,
											"end": 14980,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 1465,
											"end": 1484,
											"name": "EXTCODESIZE",
											"source": 3
										},
										{
											"begin": 1465,
											"end": 1488,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 14963,
											"end": 15624,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "267"
										},
										{
											"begin": 14963,
											"end": 15624,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 15002,
											"end": 15073,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 15002,
											"end": 15073,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A85BD01"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 15002,
											"end": 15073,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 15002,
											"end": 15073,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 15002,
											"end": 15038,
											"name": "DUP6",
											"source": 9
										},
										{
											"begin": 15002,
											"end": 15038,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 15002,
											"end": 15038,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 15002,
											"end": 15038,
											"name": "PUSH",
											"source": 9,
											"value": "150B7A02"
										},
										{
											"begin": 15002,
											"end": 15038,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 15002,
											"end": 15073,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "269"
										},
										{
											"begin": 15002,
											"end": 15073,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 719,
											"end": 729,
											"name": "CALLER",
											"source": 4
										},
										{
											"begin": 719,
											"end": 729,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 15053,
											"end": 15057,
											"name": "DUP10",
											"source": 9
										},
										{
											"begin": 15053,
											"end": 15057,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 15059,
											"end": 15066,
											"name": "DUP9",
											"source": 9
										},
										{
											"begin": 15059,
											"end": 15066,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 15068,
											"end": 15072,
											"name": "DUP9",
											"source": 9
										},
										{
											"begin": 15068,
											"end": 15072,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 15002,
											"end": 15073,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 15002,
											"end": 15073,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 15002,
											"end": 15073,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "270"
										},
										{
											"begin": 15002,
											"end": 15073,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 15002,
											"end": 15073,
											"name": "tag",
											"source": 9,
											"value": "269"
										},
										{
											"begin": 15002,
											"end": 15073,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 15002,
											"end": 15073,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 15002,
											"end": 15073,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 15002,
											"end": 15073,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 15002,
											"end": 15073,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 15002,
											"end": 15073,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 15002,
											"end": 15073,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 15002,
											"end": 15073,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 15002,
											"end": 15073,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 15002,
											"end": 15073,
											"name": "DUP8",
											"source": 9
										},
										{
											"begin": 15002,
											"end": 15073,
											"name": "GAS",
											"source": 9
										},
										{
											"begin": 15002,
											"end": 15073,
											"name": "CALL",
											"source": 9
										},
										{
											"begin": 15002,
											"end": 15073,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": 15002,
											"end": 15073,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 15002,
											"end": 15073,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 15002,
											"end": 15073,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 15002,
											"end": 15073,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 15002,
											"end": 15073,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 15002,
											"end": 15073,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "271"
										},
										{
											"begin": 15002,
											"end": 15073,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 15002,
											"end": 15073,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 15002,
											"end": 15073,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 15002,
											"end": 15073,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 15002,
											"end": 15073,
											"name": "PUSH",
											"source": 9,
											"value": "1F"
										},
										{
											"begin": 15002,
											"end": 15073,
											"name": "RETURNDATASIZE",
											"source": 9
										},
										{
											"begin": 15002,
											"end": 15073,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 15002,
											"end": 15073,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 15002,
											"end": 15073,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1F"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 15002,
											"end": 15073,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 15002,
											"end": 15073,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 15002,
											"end": 15073,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 15002,
											"end": 15073,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 15002,
											"end": 15073,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": 15002,
											"end": 15073,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 15002,
											"end": 15073,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "272"
										},
										{
											"begin": 15002,
											"end": 15073,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 15002,
											"end": 15073,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 15002,
											"end": 15073,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 15002,
											"end": 15073,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 15002,
											"end": 15073,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "273"
										},
										{
											"begin": 15002,
											"end": 15073,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 15002,
											"end": 15073,
											"name": "tag",
											"source": 9,
											"value": "272"
										},
										{
											"begin": 15002,
											"end": 15073,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 15002,
											"end": 15073,
											"name": "PUSH",
											"source": 9,
											"value": "1"
										},
										{
											"begin": 15002,
											"end": 15073,
											"name": "tag",
											"source": 9,
											"value": "271"
										},
										{
											"begin": 15002,
											"end": 15073,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 14998,
											"end": 15572,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "274"
										},
										{
											"begin": 14998,
											"end": 15572,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 14998,
											"end": 15572,
											"name": "RETURNDATASIZE",
											"source": 9
										},
										{
											"begin": 14998,
											"end": 15572,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 14998,
											"end": 15572,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 14998,
											"end": 15572,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 14998,
											"end": 15572,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "279"
										},
										{
											"begin": 14998,
											"end": 15572,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 14998,
											"end": 15572,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 14998,
											"end": 15572,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 14998,
											"end": 15572,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 14998,
											"end": 15572,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 14998,
											"end": 15572,
											"name": "PUSH",
											"source": 9,
											"value": "1F"
										},
										{
											"begin": 14998,
											"end": 15572,
											"name": "NOT",
											"source": 9
										},
										{
											"begin": 14998,
											"end": 15572,
											"name": "PUSH",
											"source": 9,
											"value": "3F"
										},
										{
											"begin": 14998,
											"end": 15572,
											"name": "RETURNDATASIZE",
											"source": 9
										},
										{
											"begin": 14998,
											"end": 15572,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 14998,
											"end": 15572,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 14998,
											"end": 15572,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 14998,
											"end": 15572,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 14998,
											"end": 15572,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 14998,
											"end": 15572,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 14998,
											"end": 15572,
											"name": "RETURNDATASIZE",
											"source": 9
										},
										{
											"begin": 14998,
											"end": 15572,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 14998,
											"end": 15572,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 14998,
											"end": 15572,
											"name": "RETURNDATASIZE",
											"source": 9
										},
										{
											"begin": 14998,
											"end": 15572,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 14998,
											"end": 15572,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 14998,
											"end": 15572,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 14998,
											"end": 15572,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 14998,
											"end": 15572,
											"name": "RETURNDATACOPY",
											"source": 9
										},
										{
											"begin": 14998,
											"end": 15572,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "278"
										},
										{
											"begin": 14998,
											"end": 15572,
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 14998,
											"end": 15572,
											"name": "tag",
											"source": 9,
											"value": "279"
										},
										{
											"begin": 14998,
											"end": 15572,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 14998,
											"end": 15572,
											"name": "PUSH",
											"source": 9,
											"value": "60"
										},
										{
											"begin": 14998,
											"end": 15572,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 14998,
											"end": 15572,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 14998,
											"end": 15572,
											"name": "tag",
											"source": 9,
											"value": "278"
										},
										{
											"begin": 14998,
											"end": 15572,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 15240,
											"end": 15253,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 15240,
											"end": 15253,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 15236,
											"end": 15558,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "280"
										},
										{
											"begin": 15236,
											"end": 15558,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 15282,
											"end": 15343,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 15282,
											"end": 15343,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 15282,
											"end": 15343,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 15282,
											"end": 15343,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 15282,
											"end": 15343,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 15282,
											"end": 15343,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 15282,
											"end": 15343,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "103"
										},
										{
											"begin": 15282,
											"end": 15343,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 15282,
											"end": 15343,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "232"
										},
										{
											"begin": 15282,
											"end": 15343,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 15236,
											"end": 15558,
											"name": "tag",
											"source": 9,
											"value": "280"
										},
										{
											"begin": 15236,
											"end": 15558,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 15510,
											"end": 15516,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 15504,
											"end": 15517,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 15495,
											"end": 15501,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 15491,
											"end": 15493,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 15487,
											"end": 15502,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 15480,
											"end": 15518,
											"name": "REVERT",
											"source": 9
										},
										{
											"begin": 14998,
											"end": 15572,
											"name": "tag",
											"source": 9,
											"value": "274"
										},
										{
											"begin": 14998,
											"end": 15572,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 15123,
											"end": 15174,
											"name": "AND",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A85BD01"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 15123,
											"end": 15174,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 15123,
											"end": 15174,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 15116,
											"end": 15174,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "194"
										},
										{
											"begin": 15116,
											"end": 15174,
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 14963,
											"end": 15624,
											"name": "tag",
											"source": 9,
											"value": "267"
										},
										{
											"begin": 14963,
											"end": 15624,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 15609,
											"end": 15613,
											"name": "PUSH",
											"source": 9,
											"value": "1"
										},
										{
											"begin": 14798,
											"end": 15630,
											"name": "SWAP5",
											"source": 9
										},
										{
											"begin": 14798,
											"end": 15630,
											"name": "SWAP4",
											"source": 9
										},
										{
											"begin": 14798,
											"end": 15630,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 14798,
											"end": 15630,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 14798,
											"end": 15630,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 14798,
											"end": 15630,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 14798,
											"end": 15630,
											"name": "JUMP",
											"source": 9,
											"value": "[out]"
										},
										{
											"begin": 9889,
											"end": 10779,
											"name": "tag",
											"source": 8,
											"value": "236"
										},
										{
											"begin": 9889,
											"end": 10779,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 9942,
											"end": 9949,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 9942,
											"end": 9949,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "184F03E93FF9F4DAA797ED6E38ED64BF6A1F01"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "40"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 10017,
											"end": 10032,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 10017,
											"end": 10032,
											"name": "LT",
											"source": 8
										},
										{
											"begin": 10013,
											"end": 10112,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "286"
										},
										{
											"begin": 10013,
											"end": 10112,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "184F03E93FF9F4DAA797ED6E38ED64BF6A1F01"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "40"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 10052,
											"end": 10067,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 10052,
											"end": 10067,
											"name": "DIV",
											"source": 8
										},
										{
											"begin": 10052,
											"end": 10067,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 10095,
											"end": 10097,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 10085,
											"end": 10097,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 10013,
											"end": 10112,
											"name": "tag",
											"source": 8,
											"value": "286"
										},
										{
											"begin": 10013,
											"end": 10112,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "4EE2D6D415B85ACEF81"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 10129,
											"end": 10134,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 10129,
											"end": 10144,
											"name": "LT",
											"source": 8
										},
										{
											"begin": 10125,
											"end": 10224,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "289"
										},
										{
											"begin": 10125,
											"end": 10224,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "4EE2D6D415B85ACEF81"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 10164,
											"end": 10179,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 10164,
											"end": 10179,
											"name": "DIV",
											"source": 8
										},
										{
											"begin": 10164,
											"end": 10179,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 10207,
											"end": 10209,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 10197,
											"end": 10209,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 10125,
											"end": 10224,
											"name": "tag",
											"source": 8,
											"value": "289"
										},
										{
											"begin": 10125,
											"end": 10224,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 10250,
											"end": 10256,
											"name": "PUSH",
											"source": 8,
											"value": "2386F26FC10000"
										},
										{
											"begin": 10241,
											"end": 10246,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 10241,
											"end": 10256,
											"name": "LT",
											"source": 8
										},
										{
											"begin": 10237,
											"end": 10336,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "292"
										},
										{
											"begin": 10237,
											"end": 10336,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 10285,
											"end": 10291,
											"name": "PUSH",
											"source": 8,
											"value": "2386F26FC10000"
										},
										{
											"begin": 10276,
											"end": 10291,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 10276,
											"end": 10291,
											"name": "DIV",
											"source": 8
										},
										{
											"begin": 10276,
											"end": 10291,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 10319,
											"end": 10321,
											"name": "PUSH",
											"source": 8,
											"value": "10"
										},
										{
											"begin": 10309,
											"end": 10321,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 10237,
											"end": 10336,
											"name": "tag",
											"source": 8,
											"value": "292"
										},
										{
											"begin": 10237,
											"end": 10336,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 10362,
											"end": 10367,
											"name": "PUSH",
											"source": 8,
											"value": "5F5E100"
										},
										{
											"begin": 10353,
											"end": 10358,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 10353,
											"end": 10367,
											"name": "LT",
											"source": 8
										},
										{
											"begin": 10349,
											"end": 10445,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "295"
										},
										{
											"begin": 10349,
											"end": 10445,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 10396,
											"end": 10401,
											"name": "PUSH",
											"source": 8,
											"value": "5F5E100"
										},
										{
											"begin": 10387,
											"end": 10401,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 10387,
											"end": 10401,
											"name": "DIV",
											"source": 8
										},
										{
											"begin": 10387,
											"end": 10401,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 10429,
											"end": 10430,
											"name": "PUSH",
											"source": 8,
											"value": "8"
										},
										{
											"begin": 10419,
											"end": 10430,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 10349,
											"end": 10445,
											"name": "tag",
											"source": 8,
											"value": "295"
										},
										{
											"begin": 10349,
											"end": 10445,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 10471,
											"end": 10476,
											"name": "PUSH",
											"source": 8,
											"value": "2710"
										},
										{
											"begin": 10462,
											"end": 10467,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 10462,
											"end": 10476,
											"name": "LT",
											"source": 8
										},
										{
											"begin": 10458,
											"end": 10554,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "298"
										},
										{
											"begin": 10458,
											"end": 10554,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 10505,
											"end": 10510,
											"name": "PUSH",
											"source": 8,
											"value": "2710"
										},
										{
											"begin": 10496,
											"end": 10510,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 10496,
											"end": 10510,
											"name": "DIV",
											"source": 8
										},
										{
											"begin": 10496,
											"end": 10510,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 10538,
											"end": 10539,
											"name": "PUSH",
											"source": 8,
											"value": "4"
										},
										{
											"begin": 10528,
											"end": 10539,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 10458,
											"end": 10554,
											"name": "tag",
											"source": 8,
											"value": "298"
										},
										{
											"begin": 10458,
											"end": 10554,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 10580,
											"end": 10585,
											"name": "PUSH",
											"source": 8,
											"value": "64"
										},
										{
											"begin": 10571,
											"end": 10576,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 10571,
											"end": 10585,
											"name": "LT",
											"source": 8
										},
										{
											"begin": 10567,
											"end": 10663,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "301"
										},
										{
											"begin": 10567,
											"end": 10663,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 10614,
											"end": 10619,
											"name": "PUSH",
											"source": 8,
											"value": "64"
										},
										{
											"begin": 10605,
											"end": 10619,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 10605,
											"end": 10619,
											"name": "DIV",
											"source": 8
										},
										{
											"begin": 10605,
											"end": 10619,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 10647,
											"end": 10648,
											"name": "PUSH",
											"source": 8,
											"value": "2"
										},
										{
											"begin": 10637,
											"end": 10648,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 10567,
											"end": 10663,
											"name": "tag",
											"source": 8,
											"value": "301"
										},
										{
											"begin": 10567,
											"end": 10663,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 10689,
											"end": 10694,
											"name": "PUSH",
											"source": 8,
											"value": "A"
										},
										{
											"begin": 10680,
											"end": 10685,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 10680,
											"end": 10694,
											"name": "LT",
											"source": 8
										},
										{
											"begin": 10676,
											"end": 10740,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "88"
										},
										{
											"begin": 10676,
											"end": 10740,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 10724,
											"end": 10725,
											"name": "PUSH",
											"source": 8,
											"value": "1"
										},
										{
											"begin": 10714,
											"end": 10725,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 10766,
											"end": 10772,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 9889,
											"end": 10779,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 9889,
											"end": 10779,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										},
										{
											"begin": 9786,
											"end": 10709,
											"name": "tag",
											"source": 9,
											"value": "260"
										},
										{
											"begin": 9786,
											"end": 10709,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 9865,
											"end": 9881,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 9865,
											"end": 9881,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 9857,
											"end": 9919,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "306"
										},
										{
											"begin": 9857,
											"end": 9919,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 9857,
											"end": 9919,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 9857,
											"end": 9919,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 9857,
											"end": 9919,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 9857,
											"end": 9919,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 11116,
											"end": 11118,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 9857,
											"end": 9919,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 9857,
											"end": 9919,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 9857,
											"end": 9919,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 11098,
											"end": 11119,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 11155,
											"end": 11157,
											"name": "PUSH",
											"source": 10,
											"value": "21"
										},
										{
											"begin": 11135,
											"end": 11153,
											"name": "PUSH",
											"source": 10,
											"value": "24"
										},
										{
											"begin": 11135,
											"end": 11153,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 11135,
											"end": 11153,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 11128,
											"end": 11158,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 11194,
											"end": 11228,
											"name": "PUSH",
											"source": 10,
											"value": "4C50546F6B656E3A206D696E7420746F20746865207A65726F20616464726573"
										},
										{
											"begin": 11174,
											"end": 11192,
											"name": "PUSH",
											"source": 10,
											"value": "44"
										},
										{
											"begin": 11174,
											"end": 11192,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 11174,
											"end": 11192,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 11167,
											"end": 11229,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "73"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "F8"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 11245,
											"end": 11263,
											"name": "PUSH",
											"source": 10,
											"value": "64"
										},
										{
											"begin": 11245,
											"end": 11263,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 11245,
											"end": 11263,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 11238,
											"end": 11269,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 11286,
											"end": 11305,
											"name": "PUSH",
											"source": 10,
											"value": "84"
										},
										{
											"begin": 11286,
											"end": 11305,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 9857,
											"end": 9919,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "103"
										},
										{
											"begin": 10914,
											"end": 11311,
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 9857,
											"end": 9919,
											"name": "tag",
											"source": 9,
											"value": "306"
										},
										{
											"begin": 9857,
											"end": 9919,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 9938,
											"end": 9954,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "309"
										},
										{
											"begin": 9946,
											"end": 9953,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 9938,
											"end": 9945,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "184"
										},
										{
											"begin": 9938,
											"end": 9954,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 9938,
											"end": 9954,
											"name": "tag",
											"source": 9,
											"value": "309"
										},
										{
											"begin": 9938,
											"end": 9954,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 9937,
											"end": 9954,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 9929,
											"end": 9988,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "310"
										},
										{
											"begin": 9929,
											"end": 9988,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 9929,
											"end": 9988,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 9929,
											"end": 9988,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 9929,
											"end": 9988,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 9929,
											"end": 9988,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 9929,
											"end": 9988,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 9929,
											"end": 9988,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 9929,
											"end": 9988,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "103"
										},
										{
											"begin": 9929,
											"end": 9988,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 9929,
											"end": 9988,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "312"
										},
										{
											"begin": 9929,
											"end": 9988,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 9929,
											"end": 9988,
											"name": "tag",
											"source": 9,
											"value": "310"
										},
										{
											"begin": 9929,
											"end": 9988,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 9999,
											"end": 10047,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "313"
										},
										{
											"begin": 10028,
											"end": 10029,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 10032,
											"end": 10034,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 10036,
											"end": 10043,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 10045,
											"end": 10046,
											"name": "PUSH",
											"source": 9,
											"value": "1"
										},
										{
											"begin": 9999,
											"end": 10019,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "205"
										},
										{
											"begin": 9999,
											"end": 10047,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 9999,
											"end": 10047,
											"name": "tag",
											"source": 9,
											"value": "313"
										},
										{
											"begin": 9999,
											"end": 10047,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 10143,
											"end": 10159,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "314"
										},
										{
											"begin": 10151,
											"end": 10158,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 10143,
											"end": 10150,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "184"
										},
										{
											"begin": 10143,
											"end": 10159,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 10143,
											"end": 10159,
											"name": "tag",
											"source": 9,
											"value": "314"
										},
										{
											"begin": 10143,
											"end": 10159,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 10142,
											"end": 10159,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 10134,
											"end": 10193,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "315"
										},
										{
											"begin": 10134,
											"end": 10193,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 10134,
											"end": 10193,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 10134,
											"end": 10193,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 10134,
											"end": 10193,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 10134,
											"end": 10193,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 10134,
											"end": 10193,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 10134,
											"end": 10193,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 10134,
											"end": 10193,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "103"
										},
										{
											"begin": 10134,
											"end": 10193,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 10134,
											"end": 10193,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "312"
										},
										{
											"begin": 10134,
											"end": 10193,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 10134,
											"end": 10193,
											"name": "tag",
											"source": 9,
											"value": "315"
										},
										{
											"begin": 10134,
											"end": 10193,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 10535,
											"end": 10548,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 10535,
											"end": 10548,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 10535,
											"end": 10548,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 10535,
											"end": 10548,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 10535,
											"end": 10548,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 10535,
											"end": 10548,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 10535,
											"end": 10544,
											"name": "PUSH",
											"source": 9,
											"value": "5"
										},
										{
											"begin": 10535,
											"end": 10548,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 10535,
											"end": 10548,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 10535,
											"end": 10548,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 10535,
											"end": 10548,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 10535,
											"end": 10548,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 10535,
											"end": 10548,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 10535,
											"end": 10548,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 10535,
											"end": 10548,
											"name": "KECCAK256",
											"source": 9
										},
										{
											"begin": 10535,
											"end": 10553,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 10535,
											"end": 10553,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 10552,
											"end": 10553,
											"name": "PUSH",
											"source": 9,
											"value": "1"
										},
										{
											"begin": 10535,
											"end": 10553,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 10535,
											"end": 10553,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 10535,
											"end": 10553,
											"name": "SSTORE",
											"source": 9
										},
										{
											"begin": 10574,
											"end": 10590,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 10574,
											"end": 10590,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 10574,
											"end": 10590,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 10574,
											"end": 10581,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 10574,
											"end": 10590,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 10574,
											"end": 10590,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 10574,
											"end": 10590,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 10574,
											"end": 10590,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 10574,
											"end": 10590,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 10574,
											"end": 10590,
											"name": "KECCAK256",
											"source": 9
										},
										{
											"begin": 10574,
											"end": 10595,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 10574,
											"end": 10595,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 10574,
											"end": 10595,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 10574,
											"end": 10595,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 10574,
											"end": 10595,
											"name": "OR",
											"source": 9
										},
										{
											"begin": 10574,
											"end": 10595,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 10574,
											"end": 10595,
											"name": "SSTORE",
											"source": 9
										},
										{
											"begin": 10611,
											"end": 10644,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 10582,
											"end": 10589,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 10582,
											"end": 10589,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": 10535,
											"end": 10548,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 10535,
											"end": 10548,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH data",
											"source": -1,
											"value": "ADA389E1FC24A8587C776340EFB91B36E675792AB631816100D55DF0B5CF3CBC"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP4",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "CODECOPY",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": 10611,
											"end": 10644,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 10535,
											"end": 10548,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 10535,
											"end": 10548,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 10611,
											"end": 10644,
											"name": "LOG4",
											"source": 9
										},
										{
											"begin": 2046,
											"end": 2152,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 2046,
											"end": 2152,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 2046,
											"end": 2152,
											"name": "JUMP",
											"source": 9,
											"value": "[out]"
										},
										{
											"begin": 14,
											"end": 145,
											"name": "tag",
											"source": 10,
											"value": "319"
										},
										{
											"begin": 14,
											"end": 145,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 88,
											"end": 120,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 88,
											"end": 120,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 78,
											"end": 121,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 78,
											"end": 121,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 68,
											"end": 139,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "138"
										},
										{
											"begin": 68,
											"end": 139,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 135,
											"end": 136,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 132,
											"end": 133,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 125,
											"end": 137,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 150,
											"end": 395,
											"name": "tag",
											"source": 10,
											"value": "21"
										},
										{
											"begin": 150,
											"end": 395,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 208,
											"end": 214,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 261,
											"end": 263,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 249,
											"end": 258,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 240,
											"end": 247,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 236,
											"end": 259,
											"name": "SUB",
											"source": 10
										},
										{
											"begin": 232,
											"end": 264,
											"name": "SLT",
											"source": 10
										},
										{
											"begin": 229,
											"end": 281,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 229,
											"end": 281,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "328"
										},
										{
											"begin": 229,
											"end": 281,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 277,
											"end": 278,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 274,
											"end": 275,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 267,
											"end": 279,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 229,
											"end": 281,
											"name": "tag",
											"source": 10,
											"value": "328"
										},
										{
											"begin": 229,
											"end": 281,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 316,
											"end": 325,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 303,
											"end": 326,
											"name": "CALLDATALOAD",
											"source": 10
										},
										{
											"begin": 335,
											"end": 365,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "175"
										},
										{
											"begin": 359,
											"end": 364,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 335,
											"end": 365,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "319"
										},
										{
											"begin": 335,
											"end": 365,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 592,
											"end": 850,
											"name": "tag",
											"source": 10,
											"value": "320"
										},
										{
											"begin": 592,
											"end": 850,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 664,
											"end": 665,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 674,
											"end": 787,
											"name": "tag",
											"source": 10,
											"value": "332"
										},
										{
											"begin": 674,
											"end": 787,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 688,
											"end": 694,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 685,
											"end": 686,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 682,
											"end": 695,
											"name": "LT",
											"source": 10
										},
										{
											"begin": 674,
											"end": 787,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 674,
											"end": 787,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "334"
										},
										{
											"begin": 674,
											"end": 787,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 764,
											"end": 775,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 764,
											"end": 775,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 764,
											"end": 775,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 758,
											"end": 776,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 745,
											"end": 756,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 745,
											"end": 756,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 745,
											"end": 756,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 738,
											"end": 777,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 710,
											"end": 712,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 703,
											"end": 713,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 674,
											"end": 787,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "332"
										},
										{
											"begin": 674,
											"end": 787,
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 674,
											"end": 787,
											"name": "tag",
											"source": 10,
											"value": "334"
										},
										{
											"begin": 674,
											"end": 787,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 805,
											"end": 811,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 802,
											"end": 803,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 799,
											"end": 812,
											"name": "GT",
											"source": 10
										},
										{
											"begin": 796,
											"end": 844,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 796,
											"end": 844,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "165"
										},
										{
											"begin": 796,
											"end": 844,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 840,
											"end": 841,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 822,
											"end": 838,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 822,
											"end": 838,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 815,
											"end": 842,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 592,
											"end": 850,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 855,
											"end": 1113,
											"name": "tag",
											"source": 10,
											"value": "321"
										},
										{
											"begin": 855,
											"end": 1113,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 897,
											"end": 900,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 935,
											"end": 940,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 929,
											"end": 941,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 962,
											"end": 968,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 957,
											"end": 960,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 950,
											"end": 969,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 978,
											"end": 1041,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "337"
										},
										{
											"begin": 1034,
											"end": 1040,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 1027,
											"end": 1031,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 1022,
											"end": 1025,
											"name": "DUP7",
											"source": 10
										},
										{
											"begin": 1018,
											"end": 1032,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 1011,
											"end": 1015,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 1004,
											"end": 1009,
											"name": "DUP7",
											"source": 10
										},
										{
											"begin": 1000,
											"end": 1016,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 978,
											"end": 1041,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "320"
										},
										{
											"begin": 978,
											"end": 1041,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 978,
											"end": 1041,
											"name": "tag",
											"source": 10,
											"value": "337"
										},
										{
											"begin": 978,
											"end": 1041,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 1095,
											"end": 1097,
											"name": "PUSH",
											"source": 10,
											"value": "1F"
										},
										{
											"begin": 1074,
											"end": 1089,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1F"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 1070,
											"end": 1099,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 1061,
											"end": 1100,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 1061,
											"end": 1100,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 1061,
											"end": 1100,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 1061,
											"end": 1100,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 1102,
											"end": 1106,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 1057,
											"end": 1107,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 1057,
											"end": 1107,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 855,
											"end": 1113,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 855,
											"end": 1113,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 1118,
											"end": 1338,
											"name": "tag",
											"source": 10,
											"value": "28"
										},
										{
											"begin": 1118,
											"end": 1338,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 1267,
											"end": 1269,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 1256,
											"end": 1265,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 1249,
											"end": 1270,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 1230,
											"end": 1234,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 1287,
											"end": 1332,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "175"
										},
										{
											"begin": 1328,
											"end": 1330,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 1317,
											"end": 1326,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 1313,
											"end": 1331,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 1305,
											"end": 1311,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 1287,
											"end": 1332,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "321"
										},
										{
											"begin": 1287,
											"end": 1332,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 1343,
											"end": 1523,
											"name": "tag",
											"source": 10,
											"value": "31"
										},
										{
											"begin": 1343,
											"end": 1523,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 1402,
											"end": 1408,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 1455,
											"end": 1457,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 1443,
											"end": 1452,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 1434,
											"end": 1441,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 1430,
											"end": 1453,
											"name": "SUB",
											"source": 10
										},
										{
											"begin": 1426,
											"end": 1458,
											"name": "SLT",
											"source": 10
										},
										{
											"begin": 1423,
											"end": 1475,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 1423,
											"end": 1475,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "341"
										},
										{
											"begin": 1423,
											"end": 1475,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 1471,
											"end": 1472,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 1468,
											"end": 1469,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 1461,
											"end": 1473,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 1423,
											"end": 1475,
											"name": "tag",
											"source": 10,
											"value": "341"
										},
										{
											"begin": 1423,
											"end": 1475,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1494,
											"end": 1517,
											"name": "CALLDATALOAD",
											"source": 10
										},
										{
											"begin": 1494,
											"end": 1517,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 1343,
											"end": 1523,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1343,
											"end": 1523,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 1736,
											"end": 1909,
											"name": "tag",
											"source": 10,
											"value": "322"
										},
										{
											"begin": 1736,
											"end": 1909,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 1804,
											"end": 1824,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 1804,
											"end": 1824,
											"name": "CALLDATALOAD",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1853,
											"end": 1884,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 1853,
											"end": 1884,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 1843,
											"end": 1885,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 1843,
											"end": 1885,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 1833,
											"end": 1903,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "344"
										},
										{
											"begin": 1833,
											"end": 1903,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 1899,
											"end": 1900,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 1896,
											"end": 1897,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 1889,
											"end": 1901,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 1833,
											"end": 1903,
											"name": "tag",
											"source": 10,
											"value": "344"
										},
										{
											"begin": 1833,
											"end": 1903,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 1736,
											"end": 1909,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 1736,
											"end": 1909,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 1736,
											"end": 1909,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 1736,
											"end": 1909,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 1914,
											"end": 2168,
											"name": "tag",
											"source": 10,
											"value": "37"
										},
										{
											"begin": 1914,
											"end": 2168,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 1982,
											"end": 1988,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 1990,
											"end": 1996,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 2043,
											"end": 2045,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 2031,
											"end": 2040,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 2022,
											"end": 2029,
											"name": "DUP6",
											"source": 10
										},
										{
											"begin": 2018,
											"end": 2041,
											"name": "SUB",
											"source": 10
										},
										{
											"begin": 2014,
											"end": 2046,
											"name": "SLT",
											"source": 10
										},
										{
											"begin": 2011,
											"end": 2063,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 2011,
											"end": 2063,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "346"
										},
										{
											"begin": 2011,
											"end": 2063,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 2059,
											"end": 2060,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 2056,
											"end": 2057,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 2049,
											"end": 2061,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 2011,
											"end": 2063,
											"name": "tag",
											"source": 10,
											"value": "346"
										},
										{
											"begin": 2011,
											"end": 2063,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 2082,
											"end": 2111,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "347"
										},
										{
											"begin": 2101,
											"end": 2110,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 2082,
											"end": 2111,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "322"
										},
										{
											"begin": 2082,
											"end": 2111,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 2082,
											"end": 2111,
											"name": "tag",
											"source": 10,
											"value": "347"
										},
										{
											"begin": 2082,
											"end": 2111,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 2072,
											"end": 2111,
											"name": "SWAP5",
											"source": 10
										},
										{
											"begin": 2158,
											"end": 2160,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 2143,
											"end": 2161,
											"name": "SWAP4",
											"source": 10
										},
										{
											"begin": 2143,
											"end": 2161,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 2143,
											"end": 2161,
											"name": "SWAP4",
											"source": 10
										},
										{
											"begin": 2143,
											"end": 2161,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 2130,
											"end": 2162,
											"name": "CALLDATALOAD",
											"source": 10
										},
										{
											"begin": 2130,
											"end": 2162,
											"name": "SWAP4",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1914,
											"end": 2168,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 2173,
											"end": 2501,
											"name": "tag",
											"source": 10,
											"value": "41"
										},
										{
											"begin": 2173,
											"end": 2501,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 2250,
											"end": 2256,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 2258,
											"end": 2264,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 2266,
											"end": 2272,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 2319,
											"end": 2321,
											"name": "PUSH",
											"source": 10,
											"value": "60"
										},
										{
											"begin": 2307,
											"end": 2316,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 2298,
											"end": 2305,
											"name": "DUP7",
											"source": 10
										},
										{
											"begin": 2294,
											"end": 2317,
											"name": "SUB",
											"source": 10
										},
										{
											"begin": 2290,
											"end": 2322,
											"name": "SLT",
											"source": 10
										},
										{
											"begin": 2287,
											"end": 2339,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 2287,
											"end": 2339,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "349"
										},
										{
											"begin": 2287,
											"end": 2339,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 2335,
											"end": 2336,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 2332,
											"end": 2333,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 2325,
											"end": 2337,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 2287,
											"end": 2339,
											"name": "tag",
											"source": 10,
											"value": "349"
										},
										{
											"begin": 2287,
											"end": 2339,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 2358,
											"end": 2387,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "350"
										},
										{
											"begin": 2377,
											"end": 2386,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 2358,
											"end": 2387,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "322"
										},
										{
											"begin": 2358,
											"end": 2387,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 2358,
											"end": 2387,
											"name": "tag",
											"source": 10,
											"value": "350"
										},
										{
											"begin": 2358,
											"end": 2387,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 2348,
											"end": 2387,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 2348,
											"end": 2387,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 2406,
											"end": 2444,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "351"
										},
										{
											"begin": 2440,
											"end": 2442,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 2429,
											"end": 2438,
											"name": "DUP6",
											"source": 10
										},
										{
											"begin": 2425,
											"end": 2443,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 2406,
											"end": 2444,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "322"
										},
										{
											"begin": 2406,
											"end": 2444,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 2406,
											"end": 2444,
											"name": "tag",
											"source": 10,
											"value": "351"
										},
										{
											"begin": 2406,
											"end": 2444,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 2396,
											"end": 2444,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 2396,
											"end": 2444,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 2491,
											"end": 2493,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 2480,
											"end": 2489,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 2476,
											"end": 2494,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 2463,
											"end": 2495,
											"name": "CALLDATALOAD",
											"source": 10
										},
										{
											"begin": 2453,
											"end": 2495,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 2453,
											"end": 2495,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 2173,
											"end": 2501,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 2173,
											"end": 2501,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 2173,
											"end": 2501,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 2173,
											"end": 2501,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 2173,
											"end": 2501,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 2173,
											"end": 2501,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 2506,
											"end": 2692,
											"name": "tag",
											"source": 10,
											"value": "58"
										},
										{
											"begin": 2506,
											"end": 2692,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 2565,
											"end": 2571,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 2618,
											"end": 2620,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 2606,
											"end": 2615,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 2597,
											"end": 2604,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 2593,
											"end": 2616,
											"name": "SUB",
											"source": 10
										},
										{
											"begin": 2589,
											"end": 2621,
											"name": "SLT",
											"source": 10
										},
										{
											"begin": 2586,
											"end": 2638,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 2586,
											"end": 2638,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "353"
										},
										{
											"begin": 2586,
											"end": 2638,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 2634,
											"end": 2635,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 2631,
											"end": 2632,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 2624,
											"end": 2636,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 2586,
											"end": 2638,
											"name": "tag",
											"source": 10,
											"value": "353"
										},
										{
											"begin": 2586,
											"end": 2638,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 2657,
											"end": 2686,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "175"
										},
										{
											"begin": 2676,
											"end": 2685,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 2657,
											"end": 2686,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "322"
										},
										{
											"begin": 2657,
											"end": 2686,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 2879,
											"end": 3226,
											"name": "tag",
											"source": 10,
											"value": "67"
										},
										{
											"begin": 2879,
											"end": 3226,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 2944,
											"end": 2950,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 2952,
											"end": 2958,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 3005,
											"end": 3007,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 2993,
											"end": 3002,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 2984,
											"end": 2991,
											"name": "DUP6",
											"source": 10
										},
										{
											"begin": 2980,
											"end": 3003,
											"name": "SUB",
											"source": 10
										},
										{
											"begin": 2976,
											"end": 3008,
											"name": "SLT",
											"source": 10
										},
										{
											"begin": 2973,
											"end": 3025,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 2973,
											"end": 3025,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "357"
										},
										{
											"begin": 2973,
											"end": 3025,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 3021,
											"end": 3022,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 3018,
											"end": 3019,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 3011,
											"end": 3023,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 2973,
											"end": 3025,
											"name": "tag",
											"source": 10,
											"value": "357"
										},
										{
											"begin": 2973,
											"end": 3025,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 3044,
											"end": 3073,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "358"
										},
										{
											"begin": 3063,
											"end": 3072,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 3044,
											"end": 3073,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "322"
										},
										{
											"begin": 3044,
											"end": 3073,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 3044,
											"end": 3073,
											"name": "tag",
											"source": 10,
											"value": "358"
										},
										{
											"begin": 3044,
											"end": 3073,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 3034,
											"end": 3073,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 3034,
											"end": 3073,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 3123,
											"end": 3125,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 3112,
											"end": 3121,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 3108,
											"end": 3126,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 3095,
											"end": 3127,
											"name": "CALLDATALOAD",
											"source": 10
										},
										{
											"begin": 3170,
											"end": 3175,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 3163,
											"end": 3176,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 3156,
											"end": 3177,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 3149,
											"end": 3154,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 3146,
											"end": 3178,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 3136,
											"end": 3196,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "359"
										},
										{
											"begin": 3136,
											"end": 3196,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 3192,
											"end": 3193,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 3189,
											"end": 3190,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 3182,
											"end": 3194,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 3136,
											"end": 3196,
											"name": "tag",
											"source": 10,
											"value": "359"
										},
										{
											"begin": 3136,
											"end": 3196,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 3215,
											"end": 3220,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 3205,
											"end": 3220,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 3205,
											"end": 3220,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 3205,
											"end": 3220,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 2879,
											"end": 3226,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 2879,
											"end": 3226,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 2879,
											"end": 3226,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 2879,
											"end": 3226,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 2879,
											"end": 3226,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 2879,
											"end": 3226,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 3231,
											"end": 3358,
											"name": "tag",
											"source": 10,
											"value": "239"
										},
										{
											"begin": 3231,
											"end": 3358,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 3292,
											"end": 3302,
											"name": "PUSH",
											"source": 10,
											"value": "4E487B71"
										},
										{
											"begin": 3287,
											"end": 3290,
											"name": "PUSH",
											"source": 10,
											"value": "E0"
										},
										{
											"begin": 3283,
											"end": 3303,
											"name": "SHL",
											"source": 10
										},
										{
											"begin": 3280,
											"end": 3281,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 3273,
											"end": 3304,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 3323,
											"end": 3327,
											"name": "PUSH",
											"source": 10,
											"value": "41"
										},
										{
											"begin": 3320,
											"end": 3321,
											"name": "PUSH",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 3313,
											"end": 3328,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 3347,
											"end": 3351,
											"name": "PUSH",
											"source": 10,
											"value": "24"
										},
										{
											"begin": 3344,
											"end": 3345,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 3337,
											"end": 3352,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 3363,
											"end": 4501,
											"name": "tag",
											"source": 10,
											"value": "71"
										},
										{
											"begin": 3363,
											"end": 4501,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 3458,
											"end": 3464,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 3466,
											"end": 3472,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 3474,
											"end": 3480,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 3482,
											"end": 3488,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 3535,
											"end": 3538,
											"name": "PUSH",
											"source": 10,
											"value": "80"
										},
										{
											"begin": 3523,
											"end": 3532,
											"name": "DUP6",
											"source": 10
										},
										{
											"begin": 3514,
											"end": 3521,
											"name": "DUP8",
											"source": 10
										},
										{
											"begin": 3510,
											"end": 3533,
											"name": "SUB",
											"source": 10
										},
										{
											"begin": 3506,
											"end": 3539,
											"name": "SLT",
											"source": 10
										},
										{
											"begin": 3503,
											"end": 3556,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 3503,
											"end": 3556,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "362"
										},
										{
											"begin": 3503,
											"end": 3556,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 3552,
											"end": 3553,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 3549,
											"end": 3550,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 3542,
											"end": 3554,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 3503,
											"end": 3556,
											"name": "tag",
											"source": 10,
											"value": "362"
										},
										{
											"begin": 3503,
											"end": 3556,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 3575,
											"end": 3604,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "363"
										},
										{
											"begin": 3594,
											"end": 3603,
											"name": "DUP6",
											"source": 10
										},
										{
											"begin": 3575,
											"end": 3604,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "322"
										},
										{
											"begin": 3575,
											"end": 3604,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 3575,
											"end": 3604,
											"name": "tag",
											"source": 10,
											"value": "363"
										},
										{
											"begin": 3575,
											"end": 3604,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 3565,
											"end": 3604,
											"name": "SWAP4",
											"source": 10
										},
										{
											"begin": 3565,
											"end": 3604,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 3623,
											"end": 3661,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "364"
										},
										{
											"begin": 3657,
											"end": 3659,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 3646,
											"end": 3655,
											"name": "DUP7",
											"source": 10
										},
										{
											"begin": 3642,
											"end": 3660,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 3623,
											"end": 3661,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "322"
										},
										{
											"begin": 3623,
											"end": 3661,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 3623,
											"end": 3661,
											"name": "tag",
											"source": 10,
											"value": "364"
										},
										{
											"begin": 3623,
											"end": 3661,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 3613,
											"end": 3661,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 3708,
											"end": 3710,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 3693,
											"end": 3711,
											"name": "DUP6",
											"source": 10
										},
										{
											"begin": 3693,
											"end": 3711,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 3680,
											"end": 3712,
											"name": "CALLDATALOAD",
											"source": 10
										},
										{
											"begin": 3680,
											"end": 3712,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 3763,
											"end": 3765,
											"name": "PUSH",
											"source": 10,
											"value": "60"
										},
										{
											"begin": 3748,
											"end": 3766,
											"name": "DUP6",
											"source": 10
										},
										{
											"begin": 3748,
											"end": 3766,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 3735,
											"end": 3767,
											"name": "CALLDATALOAD",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "40"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 3816,
											"end": 3830,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 3816,
											"end": 3830,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 3816,
											"end": 3830,
											"name": "GT",
											"source": 10
										},
										{
											"begin": 3813,
											"end": 3847,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 3813,
											"end": 3847,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "365"
										},
										{
											"begin": 3813,
											"end": 3847,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 3843,
											"end": 3844,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 3840,
											"end": 3841,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 3833,
											"end": 3845,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 3813,
											"end": 3847,
											"name": "tag",
											"source": 10,
											"value": "365"
										},
										{
											"begin": 3813,
											"end": 3847,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 3881,
											"end": 3887,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 3870,
											"end": 3879,
											"name": "DUP8",
											"source": 10
										},
										{
											"begin": 3866,
											"end": 3888,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 3856,
											"end": 3888,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 3856,
											"end": 3888,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 3926,
											"end": 3933,
											"name": "DUP8",
											"source": 10
										},
										{
											"begin": 3919,
											"end": 3923,
											"name": "PUSH",
											"source": 10,
											"value": "1F"
										},
										{
											"begin": 3915,
											"end": 3917,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 3911,
											"end": 3924,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 3907,
											"end": 3934,
											"name": "SLT",
											"source": 10
										},
										{
											"begin": 3897,
											"end": 3952,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "366"
										},
										{
											"begin": 3897,
											"end": 3952,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 3948,
											"end": 3949,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 3945,
											"end": 3946,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 3938,
											"end": 3950,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 3897,
											"end": 3952,
											"name": "tag",
											"source": 10,
											"value": "366"
										},
										{
											"begin": 3897,
											"end": 3952,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 3984,
											"end": 3986,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 3971,
											"end": 3987,
											"name": "CALLDATALOAD",
											"source": 10
										},
										{
											"begin": 4006,
											"end": 4008,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 4002,
											"end": 4004,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 3999,
											"end": 4009,
											"name": "GT",
											"source": 10
										},
										{
											"begin": 3996,
											"end": 4032,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 3996,
											"end": 4032,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "368"
										},
										{
											"begin": 3996,
											"end": 4032,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 4012,
											"end": 4030,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "368"
										},
										{
											"begin": 4012,
											"end": 4030,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "239"
										},
										{
											"begin": 4012,
											"end": 4030,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 4012,
											"end": 4030,
											"name": "tag",
											"source": 10,
											"value": "368"
										},
										{
											"begin": 4012,
											"end": 4030,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 4087,
											"end": 4089,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 4081,
											"end": 4090,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 4055,
											"end": 4057,
											"name": "PUSH",
											"source": 10,
											"value": "1F"
										},
										{
											"begin": 4141,
											"end": 4154,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 4141,
											"end": 4154,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1F"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 4137,
											"end": 4159,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 4137,
											"end": 4159,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 4137,
											"end": 4159,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 4161,
											"end": 4163,
											"name": "PUSH",
											"source": 10,
											"value": "3F"
										},
										{
											"begin": 4133,
											"end": 4164,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 4129,
											"end": 4169,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 4117,
											"end": 4170,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 4117,
											"end": 4170,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 4117,
											"end": 4170,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 4185,
											"end": 4203,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 4185,
											"end": 4203,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 4185,
											"end": 4203,
											"name": "GT",
											"source": 10
										},
										{
											"begin": 4205,
											"end": 4227,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 4205,
											"end": 4227,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 4205,
											"end": 4227,
											"name": "LT",
											"source": 10
										},
										{
											"begin": 4182,
											"end": 4228,
											"name": "OR",
											"source": 10
										},
										{
											"begin": 4179,
											"end": 4251,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 4179,
											"end": 4251,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "370"
										},
										{
											"begin": 4179,
											"end": 4251,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 4231,
											"end": 4249,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "370"
										},
										{
											"begin": 4231,
											"end": 4249,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "239"
										},
										{
											"begin": 4231,
											"end": 4249,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 4231,
											"end": 4249,
											"name": "tag",
											"source": 10,
											"value": "370"
										},
										{
											"begin": 4231,
											"end": 4249,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 4271,
											"end": 4281,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 4267,
											"end": 4269,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 4260,
											"end": 4282,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 4306,
											"end": 4308,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 4298,
											"end": 4304,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 4291,
											"end": 4309,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 4346,
											"end": 4353,
											"name": "DUP11",
											"source": 10
										},
										{
											"begin": 4341,
											"end": 4343,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 4336,
											"end": 4338,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 4332,
											"end": 4334,
											"name": "DUP8",
											"source": 10
										},
										{
											"begin": 4328,
											"end": 4339,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 4324,
											"end": 4344,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 4321,
											"end": 4354,
											"name": "GT",
											"source": 10
										},
										{
											"begin": 4318,
											"end": 4371,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 4318,
											"end": 4371,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "371"
										},
										{
											"begin": 4318,
											"end": 4371,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 4367,
											"end": 4368,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 4364,
											"end": 4365,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 4357,
											"end": 4369,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 4318,
											"end": 4371,
											"name": "tag",
											"source": 10,
											"value": "371"
										},
										{
											"begin": 4318,
											"end": 4371,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 4423,
											"end": 4425,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 4418,
											"end": 4420,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 4414,
											"end": 4416,
											"name": "DUP7",
											"source": 10
										},
										{
											"begin": 4410,
											"end": 4421,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 4405,
											"end": 4407,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 4397,
											"end": 4403,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 4393,
											"end": 4408,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 4380,
											"end": 4426,
											"name": "CALLDATACOPY",
											"source": 10
										},
										{
											"begin": 4468,
											"end": 4469,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 4463,
											"end": 4465,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 4458,
											"end": 4460,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 4450,
											"end": 4456,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 4446,
											"end": 4461,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 4442,
											"end": 4466,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 4435,
											"end": 4470,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 4489,
											"end": 4495,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 4479,
											"end": 4495,
											"name": "SWAP6",
											"source": 10
										},
										{
											"begin": 4479,
											"end": 4495,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 4479,
											"end": 4495,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 4479,
											"end": 4495,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 4479,
											"end": 4495,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 4479,
											"end": 4495,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 4479,
											"end": 4495,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 3363,
											"end": 4501,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 3363,
											"end": 4501,
											"name": "SWAP6",
											"source": 10
										},
										{
											"begin": 3363,
											"end": 4501,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 3363,
											"end": 4501,
											"name": "SWAP5",
											"source": 10
										},
										{
											"begin": 3363,
											"end": 4501,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 3363,
											"end": 4501,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 3363,
											"end": 4501,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 3363,
											"end": 4501,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 4506,
											"end": 4766,
											"name": "tag",
											"source": 10,
											"value": "82"
										},
										{
											"begin": 4506,
											"end": 4766,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 4574,
											"end": 4580,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 4582,
											"end": 4588,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 4635,
											"end": 4637,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 4623,
											"end": 4632,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 4614,
											"end": 4621,
											"name": "DUP6",
											"source": 10
										},
										{
											"begin": 4610,
											"end": 4633,
											"name": "SUB",
											"source": 10
										},
										{
											"begin": 4606,
											"end": 4638,
											"name": "SLT",
											"source": 10
										},
										{
											"begin": 4603,
											"end": 4655,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 4603,
											"end": 4655,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "373"
										},
										{
											"begin": 4603,
											"end": 4655,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 4651,
											"end": 4652,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 4648,
											"end": 4649,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 4641,
											"end": 4653,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 4603,
											"end": 4655,
											"name": "tag",
											"source": 10,
											"value": "373"
										},
										{
											"begin": 4603,
											"end": 4655,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 4674,
											"end": 4703,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "374"
										},
										{
											"begin": 4693,
											"end": 4702,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 4674,
											"end": 4703,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "322"
										},
										{
											"begin": 4674,
											"end": 4703,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 4674,
											"end": 4703,
											"name": "tag",
											"source": 10,
											"value": "374"
										},
										{
											"begin": 4674,
											"end": 4703,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 4664,
											"end": 4703,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 4664,
											"end": 4703,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 4722,
											"end": 4760,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "375"
										},
										{
											"begin": 4756,
											"end": 4758,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 4745,
											"end": 4754,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 4741,
											"end": 4759,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 4722,
											"end": 4760,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "322"
										},
										{
											"begin": 4722,
											"end": 4760,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 4722,
											"end": 4760,
											"name": "tag",
											"source": 10,
											"value": "375"
										},
										{
											"begin": 4722,
											"end": 4760,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 4712,
											"end": 4760,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 4712,
											"end": 4760,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 4506,
											"end": 4766,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 4506,
											"end": 4766,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 4506,
											"end": 4766,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 4506,
											"end": 4766,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 4506,
											"end": 4766,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 4506,
											"end": 4766,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 4771,
											"end": 5151,
											"name": "tag",
											"source": 10,
											"value": "92"
										},
										{
											"begin": 4771,
											"end": 5151,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 4850,
											"end": 4851,
											"name": "PUSH",
											"source": 10,
											"value": "1"
										},
										{
											"begin": 4846,
											"end": 4858,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 4846,
											"end": 4858,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 4846,
											"end": 4858,
											"name": "SHR",
											"source": 10
										},
										{
											"begin": 4846,
											"end": 4858,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 4893,
											"end": 4905,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 4893,
											"end": 4905,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 4893,
											"end": 4905,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 4914,
											"end": 4975,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "377"
										},
										{
											"begin": 4914,
											"end": 4975,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 4968,
											"end": 4972,
											"name": "PUSH",
											"source": 10,
											"value": "7F"
										},
										{
											"begin": 4960,
											"end": 4966,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 4956,
											"end": 4973,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 4946,
											"end": 4973,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 4946,
											"end": 4973,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 4914,
											"end": 4975,
											"name": "tag",
											"source": 10,
											"value": "377"
										},
										{
											"begin": 4914,
											"end": 4975,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 5021,
											"end": 5023,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 5013,
											"end": 5019,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 5010,
											"end": 5024,
											"name": "LT",
											"source": 10
										},
										{
											"begin": 4990,
											"end": 5008,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 4987,
											"end": 5025,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 4984,
											"end": 5145,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 4984,
											"end": 5145,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "378"
										},
										{
											"begin": 4984,
											"end": 5145,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 5067,
											"end": 5077,
											"name": "PUSH",
											"source": 10,
											"value": "4E487B71"
										},
										{
											"begin": 5062,
											"end": 5065,
											"name": "PUSH",
											"source": 10,
											"value": "E0"
										},
										{
											"begin": 5058,
											"end": 5078,
											"name": "SHL",
											"source": 10
										},
										{
											"begin": 5055,
											"end": 5056,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 5048,
											"end": 5079,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 5102,
											"end": 5106,
											"name": "PUSH",
											"source": 10,
											"value": "22"
										},
										{
											"begin": 5099,
											"end": 5100,
											"name": "PUSH",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 5092,
											"end": 5107,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 5130,
											"end": 5134,
											"name": "PUSH",
											"source": 10,
											"value": "24"
										},
										{
											"begin": 5127,
											"end": 5128,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 5120,
											"end": 5135,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 4984,
											"end": 5145,
											"name": "tag",
											"source": 10,
											"value": "378"
										},
										{
											"begin": 4984,
											"end": 5145,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 4984,
											"end": 5145,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 4771,
											"end": 5151,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 4771,
											"end": 5151,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 4771,
											"end": 5151,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 4771,
											"end": 5151,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 5990,
											"end": 6400,
											"name": "tag",
											"source": 10,
											"value": "121"
										},
										{
											"begin": 5990,
											"end": 6400,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 6192,
											"end": 6194,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 6174,
											"end": 6195,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 6174,
											"end": 6195,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 6174,
											"end": 6195,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 6231,
											"end": 6233,
											"name": "PUSH",
											"source": 10,
											"value": "2E"
										},
										{
											"begin": 6211,
											"end": 6229,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 6211,
											"end": 6229,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 6211,
											"end": 6229,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 6204,
											"end": 6234,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 6270,
											"end": 6304,
											"name": "PUSH",
											"source": 10,
											"value": "4C50546F6B656E3A2063616C6C6572206973206E6F7420746F6B656E206F776E"
										},
										{
											"begin": 6265,
											"end": 6267,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 6250,
											"end": 6268,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 6250,
											"end": 6268,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 6243,
											"end": 6305,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "195C881BDC88185C1C1C9BDD9959"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "92"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 6336,
											"end": 6338,
											"name": "PUSH",
											"source": 10,
											"value": "60"
										},
										{
											"begin": 6321,
											"end": 6339,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 6321,
											"end": 6339,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 6314,
											"end": 6358,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 6390,
											"end": 6393,
											"name": "PUSH",
											"source": 10,
											"value": "80"
										},
										{
											"begin": 6375,
											"end": 6394,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 6375,
											"end": 6394,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 5990,
											"end": 6400,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 6405,
											"end": 6754,
											"name": "tag",
											"source": 10,
											"value": "145"
										},
										{
											"begin": 6405,
											"end": 6754,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 6607,
											"end": 6609,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 6589,
											"end": 6610,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 6589,
											"end": 6610,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 6589,
											"end": 6610,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 6646,
											"end": 6648,
											"name": "PUSH",
											"source": 10,
											"value": "19"
										},
										{
											"begin": 6626,
											"end": 6644,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 6626,
											"end": 6644,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 6626,
											"end": 6644,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 6619,
											"end": 6649,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1314151BDAD95B8E881A5B9D985B1A59081D1BDAD95B881251"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "3A"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 6680,
											"end": 6682,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 6665,
											"end": 6683,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 6665,
											"end": 6683,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 6658,
											"end": 6713,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 6745,
											"end": 6747,
											"name": "PUSH",
											"source": 10,
											"value": "60"
										},
										{
											"begin": 6730,
											"end": 6748,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 6730,
											"end": 6748,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 6405,
											"end": 6754,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 7170,
											"end": 7640,
											"name": "tag",
											"source": 10,
											"value": "179"
										},
										{
											"begin": 7170,
											"end": 7640,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 7349,
											"end": 7352,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 7387,
											"end": 7393,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 7381,
											"end": 7394,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 7403,
											"end": 7456,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "385"
										},
										{
											"begin": 7449,
											"end": 7455,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 7444,
											"end": 7447,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 7437,
											"end": 7441,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 7429,
											"end": 7435,
											"name": "DUP9",
											"source": 10
										},
										{
											"begin": 7425,
											"end": 7442,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 7403,
											"end": 7456,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "320"
										},
										{
											"begin": 7403,
											"end": 7456,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 7403,
											"end": 7456,
											"name": "tag",
											"source": 10,
											"value": "385"
										},
										{
											"begin": 7403,
											"end": 7456,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 7519,
											"end": 7532,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 7519,
											"end": 7532,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 7478,
											"end": 7494,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 7478,
											"end": 7494,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 7478,
											"end": 7494,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 7478,
											"end": 7494,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 7541,
											"end": 7598,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "386"
										},
										{
											"begin": 7519,
											"end": 7532,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 7478,
											"end": 7494,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 7575,
											"end": 7579,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 7563,
											"end": 7580,
											"name": "DUP9",
											"source": 10
										},
										{
											"begin": 7563,
											"end": 7580,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 7541,
											"end": 7598,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "320"
										},
										{
											"begin": 7541,
											"end": 7598,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 7541,
											"end": 7598,
											"name": "tag",
											"source": 10,
											"value": "386"
										},
										{
											"begin": 7541,
											"end": 7598,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 7614,
											"end": 7634,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 7614,
											"end": 7634,
											"name": "SWAP5",
											"source": 10
										},
										{
											"begin": 7170,
											"end": 7640,
											"name": "SWAP4",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 7170,
											"end": 7640,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 9219,
											"end": 9634,
											"name": "tag",
											"source": 10,
											"value": "232"
										},
										{
											"begin": 9219,
											"end": 9634,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 9421,
											"end": 9423,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 9403,
											"end": 9424,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 9403,
											"end": 9424,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 9403,
											"end": 9424,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 9460,
											"end": 9462,
											"name": "PUSH",
											"source": 10,
											"value": "33"
										},
										{
											"begin": 9440,
											"end": 9458,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 9440,
											"end": 9458,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 9440,
											"end": 9458,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 9433,
											"end": 9463,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 9499,
											"end": 9533,
											"name": "PUSH",
											"source": 10,
											"value": "4C50546F6B656E3A207472616E7366657220746F206E6F6E2045524337323152"
										},
										{
											"begin": 9494,
											"end": 9496,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 9479,
											"end": 9497,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 9479,
											"end": 9497,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 9472,
											"end": 9534,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "32B1B2B4BB32B91034B6B83632B6B2B73A32B9"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "69"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 9565,
											"end": 9567,
											"name": "PUSH",
											"source": 10,
											"value": "60"
										},
										{
											"begin": 9550,
											"end": 9568,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 9550,
											"end": 9568,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 9543,
											"end": 9592,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 9624,
											"end": 9627,
											"name": "PUSH",
											"source": 10,
											"value": "80"
										},
										{
											"begin": 9609,
											"end": 9628,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 9609,
											"end": 9628,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 9219,
											"end": 9634,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 9771,
											"end": 9898,
											"name": "tag",
											"source": 10,
											"value": "323"
										},
										{
											"begin": 9771,
											"end": 9898,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 9832,
											"end": 9842,
											"name": "PUSH",
											"source": 10,
											"value": "4E487B71"
										},
										{
											"begin": 9827,
											"end": 9830,
											"name": "PUSH",
											"source": 10,
											"value": "E0"
										},
										{
											"begin": 9823,
											"end": 9843,
											"name": "SHL",
											"source": 10
										},
										{
											"begin": 9820,
											"end": 9821,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 9813,
											"end": 9844,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 9863,
											"end": 9867,
											"name": "PUSH",
											"source": 10,
											"value": "11"
										},
										{
											"begin": 9860,
											"end": 9861,
											"name": "PUSH",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 9853,
											"end": 9868,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 9887,
											"end": 9891,
											"name": "PUSH",
											"source": 10,
											"value": "24"
										},
										{
											"begin": 9884,
											"end": 9885,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 9877,
											"end": 9892,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 9903,
											"end": 10028,
											"name": "tag",
											"source": 10,
											"value": "253"
										},
										{
											"begin": 9903,
											"end": 10028,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 9943,
											"end": 9947,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 9971,
											"end": 9972,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 9968,
											"end": 9969,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 9965,
											"end": 9973,
											"name": "LT",
											"source": 10
										},
										{
											"begin": 9962,
											"end": 9996,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 9962,
											"end": 9996,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "396"
										},
										{
											"begin": 9962,
											"end": 9996,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 9976,
											"end": 9994,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "396"
										},
										{
											"begin": 9976,
											"end": 9994,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "323"
										},
										{
											"begin": 9976,
											"end": 9994,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 9976,
											"end": 9994,
											"name": "tag",
											"source": 10,
											"value": "396"
										},
										{
											"begin": 9976,
											"end": 9994,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 10013,
											"end": 10022,
											"name": "SUB",
											"source": 10
										},
										{
											"begin": 10013,
											"end": 10022,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 9903,
											"end": 10028,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 10033,
											"end": 10161,
											"name": "tag",
											"source": 10,
											"value": "256"
										},
										{
											"begin": 10033,
											"end": 10161,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 10073,
											"end": 10076,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 10104,
											"end": 10105,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 10100,
											"end": 10106,
											"name": "NOT",
											"source": 10
										},
										{
											"begin": 10097,
											"end": 10098,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 10094,
											"end": 10107,
											"name": "GT",
											"source": 10
										},
										{
											"begin": 10091,
											"end": 10130,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 10091,
											"end": 10130,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "399"
										},
										{
											"begin": 10091,
											"end": 10130,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 10110,
											"end": 10128,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "399"
										},
										{
											"begin": 10110,
											"end": 10128,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "323"
										},
										{
											"begin": 10110,
											"end": 10128,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 10110,
											"end": 10128,
											"name": "tag",
											"source": 10,
											"value": "399"
										},
										{
											"begin": 10110,
											"end": 10128,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 10146,
											"end": 10155,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 10146,
											"end": 10155,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 10033,
											"end": 10161,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 10166,
											"end": 10655,
											"name": "tag",
											"source": 10,
											"value": "270"
										},
										{
											"begin": 10166,
											"end": 10655,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 10435,
											"end": 10450,
											"name": "DUP6",
											"source": 10
										},
										{
											"begin": 10435,
											"end": 10450,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 10435,
											"end": 10450,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 10417,
											"end": 10451,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 10417,
											"end": 10451,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 10487,
											"end": 10502,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 10487,
											"end": 10502,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 10482,
											"end": 10484,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 10467,
											"end": 10485,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 10467,
											"end": 10485,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 10460,
											"end": 10503,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 10534,
											"end": 10536,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 10519,
											"end": 10537,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 10519,
											"end": 10537,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 10512,
											"end": 10546,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 10512,
											"end": 10546,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 10512,
											"end": 10546,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 10582,
											"end": 10585,
											"name": "PUSH",
											"source": 10,
											"value": "80"
										},
										{
											"begin": 10577,
											"end": 10579,
											"name": "PUSH",
											"source": 10,
											"value": "60"
										},
										{
											"begin": 10562,
											"end": 10580,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 10562,
											"end": 10580,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 10555,
											"end": 10586,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 10555,
											"end": 10586,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 10555,
											"end": 10586,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 10360,
											"end": 10364,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 10360,
											"end": 10364,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 10603,
											"end": 10649,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "401"
										},
										{
											"begin": 10603,
											"end": 10649,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 10629,
											"end": 10648,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 10629,
											"end": 10648,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 10621,
											"end": 10627,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 10603,
											"end": 10649,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "321"
										},
										{
											"begin": 10603,
											"end": 10649,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 10603,
											"end": 10649,
											"name": "tag",
											"source": 10,
											"value": "401"
										},
										{
											"begin": 10603,
											"end": 10649,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 10595,
											"end": 10649,
											"name": "SWAP7",
											"source": 10
										},
										{
											"begin": 10166,
											"end": 10655,
											"name": "SWAP6",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 10166,
											"end": 10655,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 10660,
											"end": 10909,
											"name": "tag",
											"source": 10,
											"value": "273"
										},
										{
											"begin": 10660,
											"end": 10909,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 10729,
											"end": 10735,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 10782,
											"end": 10784,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 10770,
											"end": 10779,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 10761,
											"end": 10768,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 10757,
											"end": 10780,
											"name": "SUB",
											"source": 10
										},
										{
											"begin": 10753,
											"end": 10785,
											"name": "SLT",
											"source": 10
										},
										{
											"begin": 10750,
											"end": 10802,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 10750,
											"end": 10802,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "403"
										},
										{
											"begin": 10750,
											"end": 10802,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 10798,
											"end": 10799,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 10795,
											"end": 10796,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 10788,
											"end": 10800,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 10750,
											"end": 10802,
											"name": "tag",
											"source": 10,
											"value": "403"
										},
										{
											"begin": 10750,
											"end": 10802,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 10830,
											"end": 10839,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 10824,
											"end": 10840,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 10849,
											"end": 10879,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "175"
										},
										{
											"begin": 10873,
											"end": 10878,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 10849,
											"end": 10879,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "319"
										},
										{
											"begin": 10849,
											"end": 10879,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 11316,
											"end": 11669,
											"name": "tag",
											"source": 10,
											"value": "312"
										},
										{
											"begin": 11316,
											"end": 11669,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 11518,
											"end": 11520,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 11500,
											"end": 11521,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 11500,
											"end": 11521,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 11500,
											"end": 11521,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 11557,
											"end": 11559,
											"name": "PUSH",
											"source": 10,
											"value": "1D"
										},
										{
											"begin": 11537,
											"end": 11555,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 11537,
											"end": 11555,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 11537,
											"end": 11555,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 11530,
											"end": 11560,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 11596,
											"end": 11627,
											"name": "PUSH",
											"source": 10,
											"value": "4C50546F6B656E3A20746F6B656E20616C7265616479206D696E746564000000"
										},
										{
											"begin": 11591,
											"end": 11593,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 11576,
											"end": 11594,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 11576,
											"end": 11594,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 11569,
											"end": 11628,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 11660,
											"end": 11662,
											"name": "PUSH",
											"source": 10,
											"value": "60"
										},
										{
											"begin": 11645,
											"end": 11663,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 11645,
											"end": 11663,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 11316,
											"end": 11669,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										}
									],
									".data": {
										"ADA389E1FC24A8587C776340EFB91B36E675792AB631816100D55DF0B5CF3CBC": "ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef"
									}
								}
							}
						},
						"methodIdentifiers": {
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"burn(uint256)": "42966c68",
							"getApproved(uint256)": "081812fc",
							"initialize(address)": "c4d66de8",
							"isApprovedForAll(address,address)": "e985e9c5",
							"mint(address,uint256)": "40c10f19",
							"name()": "06fdde03",
							"ownerOf(uint256)": "6352211e",
							"safeTransferFrom(address,address,uint256)": "42842e0e",
							"safeTransferFrom(address,address,uint256,bytes)": "b88d4fde",
							"setApprovalForAll(address,bool)": "a22cb465",
							"supportsInterface(bytes4)": "01ffc9a7",
							"symbol()": "95d89b41",
							"tokenURI(uint256)": "c87b56dd",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"factory_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"midaswap\",\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"constructor\":{\"details\":\"Initializes the contract by setting a `name` and a `symbol` to the token collection.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"}},\"title\":\"Midas ERC721 LP Token\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"LP token wrapped the Midaswap position information which provides interfaces to liquidity providers from Midaswap Pair.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"Midas/Midas_main/src/LPToken.sol\":\"LPToken\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":10},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"keccak256\":\"0xab28a56179c1db258c9bf5235b382698cb650debecb51b23d12be9e241374b68\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://daae589a9d6fa7e55f99f86c0a16796ca490f243fb3693632c3711c0646c1d56\",\"dweb:/ipfs/QmR3zpd7wNw3rcUdekwiv6FYHJqksuTCXLVioTxu6Fbxk3\"]},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6e75cf83beb757b8855791088546b8337e9d4684e169400c20d44a515353b708\",\"dweb:/ipfs/QmYvPafLfoquiDMEj7CKHtvbgHu7TJNPSVPSCjrtjV8HjV\"]},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://a0a107160525724f9e1bbbab031defc2f298296dd9e331f16a6f7130cec32146\",\"dweb:/ipfs/QmemujxSd7gX8A9M8UwmNbz4Ms3U9FG9QfudUgxwvTmPWf\"]},\"@openzeppelin/contracts/utils/Address.sol\":{\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ec772b45a624be516f1c81970caa8a2e144301e9d0921cbc1a2789fef39a1269\",\"dweb:/ipfs/QmNyjwxCrGhQMyzLD93oUobJXVe9ceJvRvfXwbEtuxPiEj\"]},\"@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6df0ddf21ce9f58271bdfaa85cde98b200ef242a05a3f85c2bc10a8294800a92\",\"dweb:/ipfs/QmRK2Y5Yc6BK7tGKkgsgn3aJEQGi5aakeSPZvS65PV8Xp3\"]},\"@openzeppelin/contracts/utils/Strings.sol\":{\"keccak256\":\"0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8c969013129ba9e651a20735ef659fef6d8a1139ea3607bd4b26ddea2d645634\",\"dweb:/ipfs/QmVhVa6LGuzAcB8qgDtVHRkucn4ihj5UZr8xBLcJkP6ucb\"]},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://fb0048dee081f6fffa5f74afc3fb328483c2a30504e94a0ddd2a5114d731ec4d\",\"dweb:/ipfs/QmZptt1nmYoA5SgjwnSgWqgUSDgm4q52Yos3xhnMv3MV43\"]},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://be161e54f24e5c6fae81a12db1a8ae87bc5ae1b0ddc805d82a1440a68455088f\",\"dweb:/ipfs/QmP7C3CHdY9urF4dEMb9wmsp1wMxHF6nhA2yQE5SKiPAdy\"]},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://33bbf48cc069be677705037ba7520c22b1b622c23b33e1a71495f2d36549d40b\",\"dweb:/ipfs/Qmct36zWXv3j7LZB83uwbg7TXwnZSN1fqHNDZ93GG98bGz\"]},\"Midas/Midas_main/src/LPToken.sol\":{\"keccak256\":\"0x78515dfad2711cca4b11955611648d80147af7a94941e7b58503a265bf156997\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5f2633b5a37c0a3cbec8ea3596d44c1041fda57eeea6ec5ae72bd380027b30d2\",\"dweb:/ipfs/QmX3agcpfq2srYiB5s8o94njpNKrDfNjZeqckNA3Dsde4t\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 1614,
								"contract": "Midas/Midas_main/src/LPToken.sol:LPToken",
								"label": "_name",
								"offset": 0,
								"slot": "0",
								"type": "t_string_storage"
							},
							{
								"astId": 1616,
								"contract": "Midas/Midas_main/src/LPToken.sol:LPToken",
								"label": "_symbol",
								"offset": 0,
								"slot": "1",
								"type": "t_string_storage"
							},
							{
								"astId": 1618,
								"contract": "Midas/Midas_main/src/LPToken.sol:LPToken",
								"label": "_pair",
								"offset": 0,
								"slot": "2",
								"type": "t_address"
							},
							{
								"astId": 1620,
								"contract": "Midas/Midas_main/src/LPToken.sol:LPToken",
								"label": "_factory",
								"offset": 0,
								"slot": "3",
								"type": "t_address"
							},
							{
								"astId": 1624,
								"contract": "Midas/Midas_main/src/LPToken.sol:LPToken",
								"label": "_owners",
								"offset": 0,
								"slot": "4",
								"type": "t_mapping(t_uint256,t_address)"
							},
							{
								"astId": 1628,
								"contract": "Midas/Midas_main/src/LPToken.sol:LPToken",
								"label": "_balances",
								"offset": 0,
								"slot": "5",
								"type": "t_mapping(t_address,t_uint256)"
							},
							{
								"astId": 1632,
								"contract": "Midas/Midas_main/src/LPToken.sol:LPToken",
								"label": "_tokenApprovals",
								"offset": 0,
								"slot": "6",
								"type": "t_mapping(t_uint256,t_address)"
							},
							{
								"astId": 1638,
								"contract": "Midas/Midas_main/src/LPToken.sol:LPToken",
								"label": "_operatorApprovals",
								"offset": 0,
								"slot": "7",
								"type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							},
							"t_bool": {
								"encoding": "inplace",
								"label": "bool",
								"numberOfBytes": "1"
							},
							"t_mapping(t_address,t_bool)": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => bool)",
								"numberOfBytes": "32",
								"value": "t_bool"
							},
							"t_mapping(t_address,t_mapping(t_address,t_bool))": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => mapping(address => bool))",
								"numberOfBytes": "32",
								"value": "t_mapping(t_address,t_bool)"
							},
							"t_mapping(t_address,t_uint256)": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => uint256)",
								"numberOfBytes": "32",
								"value": "t_uint256"
							},
							"t_mapping(t_uint256,t_address)": {
								"encoding": "mapping",
								"key": "t_uint256",
								"label": "mapping(uint256 => address)",
								"numberOfBytes": "32",
								"value": "t_address"
							},
							"t_string_storage": {
								"encoding": "bytes",
								"label": "string",
								"numberOfBytes": "32"
							},
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"notice": "LP token wrapped the Midaswap position information which provides interfaces to liquidity providers from Midaswap Pair.",
						"version": 1
					}
				}
			}
		},
		"sources": {
			"@openzeppelin/contracts/token/ERC721/IERC721.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/token/ERC721/IERC721.sol",
					"exportedSymbols": {
						"IERC165": [
							723
						],
						"IERC721": [
							115
						]
					},
					"id": 116,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "108:23:0"
						},
						{
							"absolutePath": "@openzeppelin/contracts/utils/introspection/IERC165.sol",
							"file": "../../utils/introspection/IERC165.sol",
							"id": 2,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 116,
							"sourceUnit": 724,
							"src": "133:47:0",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 4,
										"name": "IERC165",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 723,
										"src": "271:7:0"
									},
									"id": 5,
									"nodeType": "InheritanceSpecifier",
									"src": "271:7:0"
								}
							],
							"canonicalName": "IERC721",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 3,
								"nodeType": "StructuredDocumentation",
								"src": "182:67:0",
								"text": " @dev Required interface of an ERC721 compliant contract."
							},
							"fullyImplemented": false,
							"id": 115,
							"linearizedBaseContracts": [
								115,
								723
							],
							"name": "IERC721",
							"nameLocation": "260:7:0",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"anonymous": false,
									"documentation": {
										"id": 6,
										"nodeType": "StructuredDocumentation",
										"src": "285:88:0",
										"text": " @dev Emitted when `tokenId` token is transferred from `from` to `to`."
									},
									"id": 14,
									"name": "Transfer",
									"nameLocation": "384:8:0",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 13,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 8,
												"indexed": true,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "409:4:0",
												"nodeType": "VariableDeclaration",
												"scope": 14,
												"src": "393:20:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 7,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "393:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 10,
												"indexed": true,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "431:2:0",
												"nodeType": "VariableDeclaration",
												"scope": 14,
												"src": "415:18:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 9,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "415:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 12,
												"indexed": true,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "451:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 14,
												"src": "435:23:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 11,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "435:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "392:67:0"
									},
									"src": "378:82:0"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 15,
										"nodeType": "StructuredDocumentation",
										"src": "466:94:0",
										"text": " @dev Emitted when `owner` enables `approved` to manage the `tokenId` token."
									},
									"id": 23,
									"name": "Approval",
									"nameLocation": "571:8:0",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 22,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 17,
												"indexed": true,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "596:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 23,
												"src": "580:21:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 16,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "580:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 19,
												"indexed": true,
												"mutability": "mutable",
												"name": "approved",
												"nameLocation": "619:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 23,
												"src": "603:24:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 18,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "603:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 21,
												"indexed": true,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "645:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 23,
												"src": "629:23:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 20,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "629:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "579:74:0"
									},
									"src": "565:89:0"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 24,
										"nodeType": "StructuredDocumentation",
										"src": "660:117:0",
										"text": " @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."
									},
									"id": 32,
									"name": "ApprovalForAll",
									"nameLocation": "788:14:0",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 31,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 26,
												"indexed": true,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "819:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 32,
												"src": "803:21:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 25,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "803:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 28,
												"indexed": true,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "842:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 32,
												"src": "826:24:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 27,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "826:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 30,
												"indexed": false,
												"mutability": "mutable",
												"name": "approved",
												"nameLocation": "857:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 32,
												"src": "852:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 29,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "852:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "802:64:0"
									},
									"src": "782:85:0"
								},
								{
									"documentation": {
										"id": 33,
										"nodeType": "StructuredDocumentation",
										"src": "873:76:0",
										"text": " @dev Returns the number of tokens in ``owner``'s account."
									},
									"functionSelector": "70a08231",
									"id": 40,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "balanceOf",
									"nameLocation": "963:9:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 36,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 35,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "981:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 40,
												"src": "973:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 34,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "973:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "972:15:0"
									},
									"returnParameters": {
										"id": 39,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 38,
												"mutability": "mutable",
												"name": "balance",
												"nameLocation": "1019:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 40,
												"src": "1011:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 37,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1011:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1010:17:0"
									},
									"scope": 115,
									"src": "954:74:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 41,
										"nodeType": "StructuredDocumentation",
										"src": "1034:131:0",
										"text": " @dev Returns the owner of the `tokenId` token.\n Requirements:\n - `tokenId` must exist."
									},
									"functionSelector": "6352211e",
									"id": 48,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "ownerOf",
									"nameLocation": "1179:7:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 44,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 43,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "1195:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 48,
												"src": "1187:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 42,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1187:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1186:17:0"
									},
									"returnParameters": {
										"id": 47,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 46,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "1235:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 48,
												"src": "1227:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 45,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1227:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1226:15:0"
									},
									"scope": 115,
									"src": "1170:72:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 49,
										"nodeType": "StructuredDocumentation",
										"src": "1248:556:0",
										"text": " @dev Safely transfers `tokenId` token from `from` to `to`.\n Requirements:\n - `from` cannot be the zero address.\n - `to` cannot be the zero address.\n - `tokenId` token must exist and be owned by `from`.\n - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n Emits a {Transfer} event."
									},
									"functionSelector": "b88d4fde",
									"id": 60,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "safeTransferFrom",
									"nameLocation": "1818:16:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 58,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 51,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "1852:4:0",
												"nodeType": "VariableDeclaration",
												"scope": 60,
												"src": "1844:12:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 50,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1844:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 53,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "1874:2:0",
												"nodeType": "VariableDeclaration",
												"scope": 60,
												"src": "1866:10:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 52,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1866:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 55,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "1894:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 60,
												"src": "1886:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 54,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1886:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 57,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "1926:4:0",
												"nodeType": "VariableDeclaration",
												"scope": 60,
												"src": "1911:19:0",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 56,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "1911:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1834:102:0"
									},
									"returnParameters": {
										"id": 59,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1945:0:0"
									},
									"scope": 115,
									"src": "1809:137:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 61,
										"nodeType": "StructuredDocumentation",
										"src": "1952:687:0",
										"text": " @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n are aware of the ERC721 protocol to prevent tokens from being forever locked.\n Requirements:\n - `from` cannot be the zero address.\n - `to` cannot be the zero address.\n - `tokenId` token must exist and be owned by `from`.\n - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\n - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n Emits a {Transfer} event."
									},
									"functionSelector": "42842e0e",
									"id": 70,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "safeTransferFrom",
									"nameLocation": "2653:16:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 68,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 63,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "2687:4:0",
												"nodeType": "VariableDeclaration",
												"scope": 70,
												"src": "2679:12:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 62,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2679:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 65,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "2709:2:0",
												"nodeType": "VariableDeclaration",
												"scope": 70,
												"src": "2701:10:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 64,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2701:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 67,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "2729:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 70,
												"src": "2721:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 66,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2721:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2669:73:0"
									},
									"returnParameters": {
										"id": 69,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2751:0:0"
									},
									"scope": 115,
									"src": "2644:108:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 71,
										"nodeType": "StructuredDocumentation",
										"src": "2758:732:0",
										"text": " @dev Transfers `tokenId` token from `from` to `to`.\n WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\n or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\n understand this adds an external call which potentially creates a reentrancy vulnerability.\n Requirements:\n - `from` cannot be the zero address.\n - `to` cannot be the zero address.\n - `tokenId` token must be owned by `from`.\n - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n Emits a {Transfer} event."
									},
									"functionSelector": "23b872dd",
									"id": 80,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transferFrom",
									"nameLocation": "3504:12:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 78,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 73,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "3534:4:0",
												"nodeType": "VariableDeclaration",
												"scope": 80,
												"src": "3526:12:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 72,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3526:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 75,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "3556:2:0",
												"nodeType": "VariableDeclaration",
												"scope": 80,
												"src": "3548:10:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 74,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3548:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 77,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "3576:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 80,
												"src": "3568:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 76,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3568:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3516:73:0"
									},
									"returnParameters": {
										"id": 79,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3598:0:0"
									},
									"scope": 115,
									"src": "3495:104:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 81,
										"nodeType": "StructuredDocumentation",
										"src": "3605:452:0",
										"text": " @dev Gives permission to `to` to transfer `tokenId` token to another account.\n The approval is cleared when the token is transferred.\n Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n Requirements:\n - The caller must own the token or be an approved operator.\n - `tokenId` must exist.\n Emits an {Approval} event."
									},
									"functionSelector": "095ea7b3",
									"id": 88,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "approve",
									"nameLocation": "4071:7:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 86,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 83,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "4087:2:0",
												"nodeType": "VariableDeclaration",
												"scope": 88,
												"src": "4079:10:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 82,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4079:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 85,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "4099:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 88,
												"src": "4091:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 84,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4091:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4078:29:0"
									},
									"returnParameters": {
										"id": 87,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4116:0:0"
									},
									"scope": 115,
									"src": "4062:55:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 89,
										"nodeType": "StructuredDocumentation",
										"src": "4123:309:0",
										"text": " @dev Approve or remove `operator` as an operator for the caller.\n Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n Requirements:\n - The `operator` cannot be the caller.\n Emits an {ApprovalForAll} event."
									},
									"functionSelector": "a22cb465",
									"id": 96,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "setApprovalForAll",
									"nameLocation": "4446:17:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 94,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 91,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "4472:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 96,
												"src": "4464:16:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 90,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4464:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 93,
												"mutability": "mutable",
												"name": "_approved",
												"nameLocation": "4487:9:0",
												"nodeType": "VariableDeclaration",
												"scope": 96,
												"src": "4482:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 92,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "4482:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4463:34:0"
									},
									"returnParameters": {
										"id": 95,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4506:0:0"
									},
									"scope": 115,
									"src": "4437:70:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 97,
										"nodeType": "StructuredDocumentation",
										"src": "4513:139:0",
										"text": " @dev Returns the account approved for `tokenId` token.\n Requirements:\n - `tokenId` must exist."
									},
									"functionSelector": "081812fc",
									"id": 104,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "getApproved",
									"nameLocation": "4666:11:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 100,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 99,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "4686:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 104,
												"src": "4678:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 98,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4678:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4677:17:0"
									},
									"returnParameters": {
										"id": 103,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 102,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "4726:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 104,
												"src": "4718:16:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 101,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4718:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4717:18:0"
									},
									"scope": 115,
									"src": "4657:79:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 105,
										"nodeType": "StructuredDocumentation",
										"src": "4742:138:0",
										"text": " @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n See {setApprovalForAll}"
									},
									"functionSelector": "e985e9c5",
									"id": 114,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "isApprovedForAll",
									"nameLocation": "4894:16:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 110,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 107,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "4919:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 114,
												"src": "4911:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 106,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4911:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 109,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "4934:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 114,
												"src": "4926:16:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 108,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4926:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4910:33:0"
									},
									"returnParameters": {
										"id": 113,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 112,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 114,
												"src": "4967:4:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 111,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "4967:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4966:6:0"
									},
									"scope": 115,
									"src": "4885:88:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 116,
							"src": "250:4725:0",
							"usedErrors": []
						}
					],
					"src": "108:4868:0"
				},
				"id": 0
			},
			"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol",
					"exportedSymbols": {
						"IERC721Receiver": [
							133
						]
					},
					"id": 134,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 117,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "116:23:1"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IERC721Receiver",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 118,
								"nodeType": "StructuredDocumentation",
								"src": "141:152:1",
								"text": " @title ERC721 token receiver interface\n @dev Interface for any contract that wants to support safeTransfers\n from ERC721 asset contracts."
							},
							"fullyImplemented": false,
							"id": 133,
							"linearizedBaseContracts": [
								133
							],
							"name": "IERC721Receiver",
							"nameLocation": "304:15:1",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 119,
										"nodeType": "StructuredDocumentation",
										"src": "326:493:1",
										"text": " @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n by `operator` from `from`, this function is called.\n It must return its Solidity selector to confirm the token transfer.\n If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`."
									},
									"functionSelector": "150b7a02",
									"id": 132,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "onERC721Received",
									"nameLocation": "833:16:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 128,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 121,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "867:8:1",
												"nodeType": "VariableDeclaration",
												"scope": 132,
												"src": "859:16:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 120,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "859:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 123,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "893:4:1",
												"nodeType": "VariableDeclaration",
												"scope": 132,
												"src": "885:12:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 122,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "885:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 125,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "915:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 132,
												"src": "907:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 124,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "907:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 127,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "947:4:1",
												"nodeType": "VariableDeclaration",
												"scope": 132,
												"src": "932:19:1",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 126,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "932:5:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "849:108:1"
									},
									"returnParameters": {
										"id": 131,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 130,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 132,
												"src": "976:6:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes4",
													"typeString": "bytes4"
												},
												"typeName": {
													"id": 129,
													"name": "bytes4",
													"nodeType": "ElementaryTypeName",
													"src": "976:6:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes4",
														"typeString": "bytes4"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "975:8:1"
									},
									"scope": 133,
									"src": "824:160:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 134,
							"src": "294:692:1",
							"usedErrors": []
						}
					],
					"src": "116:871:1"
				},
				"id": 1
			},
			"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol",
					"exportedSymbols": {
						"IERC165": [
							723
						],
						"IERC721": [
							115
						],
						"IERC721Metadata": [
							160
						]
					},
					"id": 161,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 135,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "112:23:2"
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC721/IERC721.sol",
							"file": "../IERC721.sol",
							"id": 136,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 161,
							"sourceUnit": 116,
							"src": "137:24:2",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 138,
										"name": "IERC721",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 115,
										"src": "326:7:2"
									},
									"id": 139,
									"nodeType": "InheritanceSpecifier",
									"src": "326:7:2"
								}
							],
							"canonicalName": "IERC721Metadata",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 137,
								"nodeType": "StructuredDocumentation",
								"src": "163:133:2",
								"text": " @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n @dev See https://eips.ethereum.org/EIPS/eip-721"
							},
							"fullyImplemented": false,
							"id": 160,
							"linearizedBaseContracts": [
								160,
								115,
								723
							],
							"name": "IERC721Metadata",
							"nameLocation": "307:15:2",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 140,
										"nodeType": "StructuredDocumentation",
										"src": "340:58:2",
										"text": " @dev Returns the token collection name."
									},
									"functionSelector": "06fdde03",
									"id": 145,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "name",
									"nameLocation": "412:4:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 141,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "416:2:2"
									},
									"returnParameters": {
										"id": 144,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 143,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 145,
												"src": "442:13:2",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 142,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "442:6:2",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "441:15:2"
									},
									"scope": 160,
									"src": "403:54:2",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 146,
										"nodeType": "StructuredDocumentation",
										"src": "463:60:2",
										"text": " @dev Returns the token collection symbol."
									},
									"functionSelector": "95d89b41",
									"id": 151,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "symbol",
									"nameLocation": "537:6:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 147,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "543:2:2"
									},
									"returnParameters": {
										"id": 150,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 149,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 151,
												"src": "569:13:2",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 148,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "569:6:2",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "568:15:2"
									},
									"scope": 160,
									"src": "528:56:2",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 152,
										"nodeType": "StructuredDocumentation",
										"src": "590:90:2",
										"text": " @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token."
									},
									"functionSelector": "c87b56dd",
									"id": 159,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "tokenURI",
									"nameLocation": "694:8:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 155,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 154,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "711:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 159,
												"src": "703:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 153,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "703:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "702:17:2"
									},
									"returnParameters": {
										"id": 158,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 157,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 159,
												"src": "743:13:2",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 156,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "743:6:2",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "742:15:2"
									},
									"scope": 160,
									"src": "685:73:2",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 161,
							"src": "297:463:2",
							"usedErrors": []
						}
					],
					"src": "112:649:2"
				},
				"id": 2
			},
			"@openzeppelin/contracts/utils/Address.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/utils/Address.sol",
					"exportedSymbols": {
						"Address": [
							490
						]
					},
					"id": 491,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 162,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".1"
							],
							"nodeType": "PragmaDirective",
							"src": "101:23:3"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "Address",
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 163,
								"nodeType": "StructuredDocumentation",
								"src": "126:67:3",
								"text": " @dev Collection of functions related to the address type"
							},
							"fullyImplemented": true,
							"id": 490,
							"linearizedBaseContracts": [
								490
							],
							"name": "Address",
							"nameLocation": "202:7:3",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 177,
										"nodeType": "Block",
										"src": "1241:254:3",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 175,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"expression": {
																"id": 171,
																"name": "account",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 166,
																"src": "1465:7:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"id": 172,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "code",
															"nodeType": "MemberAccess",
															"src": "1465:12:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														"id": 173,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "length",
														"nodeType": "MemberAccess",
														"src": "1465:19:3",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"hexValue": "30",
														"id": 174,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1487:1:3",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "1465:23:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 170,
												"id": 176,
												"nodeType": "Return",
												"src": "1458:30:3"
											}
										]
									},
									"documentation": {
										"id": 164,
										"nodeType": "StructuredDocumentation",
										"src": "216:954:3",
										"text": " @dev Returns true if `account` is a contract.\n [IMPORTANT]\n ====\n It is unsafe to assume that an address for which this function returns\n false is an externally-owned account (EOA) and not a contract.\n Among others, `isContract` will return false for the following\n types of addresses:\n  - an externally-owned account\n  - a contract in construction\n  - an address where a contract will be created\n  - an address where a contract lived, but was destroyed\n ====\n [IMPORTANT]\n ====\n You shouldn't rely on `isContract` to protect against flash loan attacks!\n Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n constructor.\n ===="
									},
									"id": 178,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "isContract",
									"nameLocation": "1184:10:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 167,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 166,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "1203:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 178,
												"src": "1195:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 165,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1195:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1194:17:3"
									},
									"returnParameters": {
										"id": 170,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 169,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 178,
												"src": "1235:4:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 168,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1235:4:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1234:6:3"
									},
									"scope": 490,
									"src": "1175:320:3",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 211,
										"nodeType": "Block",
										"src": "2483:241:3",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 193,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"arguments": [
																		{
																			"id": 189,
																			"name": "this",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967268,
																			"src": "2509:4:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_Address_$490",
																				"typeString": "library Address"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_contract$_Address_$490",
																				"typeString": "library Address"
																			}
																		],
																		"id": 188,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "2501:7:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_address_$",
																			"typeString": "type(address)"
																		},
																		"typeName": {
																			"id": 187,
																			"name": "address",
																			"nodeType": "ElementaryTypeName",
																			"src": "2501:7:3",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 190,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "2501:13:3",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"id": 191,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "balance",
																"nodeType": "MemberAccess",
																"src": "2501:21:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"id": 192,
																"name": "amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 183,
																"src": "2526:6:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "2501:31:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "416464726573733a20696e73756666696369656e742062616c616e6365",
															"id": 194,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2534:31:3",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9",
																"typeString": "literal_string \"Address: insufficient balance\""
															},
															"value": "Address: insufficient balance"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9",
																"typeString": "literal_string \"Address: insufficient balance\""
															}
														],
														"id": 186,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "2493:7:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 195,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2493:73:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 196,
												"nodeType": "ExpressionStatement",
												"src": "2493:73:3"
											},
											{
												"assignments": [
													198,
													null
												],
												"declarations": [
													{
														"constant": false,
														"id": 198,
														"mutability": "mutable",
														"name": "success",
														"nameLocation": "2583:7:3",
														"nodeType": "VariableDeclaration",
														"scope": 211,
														"src": "2578:12:3",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 197,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "2578:4:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													null
												],
												"id": 205,
												"initialValue": {
													"arguments": [
														{
															"hexValue": "",
															"id": 203,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2626:2:3",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																"typeString": "literal_string \"\""
															},
															"value": ""
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																"typeString": "literal_string \"\""
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																	"typeString": "literal_string \"\""
																}
															],
															"expression": {
																"id": 199,
																"name": "recipient",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 181,
																"src": "2596:9:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_address_payable",
																	"typeString": "address payable"
																}
															},
															"id": 200,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "call",
															"nodeType": "MemberAccess",
															"src": "2596:14:3",
															"typeDescriptions": {
																"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
																"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
															}
														},
														"id": 202,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"names": [
															"value"
														],
														"nodeType": "FunctionCallOptions",
														"options": [
															{
																"id": 201,
																"name": "amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 183,
																"src": "2618:6:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"src": "2596:29:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value",
															"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
														}
													},
													"id": 204,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2596:33:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2577:52:3"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 207,
															"name": "success",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 198,
															"src": "2647:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "416464726573733a20756e61626c6520746f2073656e642076616c75652c20726563697069656e74206d61792068617665207265766572746564",
															"id": 208,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2656:60:3",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae",
																"typeString": "literal_string \"Address: unable to send value, recipient may have reverted\""
															},
															"value": "Address: unable to send value, recipient may have reverted"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae",
																"typeString": "literal_string \"Address: unable to send value, recipient may have reverted\""
															}
														],
														"id": 206,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "2639:7:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 209,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2639:78:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 210,
												"nodeType": "ExpressionStatement",
												"src": "2639:78:3"
											}
										]
									},
									"documentation": {
										"id": 179,
										"nodeType": "StructuredDocumentation",
										"src": "1501:906:3",
										"text": " @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n `recipient`, forwarding all available gas and reverting on errors.\n https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n of certain opcodes, possibly making contracts go over the 2300 gas limit\n imposed by `transfer`, making them unable to receive funds via\n `transfer`. {sendValue} removes this limitation.\n https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n IMPORTANT: because control is transferred to `recipient`, care must be\n taken to not create reentrancy vulnerabilities. Consider using\n {ReentrancyGuard} or the\n https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern]."
									},
									"id": 212,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "sendValue",
									"nameLocation": "2421:9:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 184,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 181,
												"mutability": "mutable",
												"name": "recipient",
												"nameLocation": "2447:9:3",
												"nodeType": "VariableDeclaration",
												"scope": 212,
												"src": "2431:25:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address_payable",
													"typeString": "address payable"
												},
												"typeName": {
													"id": 180,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2431:15:3",
													"stateMutability": "payable",
													"typeDescriptions": {
														"typeIdentifier": "t_address_payable",
														"typeString": "address payable"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 183,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "2466:6:3",
												"nodeType": "VariableDeclaration",
												"scope": 212,
												"src": "2458:14:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 182,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2458:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2430:43:3"
									},
									"returnParameters": {
										"id": 185,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2483:0:3"
									},
									"scope": 490,
									"src": "2412:312:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 229,
										"nodeType": "Block",
										"src": "3555:96:3",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 223,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 215,
															"src": "3594:6:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 224,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 217,
															"src": "3602:4:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"hexValue": "30",
															"id": 225,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3608:1:3",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														{
															"hexValue": "416464726573733a206c6f772d6c6576656c2063616c6c206661696c6564",
															"id": 226,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3611:32:3",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_24d7ab5d382116e64324f19950ca9340b8af1ddeb09a8d026e0a3c6a01dcc9df",
																"typeString": "literal_string \"Address: low-level call failed\""
															},
															"value": "Address: low-level call failed"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															{
																"typeIdentifier": "t_stringliteral_24d7ab5d382116e64324f19950ca9340b8af1ddeb09a8d026e0a3c6a01dcc9df",
																"typeString": "literal_string \"Address: low-level call failed\""
															}
														],
														"id": 222,
														"name": "functionCallWithValue",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															270,
															314
														],
														"referencedDeclaration": 314,
														"src": "3572:21:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bytes memory,uint256,string memory) returns (bytes memory)"
														}
													},
													"id": 227,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3572:72:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 221,
												"id": 228,
												"nodeType": "Return",
												"src": "3565:79:3"
											}
										]
									},
									"documentation": {
										"id": 213,
										"nodeType": "StructuredDocumentation",
										"src": "2730:731:3",
										"text": " @dev Performs a Solidity function call using a low level `call`. A\n plain `call` is an unsafe replacement for a function call: use this\n function instead.\n If `target` reverts with a revert reason, it is bubbled up by this\n function (like regular Solidity function calls).\n Returns the raw returned data. To convert to the expected return value,\n use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n Requirements:\n - `target` must be a contract.\n - calling `target` with `data` must not revert.\n _Available since v3.1._"
									},
									"id": 230,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionCall",
									"nameLocation": "3475:12:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 218,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 215,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "3496:6:3",
												"nodeType": "VariableDeclaration",
												"scope": 230,
												"src": "3488:14:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 214,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3488:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 217,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "3517:4:3",
												"nodeType": "VariableDeclaration",
												"scope": 230,
												"src": "3504:17:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 216,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "3504:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3487:35:3"
									},
									"returnParameters": {
										"id": 221,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 220,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 230,
												"src": "3541:12:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 219,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "3541:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3540:14:3"
									},
									"scope": 490,
									"src": "3466:185:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 249,
										"nodeType": "Block",
										"src": "4020:76:3",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 243,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 233,
															"src": "4059:6:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 244,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 235,
															"src": "4067:4:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"hexValue": "30",
															"id": 245,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4073:1:3",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														{
															"id": 246,
															"name": "errorMessage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 237,
															"src": "4076:12:3",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 242,
														"name": "functionCallWithValue",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															270,
															314
														],
														"referencedDeclaration": 314,
														"src": "4037:21:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bytes memory,uint256,string memory) returns (bytes memory)"
														}
													},
													"id": 247,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4037:52:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 241,
												"id": 248,
												"nodeType": "Return",
												"src": "4030:59:3"
											}
										]
									},
									"documentation": {
										"id": 231,
										"nodeType": "StructuredDocumentation",
										"src": "3657:211:3",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n `errorMessage` as a fallback revert reason when `target` reverts.\n _Available since v3.1._"
									},
									"id": 250,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionCall",
									"nameLocation": "3882:12:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 238,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 233,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "3912:6:3",
												"nodeType": "VariableDeclaration",
												"scope": 250,
												"src": "3904:14:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 232,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3904:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 235,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "3941:4:3",
												"nodeType": "VariableDeclaration",
												"scope": 250,
												"src": "3928:17:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 234,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "3928:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 237,
												"mutability": "mutable",
												"name": "errorMessage",
												"nameLocation": "3969:12:3",
												"nodeType": "VariableDeclaration",
												"scope": 250,
												"src": "3955:26:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 236,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "3955:6:3",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3894:93:3"
									},
									"returnParameters": {
										"id": 241,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 240,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 250,
												"src": "4006:12:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 239,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "4006:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4005:14:3"
									},
									"scope": 490,
									"src": "3873:223:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 269,
										"nodeType": "Block",
										"src": "4601:111:3",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 263,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 253,
															"src": "4640:6:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 264,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 255,
															"src": "4648:4:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"id": 265,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 257,
															"src": "4654:5:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"hexValue": "416464726573733a206c6f772d6c6576656c2063616c6c20776974682076616c7565206661696c6564",
															"id": 266,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4661:43:3",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_88a4a0b5e975840320a0475d4027005235904fdb5ece94df156f3d717cb2dbfc",
																"typeString": "literal_string \"Address: low-level call with value failed\""
															},
															"value": "Address: low-level call with value failed"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_stringliteral_88a4a0b5e975840320a0475d4027005235904fdb5ece94df156f3d717cb2dbfc",
																"typeString": "literal_string \"Address: low-level call with value failed\""
															}
														],
														"id": 262,
														"name": "functionCallWithValue",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															270,
															314
														],
														"referencedDeclaration": 314,
														"src": "4618:21:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bytes memory,uint256,string memory) returns (bytes memory)"
														}
													},
													"id": 267,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4618:87:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 261,
												"id": 268,
												"nodeType": "Return",
												"src": "4611:94:3"
											}
										]
									},
									"documentation": {
										"id": 251,
										"nodeType": "StructuredDocumentation",
										"src": "4102:351:3",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but also transferring `value` wei to `target`.\n Requirements:\n - the calling contract must have an ETH balance of at least `value`.\n - the called Solidity function must be `payable`.\n _Available since v3.1._"
									},
									"id": 270,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionCallWithValue",
									"nameLocation": "4467:21:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 258,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 253,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "4506:6:3",
												"nodeType": "VariableDeclaration",
												"scope": 270,
												"src": "4498:14:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 252,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4498:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 255,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "4535:4:3",
												"nodeType": "VariableDeclaration",
												"scope": 270,
												"src": "4522:17:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 254,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "4522:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 257,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "4557:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 270,
												"src": "4549:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 256,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4549:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4488:80:3"
									},
									"returnParameters": {
										"id": 261,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 260,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 270,
												"src": "4587:12:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 259,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "4587:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4586:14:3"
									},
									"scope": 490,
									"src": "4458:254:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 313,
										"nodeType": "Block",
										"src": "5139:267:3",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 291,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"arguments": [
																		{
																			"id": 287,
																			"name": "this",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967268,
																			"src": "5165:4:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_Address_$490",
																				"typeString": "library Address"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_contract$_Address_$490",
																				"typeString": "library Address"
																			}
																		],
																		"id": 286,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "5157:7:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_address_$",
																			"typeString": "type(address)"
																		},
																		"typeName": {
																			"id": 285,
																			"name": "address",
																			"nodeType": "ElementaryTypeName",
																			"src": "5157:7:3",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 288,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "5157:13:3",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"id": 289,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "balance",
																"nodeType": "MemberAccess",
																"src": "5157:21:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"id": 290,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 277,
																"src": "5182:5:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "5157:30:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c",
															"id": 292,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "5189:40:3",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c",
																"typeString": "literal_string \"Address: insufficient balance for call\""
															},
															"value": "Address: insufficient balance for call"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c",
																"typeString": "literal_string \"Address: insufficient balance for call\""
															}
														],
														"id": 284,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "5149:7:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 293,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5149:81:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 294,
												"nodeType": "ExpressionStatement",
												"src": "5149:81:3"
											},
											{
												"assignments": [
													296,
													298
												],
												"declarations": [
													{
														"constant": false,
														"id": 296,
														"mutability": "mutable",
														"name": "success",
														"nameLocation": "5246:7:3",
														"nodeType": "VariableDeclaration",
														"scope": 313,
														"src": "5241:12:3",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 295,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "5241:4:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 298,
														"mutability": "mutable",
														"name": "returndata",
														"nameLocation": "5268:10:3",
														"nodeType": "VariableDeclaration",
														"scope": 313,
														"src": "5255:23:3",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 297,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "5255:5:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 305,
												"initialValue": {
													"arguments": [
														{
															"id": 303,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 275,
															"src": "5308:4:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															],
															"expression": {
																"id": 299,
																"name": "target",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 273,
																"src": "5282:6:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"id": 300,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "call",
															"nodeType": "MemberAccess",
															"src": "5282:11:3",
															"typeDescriptions": {
																"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
																"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
															}
														},
														"id": 302,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"names": [
															"value"
														],
														"nodeType": "FunctionCallOptions",
														"options": [
															{
																"id": 301,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 277,
																"src": "5301:5:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"src": "5282:25:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value",
															"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
														}
													},
													"id": 304,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5282:31:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "5240:73:3"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 307,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 273,
															"src": "5357:6:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 308,
															"name": "success",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 296,
															"src": "5365:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"id": 309,
															"name": "returndata",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 298,
															"src": "5374:10:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"id": 310,
															"name": "errorMessage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 279,
															"src": "5386:12:3",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 306,
														"name": "verifyCallResultFromTarget",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 445,
														"src": "5330:26:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bool,bytes memory,string memory) view returns (bytes memory)"
														}
													},
													"id": 311,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5330:69:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 283,
												"id": 312,
												"nodeType": "Return",
												"src": "5323:76:3"
											}
										]
									},
									"documentation": {
										"id": 271,
										"nodeType": "StructuredDocumentation",
										"src": "4718:237:3",
										"text": " @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n with `errorMessage` as a fallback revert reason when `target` reverts.\n _Available since v3.1._"
									},
									"id": 314,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionCallWithValue",
									"nameLocation": "4969:21:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 280,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 273,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "5008:6:3",
												"nodeType": "VariableDeclaration",
												"scope": 314,
												"src": "5000:14:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 272,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5000:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 275,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "5037:4:3",
												"nodeType": "VariableDeclaration",
												"scope": 314,
												"src": "5024:17:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 274,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5024:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 277,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "5059:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 314,
												"src": "5051:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 276,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5051:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 279,
												"mutability": "mutable",
												"name": "errorMessage",
												"nameLocation": "5088:12:3",
												"nodeType": "VariableDeclaration",
												"scope": 314,
												"src": "5074:26:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 278,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "5074:6:3",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4990:116:3"
									},
									"returnParameters": {
										"id": 283,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 282,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 314,
												"src": "5125:12:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 281,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5125:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5124:14:3"
									},
									"scope": 490,
									"src": "4960:446:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 330,
										"nodeType": "Block",
										"src": "5683:97:3",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 325,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 317,
															"src": "5719:6:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 326,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 319,
															"src": "5727:4:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"hexValue": "416464726573733a206c6f772d6c6576656c207374617469632063616c6c206661696c6564",
															"id": 327,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "5733:39:3",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_90ec82aa826a536a4cbfae44ecfa384680faa9a4b77344bce96aa761ad904df0",
																"typeString": "literal_string \"Address: low-level static call failed\""
															},
															"value": "Address: low-level static call failed"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_stringliteral_90ec82aa826a536a4cbfae44ecfa384680faa9a4b77344bce96aa761ad904df0",
																"typeString": "literal_string \"Address: low-level static call failed\""
															}
														],
														"id": 324,
														"name": "functionStaticCall",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															331,
															360
														],
														"referencedDeclaration": 360,
														"src": "5700:18:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bytes memory,string memory) view returns (bytes memory)"
														}
													},
													"id": 328,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5700:73:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 323,
												"id": 329,
												"nodeType": "Return",
												"src": "5693:80:3"
											}
										]
									},
									"documentation": {
										"id": 315,
										"nodeType": "StructuredDocumentation",
										"src": "5412:166:3",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but performing a static call.\n _Available since v3.3._"
									},
									"id": 331,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionStaticCall",
									"nameLocation": "5592:18:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 320,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 317,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "5619:6:3",
												"nodeType": "VariableDeclaration",
												"scope": 331,
												"src": "5611:14:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 316,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5611:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 319,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "5640:4:3",
												"nodeType": "VariableDeclaration",
												"scope": 331,
												"src": "5627:17:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 318,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5627:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5610:35:3"
									},
									"returnParameters": {
										"id": 323,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 322,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 331,
												"src": "5669:12:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 321,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5669:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5668:14:3"
									},
									"scope": 490,
									"src": "5583:197:3",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 359,
										"nodeType": "Block",
										"src": "6122:168:3",
										"statements": [
											{
												"assignments": [
													344,
													346
												],
												"declarations": [
													{
														"constant": false,
														"id": 344,
														"mutability": "mutable",
														"name": "success",
														"nameLocation": "6138:7:3",
														"nodeType": "VariableDeclaration",
														"scope": 359,
														"src": "6133:12:3",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 343,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "6133:4:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 346,
														"mutability": "mutable",
														"name": "returndata",
														"nameLocation": "6160:10:3",
														"nodeType": "VariableDeclaration",
														"scope": 359,
														"src": "6147:23:3",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 345,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "6147:5:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 351,
												"initialValue": {
													"arguments": [
														{
															"id": 349,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 336,
															"src": "6192:4:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"expression": {
															"id": 347,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 334,
															"src": "6174:6:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"id": 348,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "staticcall",
														"nodeType": "MemberAccess",
														"src": "6174:17:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_barestaticcall_view$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
															"typeString": "function (bytes memory) view returns (bool,bytes memory)"
														}
													},
													"id": 350,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6174:23:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "6132:65:3"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 353,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 334,
															"src": "6241:6:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 354,
															"name": "success",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 344,
															"src": "6249:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"id": 355,
															"name": "returndata",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 346,
															"src": "6258:10:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"id": 356,
															"name": "errorMessage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 338,
															"src": "6270:12:3",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 352,
														"name": "verifyCallResultFromTarget",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 445,
														"src": "6214:26:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bool,bytes memory,string memory) view returns (bytes memory)"
														}
													},
													"id": 357,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6214:69:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 342,
												"id": 358,
												"nodeType": "Return",
												"src": "6207:76:3"
											}
										]
									},
									"documentation": {
										"id": 332,
										"nodeType": "StructuredDocumentation",
										"src": "5786:173:3",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n but performing a static call.\n _Available since v3.3._"
									},
									"id": 360,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionStaticCall",
									"nameLocation": "5973:18:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 339,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 334,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "6009:6:3",
												"nodeType": "VariableDeclaration",
												"scope": 360,
												"src": "6001:14:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 333,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6001:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 336,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "6038:4:3",
												"nodeType": "VariableDeclaration",
												"scope": 360,
												"src": "6025:17:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 335,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "6025:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 338,
												"mutability": "mutable",
												"name": "errorMessage",
												"nameLocation": "6066:12:3",
												"nodeType": "VariableDeclaration",
												"scope": 360,
												"src": "6052:26:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 337,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "6052:6:3",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5991:93:3"
									},
									"returnParameters": {
										"id": 342,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 341,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 360,
												"src": "6108:12:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 340,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "6108:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6107:14:3"
									},
									"scope": 490,
									"src": "5964:326:3",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 376,
										"nodeType": "Block",
										"src": "6566:101:3",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 371,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 363,
															"src": "6604:6:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 372,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 365,
															"src": "6612:4:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"hexValue": "416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564",
															"id": 373,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "6618:41:3",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_9fdcd12e4b726339b32a442b0a448365d5d85c96b2d2cff917b4f66c63110398",
																"typeString": "literal_string \"Address: low-level delegate call failed\""
															},
															"value": "Address: low-level delegate call failed"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_stringliteral_9fdcd12e4b726339b32a442b0a448365d5d85c96b2d2cff917b4f66c63110398",
																"typeString": "literal_string \"Address: low-level delegate call failed\""
															}
														],
														"id": 370,
														"name": "functionDelegateCall",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															377,
															406
														],
														"referencedDeclaration": 406,
														"src": "6583:20:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bytes memory,string memory) returns (bytes memory)"
														}
													},
													"id": 374,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6583:77:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 369,
												"id": 375,
												"nodeType": "Return",
												"src": "6576:84:3"
											}
										]
									},
									"documentation": {
										"id": 361,
										"nodeType": "StructuredDocumentation",
										"src": "6296:168:3",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but performing a delegate call.\n _Available since v3.4._"
									},
									"id": 377,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionDelegateCall",
									"nameLocation": "6478:20:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 366,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 363,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "6507:6:3",
												"nodeType": "VariableDeclaration",
												"scope": 377,
												"src": "6499:14:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 362,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6499:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 365,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "6528:4:3",
												"nodeType": "VariableDeclaration",
												"scope": 377,
												"src": "6515:17:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 364,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "6515:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6498:35:3"
									},
									"returnParameters": {
										"id": 369,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 368,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 377,
												"src": "6552:12:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 367,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "6552:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6551:14:3"
									},
									"scope": 490,
									"src": "6469:198:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 405,
										"nodeType": "Block",
										"src": "7008:170:3",
										"statements": [
											{
												"assignments": [
													390,
													392
												],
												"declarations": [
													{
														"constant": false,
														"id": 390,
														"mutability": "mutable",
														"name": "success",
														"nameLocation": "7024:7:3",
														"nodeType": "VariableDeclaration",
														"scope": 405,
														"src": "7019:12:3",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 389,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "7019:4:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 392,
														"mutability": "mutable",
														"name": "returndata",
														"nameLocation": "7046:10:3",
														"nodeType": "VariableDeclaration",
														"scope": 405,
														"src": "7033:23:3",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 391,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "7033:5:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 397,
												"initialValue": {
													"arguments": [
														{
															"id": 395,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 382,
															"src": "7080:4:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"expression": {
															"id": 393,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 380,
															"src": "7060:6:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"id": 394,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "delegatecall",
														"nodeType": "MemberAccess",
														"src": "7060:19:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_baredelegatecall_nonpayable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
															"typeString": "function (bytes memory) returns (bool,bytes memory)"
														}
													},
													"id": 396,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7060:25:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "7018:67:3"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 399,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 380,
															"src": "7129:6:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 400,
															"name": "success",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 390,
															"src": "7137:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"id": 401,
															"name": "returndata",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 392,
															"src": "7146:10:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"id": 402,
															"name": "errorMessage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 384,
															"src": "7158:12:3",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 398,
														"name": "verifyCallResultFromTarget",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 445,
														"src": "7102:26:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bool,bytes memory,string memory) view returns (bytes memory)"
														}
													},
													"id": 403,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7102:69:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 388,
												"id": 404,
												"nodeType": "Return",
												"src": "7095:76:3"
											}
										]
									},
									"documentation": {
										"id": 378,
										"nodeType": "StructuredDocumentation",
										"src": "6673:175:3",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n but performing a delegate call.\n _Available since v3.4._"
									},
									"id": 406,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionDelegateCall",
									"nameLocation": "6862:20:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 385,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 380,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "6900:6:3",
												"nodeType": "VariableDeclaration",
												"scope": 406,
												"src": "6892:14:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 379,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6892:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 382,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "6929:4:3",
												"nodeType": "VariableDeclaration",
												"scope": 406,
												"src": "6916:17:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 381,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "6916:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 384,
												"mutability": "mutable",
												"name": "errorMessage",
												"nameLocation": "6957:12:3",
												"nodeType": "VariableDeclaration",
												"scope": 406,
												"src": "6943:26:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 383,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "6943:6:3",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6882:93:3"
									},
									"returnParameters": {
										"id": 388,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 387,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 406,
												"src": "6994:12:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 386,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "6994:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6993:14:3"
									},
									"scope": 490,
									"src": "6853:325:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 444,
										"nodeType": "Block",
										"src": "7660:434:3",
										"statements": [
											{
												"condition": {
													"id": 420,
													"name": "success",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 411,
													"src": "7674:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 442,
													"nodeType": "Block",
													"src": "8030:58:3",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"id": 438,
																		"name": "returndata",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 413,
																		"src": "8052:10:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	},
																	{
																		"id": 439,
																		"name": "errorMessage",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 415,
																		"src": "8064:12:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		},
																		{
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	],
																	"id": 437,
																	"name": "_revert",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 489,
																	"src": "8044:7:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_pure$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$__$",
																		"typeString": "function (bytes memory,string memory) pure"
																	}
																},
																"id": 440,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "8044:33:3",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 441,
															"nodeType": "ExpressionStatement",
															"src": "8044:33:3"
														}
													]
												},
												"id": 443,
												"nodeType": "IfStatement",
												"src": "7670:418:3",
												"trueBody": {
													"id": 436,
													"nodeType": "Block",
													"src": "7683:341:3",
													"statements": [
														{
															"condition": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 424,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"expression": {
																		"id": 421,
																		"name": "returndata",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 413,
																		"src": "7701:10:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	},
																	"id": 422,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "length",
																	"nodeType": "MemberAccess",
																	"src": "7701:17:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "==",
																"rightExpression": {
																	"hexValue": "30",
																	"id": 423,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "7722:1:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																},
																"src": "7701:22:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 433,
															"nodeType": "IfStatement",
															"src": "7697:286:3",
															"trueBody": {
																"id": 432,
																"nodeType": "Block",
																"src": "7725:258:3",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"id": 427,
																							"name": "target",
																							"nodeType": "Identifier",
																							"overloadedDeclarations": [],
																							"referencedDeclaration": 409,
																							"src": "7927:6:3",
																							"typeDescriptions": {
																								"typeIdentifier": "t_address",
																								"typeString": "address"
																							}
																						}
																					],
																					"expression": {
																						"argumentTypes": [
																							{
																								"typeIdentifier": "t_address",
																								"typeString": "address"
																							}
																						],
																						"id": 426,
																						"name": "isContract",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 178,
																						"src": "7916:10:3",
																						"typeDescriptions": {
																							"typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_bool_$",
																							"typeString": "function (address) view returns (bool)"
																						}
																					},
																					"id": 428,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"kind": "functionCall",
																					"lValueRequested": false,
																					"names": [],
																					"nodeType": "FunctionCall",
																					"src": "7916:18:3",
																					"tryCall": false,
																					"typeDescriptions": {
																						"typeIdentifier": "t_bool",
																						"typeString": "bool"
																					}
																				},
																				{
																					"hexValue": "416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374",
																					"id": 429,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"kind": "string",
																					"lValueRequested": false,
																					"nodeType": "Literal",
																					"src": "7936:31:3",
																					"typeDescriptions": {
																						"typeIdentifier": "t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad",
																						"typeString": "literal_string \"Address: call to non-contract\""
																					},
																					"value": "Address: call to non-contract"
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_bool",
																						"typeString": "bool"
																					},
																					{
																						"typeIdentifier": "t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad",
																						"typeString": "literal_string \"Address: call to non-contract\""
																					}
																				],
																				"id": 425,
																				"name": "require",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [
																					4294967278,
																					4294967278
																				],
																				"referencedDeclaration": 4294967278,
																				"src": "7908:7:3",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
																					"typeString": "function (bool,string memory) pure"
																				}
																			},
																			"id": 430,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "7908:60:3",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_tuple$__$",
																				"typeString": "tuple()"
																			}
																		},
																		"id": 431,
																		"nodeType": "ExpressionStatement",
																		"src": "7908:60:3"
																	}
																]
															}
														},
														{
															"expression": {
																"id": 434,
																"name": "returndata",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 413,
																"src": "8003:10:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															},
															"functionReturnParameters": 419,
															"id": 435,
															"nodeType": "Return",
															"src": "7996:17:3"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 407,
										"nodeType": "StructuredDocumentation",
										"src": "7184:277:3",
										"text": " @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n _Available since v4.8._"
									},
									"id": 445,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "verifyCallResultFromTarget",
									"nameLocation": "7475:26:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 416,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 409,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "7519:6:3",
												"nodeType": "VariableDeclaration",
												"scope": 445,
												"src": "7511:14:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 408,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "7511:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 411,
												"mutability": "mutable",
												"name": "success",
												"nameLocation": "7540:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 445,
												"src": "7535:12:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 410,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "7535:4:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 413,
												"mutability": "mutable",
												"name": "returndata",
												"nameLocation": "7570:10:3",
												"nodeType": "VariableDeclaration",
												"scope": 445,
												"src": "7557:23:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 412,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "7557:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 415,
												"mutability": "mutable",
												"name": "errorMessage",
												"nameLocation": "7604:12:3",
												"nodeType": "VariableDeclaration",
												"scope": 445,
												"src": "7590:26:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 414,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "7590:6:3",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7501:121:3"
									},
									"returnParameters": {
										"id": 419,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 418,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 445,
												"src": "7646:12:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 417,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "7646:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7645:14:3"
									},
									"scope": 490,
									"src": "7466:628:3",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 468,
										"nodeType": "Block",
										"src": "8475:135:3",
										"statements": [
											{
												"condition": {
													"id": 457,
													"name": "success",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 448,
													"src": "8489:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 466,
													"nodeType": "Block",
													"src": "8546:58:3",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"id": 462,
																		"name": "returndata",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 450,
																		"src": "8568:10:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	},
																	{
																		"id": 463,
																		"name": "errorMessage",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 452,
																		"src": "8580:12:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		},
																		{
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	],
																	"id": 461,
																	"name": "_revert",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 489,
																	"src": "8560:7:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_pure$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$__$",
																		"typeString": "function (bytes memory,string memory) pure"
																	}
																},
																"id": 464,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "8560:33:3",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 465,
															"nodeType": "ExpressionStatement",
															"src": "8560:33:3"
														}
													]
												},
												"id": 467,
												"nodeType": "IfStatement",
												"src": "8485:119:3",
												"trueBody": {
													"id": 460,
													"nodeType": "Block",
													"src": "8498:42:3",
													"statements": [
														{
															"expression": {
																"id": 458,
																"name": "returndata",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 450,
																"src": "8519:10:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															},
															"functionReturnParameters": 456,
															"id": 459,
															"nodeType": "Return",
															"src": "8512:17:3"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 446,
										"nodeType": "StructuredDocumentation",
										"src": "8100:210:3",
										"text": " @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n revert reason or using the provided one.\n _Available since v4.3._"
									},
									"id": 469,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "verifyCallResult",
									"nameLocation": "8324:16:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 453,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 448,
												"mutability": "mutable",
												"name": "success",
												"nameLocation": "8355:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 469,
												"src": "8350:12:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 447,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "8350:4:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 450,
												"mutability": "mutable",
												"name": "returndata",
												"nameLocation": "8385:10:3",
												"nodeType": "VariableDeclaration",
												"scope": 469,
												"src": "8372:23:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 449,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "8372:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 452,
												"mutability": "mutable",
												"name": "errorMessage",
												"nameLocation": "8419:12:3",
												"nodeType": "VariableDeclaration",
												"scope": 469,
												"src": "8405:26:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 451,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "8405:6:3",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8340:97:3"
									},
									"returnParameters": {
										"id": 456,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 455,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 469,
												"src": "8461:12:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 454,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "8461:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8460:14:3"
									},
									"scope": 490,
									"src": "8315:295:3",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 488,
										"nodeType": "Block",
										"src": "8699:457:3",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 479,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"id": 476,
															"name": "returndata",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 471,
															"src": "8775:10:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														"id": 477,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "length",
														"nodeType": "MemberAccess",
														"src": "8775:17:3",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"hexValue": "30",
														"id": 478,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "8795:1:3",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "8775:21:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 486,
													"nodeType": "Block",
													"src": "9105:45:3",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"id": 483,
																		"name": "errorMessage",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 473,
																		"src": "9126:12:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	],
																	"id": 482,
																	"name": "revert",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [
																		4294967277,
																		4294967277
																	],
																	"referencedDeclaration": 4294967277,
																	"src": "9119:6:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_revert_pure$_t_string_memory_ptr_$returns$__$",
																		"typeString": "function (string memory) pure"
																	}
																},
																"id": 484,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "9119:20:3",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 485,
															"nodeType": "ExpressionStatement",
															"src": "9119:20:3"
														}
													]
												},
												"id": 487,
												"nodeType": "IfStatement",
												"src": "8771:379:3",
												"trueBody": {
													"id": 481,
													"nodeType": "Block",
													"src": "8798:301:3",
													"statements": [
														{
															"AST": {
																"nodeType": "YulBlock",
																"src": "8956:133:3",
																"statements": [
																	{
																		"nodeType": "YulVariableDeclaration",
																		"src": "8974:40:3",
																		"value": {
																			"arguments": [
																				{
																					"name": "returndata",
																					"nodeType": "YulIdentifier",
																					"src": "9003:10:3"
																				}
																			],
																			"functionName": {
																				"name": "mload",
																				"nodeType": "YulIdentifier",
																				"src": "8997:5:3"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "8997:17:3"
																		},
																		"variables": [
																			{
																				"name": "returndata_size",
																				"nodeType": "YulTypedName",
																				"src": "8978:15:3",
																				"type": ""
																			}
																		]
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "9042:2:3",
																							"type": "",
																							"value": "32"
																						},
																						{
																							"name": "returndata",
																							"nodeType": "YulIdentifier",
																							"src": "9046:10:3"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nodeType": "YulIdentifier",
																						"src": "9038:3:3"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "9038:19:3"
																				},
																				{
																					"name": "returndata_size",
																					"nodeType": "YulIdentifier",
																					"src": "9059:15:3"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "9031:6:3"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "9031:44:3"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "9031:44:3"
																	}
																]
															},
															"documentation": "@solidity memory-safe-assembly",
															"evmVersion": "london",
															"externalReferences": [
																{
																	"declaration": 471,
																	"isOffset": false,
																	"isSlot": false,
																	"src": "9003:10:3",
																	"valueSize": 1
																},
																{
																	"declaration": 471,
																	"isOffset": false,
																	"isSlot": false,
																	"src": "9046:10:3",
																	"valueSize": 1
																}
															],
															"id": 480,
															"nodeType": "InlineAssembly",
															"src": "8947:142:3"
														}
													]
												}
											}
										]
									},
									"id": 489,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_revert",
									"nameLocation": "8625:7:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 474,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 471,
												"mutability": "mutable",
												"name": "returndata",
												"nameLocation": "8646:10:3",
												"nodeType": "VariableDeclaration",
												"scope": 489,
												"src": "8633:23:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 470,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "8633:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 473,
												"mutability": "mutable",
												"name": "errorMessage",
												"nameLocation": "8672:12:3",
												"nodeType": "VariableDeclaration",
												"scope": 489,
												"src": "8658:26:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 472,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "8658:6:3",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8632:53:3"
									},
									"returnParameters": {
										"id": 475,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "8699:0:3"
									},
									"scope": 490,
									"src": "8616:540:3",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "private"
								}
							],
							"scope": 491,
							"src": "194:8964:3",
							"usedErrors": []
						}
					],
					"src": "101:9058:3"
				},
				"id": 3
			},
			"@openzeppelin/contracts/utils/Context.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/utils/Context.sol",
					"exportedSymbols": {
						"Context": [
							512
						]
					},
					"id": 513,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 492,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "86:23:4"
						},
						{
							"abstract": true,
							"baseContracts": [],
							"canonicalName": "Context",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 493,
								"nodeType": "StructuredDocumentation",
								"src": "111:496:4",
								"text": " @dev Provides information about the current execution context, including the\n sender of the transaction and its data. While these are generally available\n via msg.sender and msg.data, they should not be accessed in such a direct\n manner, since when dealing with meta-transactions the account sending and\n paying for execution may not be the actual sender (as far as an application\n is concerned).\n This contract is only required for intermediate, library-like contracts."
							},
							"fullyImplemented": true,
							"id": 512,
							"linearizedBaseContracts": [
								512
							],
							"name": "Context",
							"nameLocation": "626:7:4",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 501,
										"nodeType": "Block",
										"src": "702:34:4",
										"statements": [
											{
												"expression": {
													"expression": {
														"id": 498,
														"name": "msg",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967281,
														"src": "719:3:4",
														"typeDescriptions": {
															"typeIdentifier": "t_magic_message",
															"typeString": "msg"
														}
													},
													"id": 499,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberName": "sender",
													"nodeType": "MemberAccess",
													"src": "719:10:4",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 497,
												"id": 500,
												"nodeType": "Return",
												"src": "712:17:4"
											}
										]
									},
									"id": 502,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_msgSender",
									"nameLocation": "649:10:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 494,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "659:2:4"
									},
									"returnParameters": {
										"id": 497,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 496,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 502,
												"src": "693:7:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 495,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "693:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "692:9:4"
									},
									"scope": 512,
									"src": "640:96:4",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 510,
										"nodeType": "Block",
										"src": "809:32:4",
										"statements": [
											{
												"expression": {
													"expression": {
														"id": 507,
														"name": "msg",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967281,
														"src": "826:3:4",
														"typeDescriptions": {
															"typeIdentifier": "t_magic_message",
															"typeString": "msg"
														}
													},
													"id": 508,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberName": "data",
													"nodeType": "MemberAccess",
													"src": "826:8:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_calldata_ptr",
														"typeString": "bytes calldata"
													}
												},
												"functionReturnParameters": 506,
												"id": 509,
												"nodeType": "Return",
												"src": "819:15:4"
											}
										]
									},
									"id": 511,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_msgData",
									"nameLocation": "751:8:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 503,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "759:2:4"
									},
									"returnParameters": {
										"id": 506,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 505,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 511,
												"src": "793:14:4",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 504,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "793:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "792:16:4"
									},
									"scope": 512,
									"src": "742:99:4",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								}
							],
							"scope": 513,
							"src": "608:235:4",
							"usedErrors": []
						}
					],
					"src": "86:758:4"
				},
				"id": 4
			},
			"@openzeppelin/contracts/utils/Strings.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/utils/Strings.sol",
					"exportedSymbols": {
						"Math": [
							1588
						],
						"Strings": [
							687
						]
					},
					"id": 688,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 514,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "101:23:5"
						},
						{
							"absolutePath": "@openzeppelin/contracts/utils/math/Math.sol",
							"file": "./math/Math.sol",
							"id": 515,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 688,
							"sourceUnit": 1589,
							"src": "126:25:5",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "Strings",
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 516,
								"nodeType": "StructuredDocumentation",
								"src": "153:34:5",
								"text": " @dev String operations."
							},
							"fullyImplemented": true,
							"id": 687,
							"linearizedBaseContracts": [
								687
							],
							"name": "Strings",
							"nameLocation": "196:7:5",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": true,
									"id": 519,
									"mutability": "constant",
									"name": "_SYMBOLS",
									"nameLocation": "235:8:5",
									"nodeType": "VariableDeclaration",
									"scope": 687,
									"src": "210:54:5",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bytes16",
										"typeString": "bytes16"
									},
									"typeName": {
										"id": 517,
										"name": "bytes16",
										"nodeType": "ElementaryTypeName",
										"src": "210:7:5",
										"typeDescriptions": {
											"typeIdentifier": "t_bytes16",
											"typeString": "bytes16"
										}
									},
									"value": {
										"hexValue": "30313233343536373839616263646566",
										"id": 518,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "string",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "246:18:5",
										"typeDescriptions": {
											"typeIdentifier": "t_stringliteral_cb29997ed99ead0db59ce4d12b7d3723198c827273e5796737c926d78019c39f",
											"typeString": "literal_string \"0123456789abcdef\""
										},
										"value": "0123456789abcdef"
									},
									"visibility": "private"
								},
								{
									"constant": true,
									"id": 522,
									"mutability": "constant",
									"name": "_ADDRESS_LENGTH",
									"nameLocation": "293:15:5",
									"nodeType": "VariableDeclaration",
									"scope": 687,
									"src": "270:43:5",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint8",
										"typeString": "uint8"
									},
									"typeName": {
										"id": 520,
										"name": "uint8",
										"nodeType": "ElementaryTypeName",
										"src": "270:5:5",
										"typeDescriptions": {
											"typeIdentifier": "t_uint8",
											"typeString": "uint8"
										}
									},
									"value": {
										"hexValue": "3230",
										"id": 521,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "311:2:5",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_20_by_1",
											"typeString": "int_const 20"
										},
										"value": "20"
									},
									"visibility": "private"
								},
								{
									"body": {
										"id": 569,
										"nodeType": "Block",
										"src": "486:625:5",
										"statements": [
											{
												"id": 568,
												"nodeType": "UncheckedBlock",
												"src": "496:609:5",
												"statements": [
													{
														"assignments": [
															531
														],
														"declarations": [
															{
																"constant": false,
																"id": 531,
																"mutability": "mutable",
																"name": "length",
																"nameLocation": "528:6:5",
																"nodeType": "VariableDeclaration",
																"scope": 568,
																"src": "520:14:5",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 530,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "520:7:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 538,
														"initialValue": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 537,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"arguments": [
																	{
																		"id": 534,
																		"name": "value",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 525,
																		"src": "548:5:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"expression": {
																		"id": 532,
																		"name": "Math",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1588,
																		"src": "537:4:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_contract$_Math_$1588_$",
																			"typeString": "type(library Math)"
																		}
																	},
																	"id": 533,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "log10",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 1425,
																	"src": "537:10:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_uint256_$",
																		"typeString": "function (uint256) pure returns (uint256)"
																	}
																},
																"id": 535,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "537:17:5",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "+",
															"rightExpression": {
																"hexValue": "31",
																"id": 536,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "557:1:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_1_by_1",
																	"typeString": "int_const 1"
																},
																"value": "1"
															},
															"src": "537:21:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "520:38:5"
													},
													{
														"assignments": [
															540
														],
														"declarations": [
															{
																"constant": false,
																"id": 540,
																"mutability": "mutable",
																"name": "buffer",
																"nameLocation": "586:6:5",
																"nodeType": "VariableDeclaration",
																"scope": 568,
																"src": "572:20:5",
																"stateVariable": false,
																"storageLocation": "memory",
																"typeDescriptions": {
																	"typeIdentifier": "t_string_memory_ptr",
																	"typeString": "string"
																},
																"typeName": {
																	"id": 539,
																	"name": "string",
																	"nodeType": "ElementaryTypeName",
																	"src": "572:6:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_string_storage_ptr",
																		"typeString": "string"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 545,
														"initialValue": {
															"arguments": [
																{
																	"id": 543,
																	"name": "length",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 531,
																	"src": "606:6:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 542,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "NewExpression",
																"src": "595:10:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_objectcreation_pure$_t_uint256_$returns$_t_string_memory_ptr_$",
																	"typeString": "function (uint256) pure returns (string memory)"
																},
																"typeName": {
																	"id": 541,
																	"name": "string",
																	"nodeType": "ElementaryTypeName",
																	"src": "599:6:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_string_storage_ptr",
																		"typeString": "string"
																	}
																}
															},
															"id": 544,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "595:18:5",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "572:41:5"
													},
													{
														"assignments": [
															547
														],
														"declarations": [
															{
																"constant": false,
																"id": 547,
																"mutability": "mutable",
																"name": "ptr",
																"nameLocation": "635:3:5",
																"nodeType": "VariableDeclaration",
																"scope": 568,
																"src": "627:11:5",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 546,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "627:7:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 548,
														"nodeType": "VariableDeclarationStatement",
														"src": "627:11:5"
													},
													{
														"AST": {
															"nodeType": "YulBlock",
															"src": "708:67:5",
															"statements": [
																{
																	"nodeType": "YulAssignment",
																	"src": "726:35:5",
																	"value": {
																		"arguments": [
																			{
																				"name": "buffer",
																				"nodeType": "YulIdentifier",
																				"src": "737:6:5"
																			},
																			{
																				"arguments": [
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "749:2:5",
																						"type": "",
																						"value": "32"
																					},
																					{
																						"name": "length",
																						"nodeType": "YulIdentifier",
																						"src": "753:6:5"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "745:3:5"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "745:15:5"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "733:3:5"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "733:28:5"
																	},
																	"variableNames": [
																		{
																			"name": "ptr",
																			"nodeType": "YulIdentifier",
																			"src": "726:3:5"
																		}
																	]
																}
															]
														},
														"documentation": "@solidity memory-safe-assembly",
														"evmVersion": "london",
														"externalReferences": [
															{
																"declaration": 540,
																"isOffset": false,
																"isSlot": false,
																"src": "737:6:5",
																"valueSize": 1
															},
															{
																"declaration": 531,
																"isOffset": false,
																"isSlot": false,
																"src": "753:6:5",
																"valueSize": 1
															},
															{
																"declaration": 547,
																"isOffset": false,
																"isSlot": false,
																"src": "726:3:5",
																"valueSize": 1
															}
														],
														"id": 549,
														"nodeType": "InlineAssembly",
														"src": "699:76:5"
													},
													{
														"body": {
															"id": 564,
															"nodeType": "Block",
															"src": "801:267:5",
															"statements": [
																{
																	"expression": {
																		"id": 552,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "UnaryOperation",
																		"operator": "--",
																		"prefix": false,
																		"src": "819:5:5",
																		"subExpression": {
																			"id": 551,
																			"name": "ptr",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 547,
																			"src": "819:3:5",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 553,
																	"nodeType": "ExpressionStatement",
																	"src": "819:5:5"
																},
																{
																	"AST": {
																		"nodeType": "YulBlock",
																		"src": "902:84:5",
																		"statements": [
																			{
																				"expression": {
																					"arguments": [
																						{
																							"name": "ptr",
																							"nodeType": "YulIdentifier",
																							"src": "932:3:5"
																						},
																						{
																							"arguments": [
																								{
																									"arguments": [
																										{
																											"name": "value",
																											"nodeType": "YulIdentifier",
																											"src": "946:5:5"
																										},
																										{
																											"kind": "number",
																											"nodeType": "YulLiteral",
																											"src": "953:2:5",
																											"type": "",
																											"value": "10"
																										}
																									],
																									"functionName": {
																										"name": "mod",
																										"nodeType": "YulIdentifier",
																										"src": "942:3:5"
																									},
																									"nodeType": "YulFunctionCall",
																									"src": "942:14:5"
																								},
																								{
																									"name": "_SYMBOLS",
																									"nodeType": "YulIdentifier",
																									"src": "958:8:5"
																								}
																							],
																							"functionName": {
																								"name": "byte",
																								"nodeType": "YulIdentifier",
																								"src": "937:4:5"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "937:30:5"
																						}
																					],
																					"functionName": {
																						"name": "mstore8",
																						"nodeType": "YulIdentifier",
																						"src": "924:7:5"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "924:44:5"
																				},
																				"nodeType": "YulExpressionStatement",
																				"src": "924:44:5"
																			}
																		]
																	},
																	"documentation": "@solidity memory-safe-assembly",
																	"evmVersion": "london",
																	"externalReferences": [
																		{
																			"declaration": 519,
																			"isOffset": false,
																			"isSlot": false,
																			"src": "958:8:5",
																			"valueSize": 1
																		},
																		{
																			"declaration": 547,
																			"isOffset": false,
																			"isSlot": false,
																			"src": "932:3:5",
																			"valueSize": 1
																		},
																		{
																			"declaration": 525,
																			"isOffset": false,
																			"isSlot": false,
																			"src": "946:5:5",
																			"valueSize": 1
																		}
																	],
																	"id": 554,
																	"nodeType": "InlineAssembly",
																	"src": "893:93:5"
																},
																{
																	"expression": {
																		"id": 557,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 555,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 525,
																			"src": "1003:5:5",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "/=",
																		"rightHandSide": {
																			"hexValue": "3130",
																			"id": 556,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "1012:2:5",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_10_by_1",
																				"typeString": "int_const 10"
																			},
																			"value": "10"
																		},
																		"src": "1003:11:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 558,
																	"nodeType": "ExpressionStatement",
																	"src": "1003:11:5"
																},
																{
																	"condition": {
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 561,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 559,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 525,
																			"src": "1036:5:5",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "==",
																		"rightExpression": {
																			"hexValue": "30",
																			"id": 560,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "1045:1:5",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			},
																			"value": "0"
																		},
																		"src": "1036:10:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	},
																	"id": 563,
																	"nodeType": "IfStatement",
																	"src": "1032:21:5",
																	"trueBody": {
																		"id": 562,
																		"nodeType": "Break",
																		"src": "1048:5:5"
																	}
																}
															]
														},
														"condition": {
															"hexValue": "74727565",
															"id": 550,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "bool",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "795:4:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"value": "true"
														},
														"id": 565,
														"nodeType": "WhileStatement",
														"src": "788:280:5"
													},
													{
														"expression": {
															"id": 566,
															"name": "buffer",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 540,
															"src": "1088:6:5",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														},
														"functionReturnParameters": 529,
														"id": 567,
														"nodeType": "Return",
														"src": "1081:13:5"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 523,
										"nodeType": "StructuredDocumentation",
										"src": "320:90:5",
										"text": " @dev Converts a `uint256` to its ASCII `string` decimal representation."
									},
									"id": 570,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "toString",
									"nameLocation": "424:8:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 526,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 525,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "441:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 570,
												"src": "433:13:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 524,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "433:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "432:15:5"
									},
									"returnParameters": {
										"id": 529,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 528,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 570,
												"src": "471:13:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 527,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "471:6:5",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "470:15:5"
									},
									"scope": 687,
									"src": "415:696:5",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 589,
										"nodeType": "Block",
										"src": "1290:100:5",
										"statements": [
											{
												"id": 588,
												"nodeType": "UncheckedBlock",
												"src": "1300:84:5",
												"statements": [
													{
														"expression": {
															"arguments": [
																{
																	"id": 579,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 573,
																	"src": "1343:5:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 585,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"arguments": [
																			{
																				"id": 582,
																				"name": "value",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 573,
																				"src": "1362:5:5",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			],
																			"expression": {
																				"id": 580,
																				"name": "Math",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1588,
																				"src": "1350:4:5",
																				"typeDescriptions": {
																					"typeIdentifier": "t_type$_t_contract$_Math_$1588_$",
																					"typeString": "type(library Math)"
																				}
																			},
																			"id": 581,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"memberName": "log256",
																			"nodeType": "MemberAccess",
																			"referencedDeclaration": 1548,
																			"src": "1350:11:5",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_uint256_$",
																				"typeString": "function (uint256) pure returns (uint256)"
																			}
																		},
																		"id": 583,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "1350:18:5",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "+",
																	"rightExpression": {
																		"hexValue": "31",
																		"id": 584,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "1371:1:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_1_by_1",
																			"typeString": "int_const 1"
																		},
																		"value": "1"
																	},
																	"src": "1350:22:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 578,
																"name": "toHexString",
																"nodeType": "Identifier",
																"overloadedDeclarations": [
																	590,
																	666,
																	686
																],
																"referencedDeclaration": 666,
																"src": "1331:11:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_string_memory_ptr_$",
																	"typeString": "function (uint256,uint256) pure returns (string memory)"
																}
															},
															"id": 586,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1331:42:5",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														},
														"functionReturnParameters": 577,
														"id": 587,
														"nodeType": "Return",
														"src": "1324:49:5"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 571,
										"nodeType": "StructuredDocumentation",
										"src": "1117:94:5",
										"text": " @dev Converts a `uint256` to its ASCII `string` hexadecimal representation."
									},
									"id": 590,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "toHexString",
									"nameLocation": "1225:11:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 574,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 573,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "1245:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 590,
												"src": "1237:13:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 572,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1237:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1236:15:5"
									},
									"returnParameters": {
										"id": 577,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 576,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 590,
												"src": "1275:13:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 575,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "1275:6:5",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1274:15:5"
									},
									"scope": 687,
									"src": "1216:174:5",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 665,
										"nodeType": "Block",
										"src": "1603:347:5",
										"statements": [
											{
												"assignments": [
													601
												],
												"declarations": [
													{
														"constant": false,
														"id": 601,
														"mutability": "mutable",
														"name": "buffer",
														"nameLocation": "1626:6:5",
														"nodeType": "VariableDeclaration",
														"scope": 665,
														"src": "1613:19:5",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 600,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "1613:5:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 610,
												"initialValue": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 608,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 606,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "32",
																	"id": 604,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "1645:1:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_2_by_1",
																		"typeString": "int_const 2"
																	},
																	"value": "2"
																},
																"nodeType": "BinaryOperation",
																"operator": "*",
																"rightExpression": {
																	"id": 605,
																	"name": "length",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 595,
																	"src": "1649:6:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "1645:10:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "+",
															"rightExpression": {
																"hexValue": "32",
																"id": 607,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1658:1:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_2_by_1",
																	"typeString": "int_const 2"
																},
																"value": "2"
															},
															"src": "1645:14:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 603,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "NewExpression",
														"src": "1635:9:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_objectcreation_pure$_t_uint256_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (uint256) pure returns (bytes memory)"
														},
														"typeName": {
															"id": 602,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "1639:5:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														}
													},
													"id": 609,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1635:25:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "1613:47:5"
											},
											{
												"expression": {
													"id": 615,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"id": 611,
															"name": "buffer",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 601,
															"src": "1670:6:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														"id": 613,
														"indexExpression": {
															"hexValue": "30",
															"id": 612,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1677:1:5",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "1670:9:5",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes1",
															"typeString": "bytes1"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "30",
														"id": 614,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "string",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1682:3:5",
														"typeDescriptions": {
															"typeIdentifier": "t_stringliteral_044852b2a670ade5407e78fb2863c51de9fcb96542a07186fe3aeda6bb8a116d",
															"typeString": "literal_string \"0\""
														},
														"value": "0"
													},
													"src": "1670:15:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes1",
														"typeString": "bytes1"
													}
												},
												"id": 616,
												"nodeType": "ExpressionStatement",
												"src": "1670:15:5"
											},
											{
												"expression": {
													"id": 621,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"id": 617,
															"name": "buffer",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 601,
															"src": "1695:6:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														"id": 619,
														"indexExpression": {
															"hexValue": "31",
															"id": 618,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1702:1:5",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_1_by_1",
																"typeString": "int_const 1"
															},
															"value": "1"
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "1695:9:5",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes1",
															"typeString": "bytes1"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "78",
														"id": 620,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "string",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1707:3:5",
														"typeDescriptions": {
															"typeIdentifier": "t_stringliteral_7521d1cadbcfa91eec65aa16715b94ffc1c9654ba57ea2ef1a2127bca1127a83",
															"typeString": "literal_string \"x\""
														},
														"value": "x"
													},
													"src": "1695:15:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes1",
														"typeString": "bytes1"
													}
												},
												"id": 622,
												"nodeType": "ExpressionStatement",
												"src": "1695:15:5"
											},
											{
												"body": {
													"id": 651,
													"nodeType": "Block",
													"src": "1765:83:5",
													"statements": [
														{
															"expression": {
																"id": 645,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"baseExpression": {
																		"id": 637,
																		"name": "buffer",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 601,
																		"src": "1779:6:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	},
																	"id": 639,
																	"indexExpression": {
																		"id": 638,
																		"name": "i",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 624,
																		"src": "1786:1:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": true,
																	"nodeType": "IndexAccess",
																	"src": "1779:9:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes1",
																		"typeString": "bytes1"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"baseExpression": {
																		"id": 640,
																		"name": "_SYMBOLS",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 519,
																		"src": "1791:8:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes16",
																			"typeString": "bytes16"
																		}
																	},
																	"id": 644,
																	"indexExpression": {
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 643,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 641,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 593,
																			"src": "1800:5:5",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "&",
																		"rightExpression": {
																			"hexValue": "307866",
																			"id": 642,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "1808:3:5",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_15_by_1",
																				"typeString": "int_const 15"
																			},
																			"value": "0xf"
																		},
																		"src": "1800:11:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "1791:21:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes1",
																		"typeString": "bytes1"
																	}
																},
																"src": "1779:33:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes1",
																	"typeString": "bytes1"
																}
															},
															"id": 646,
															"nodeType": "ExpressionStatement",
															"src": "1779:33:5"
														},
														{
															"expression": {
																"id": 649,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 647,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 593,
																	"src": "1826:5:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": ">>=",
																"rightHandSide": {
																	"hexValue": "34",
																	"id": 648,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "1836:1:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_4_by_1",
																		"typeString": "int_const 4"
																	},
																	"value": "4"
																},
																"src": "1826:11:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 650,
															"nodeType": "ExpressionStatement",
															"src": "1826:11:5"
														}
													]
												},
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 633,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 631,
														"name": "i",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 624,
														"src": "1753:1:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"hexValue": "31",
														"id": 632,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1757:1:5",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_1_by_1",
															"typeString": "int_const 1"
														},
														"value": "1"
													},
													"src": "1753:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 652,
												"initializationExpression": {
													"assignments": [
														624
													],
													"declarations": [
														{
															"constant": false,
															"id": 624,
															"mutability": "mutable",
															"name": "i",
															"nameLocation": "1733:1:5",
															"nodeType": "VariableDeclaration",
															"scope": 652,
															"src": "1725:9:5",
															"stateVariable": false,
															"storageLocation": "default",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"typeName": {
																"id": 623,
																"name": "uint256",
																"nodeType": "ElementaryTypeName",
																"src": "1725:7:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"visibility": "internal"
														}
													],
													"id": 630,
													"initialValue": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 629,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 627,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"hexValue": "32",
																"id": 625,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1737:1:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_2_by_1",
																	"typeString": "int_const 2"
																},
																"value": "2"
															},
															"nodeType": "BinaryOperation",
															"operator": "*",
															"rightExpression": {
																"id": 626,
																"name": "length",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 595,
																"src": "1741:6:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "1737:10:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "+",
														"rightExpression": {
															"hexValue": "31",
															"id": 628,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1750:1:5",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_1_by_1",
																"typeString": "int_const 1"
															},
															"value": "1"
														},
														"src": "1737:14:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "VariableDeclarationStatement",
													"src": "1725:26:5"
												},
												"loopExpression": {
													"expression": {
														"id": 635,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "UnaryOperation",
														"operator": "--",
														"prefix": true,
														"src": "1760:3:5",
														"subExpression": {
															"id": 634,
															"name": "i",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 624,
															"src": "1762:1:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 636,
													"nodeType": "ExpressionStatement",
													"src": "1760:3:5"
												},
												"nodeType": "ForStatement",
												"src": "1720:128:5"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 656,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 654,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 593,
																"src": "1865:5:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"hexValue": "30",
																"id": 655,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1874:1:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "1865:10:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "537472696e67733a20686578206c656e67746820696e73756666696369656e74",
															"id": 657,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1877:34:5",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2",
																"typeString": "literal_string \"Strings: hex length insufficient\""
															},
															"value": "Strings: hex length insufficient"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2",
																"typeString": "literal_string \"Strings: hex length insufficient\""
															}
														],
														"id": 653,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1857:7:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 658,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1857:55:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 659,
												"nodeType": "ExpressionStatement",
												"src": "1857:55:5"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 662,
															"name": "buffer",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 601,
															"src": "1936:6:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 661,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "ElementaryTypeNameExpression",
														"src": "1929:6:5",
														"typeDescriptions": {
															"typeIdentifier": "t_type$_t_string_storage_ptr_$",
															"typeString": "type(string storage pointer)"
														},
														"typeName": {
															"id": 660,
															"name": "string",
															"nodeType": "ElementaryTypeName",
															"src": "1929:6:5",
															"typeDescriptions": {}
														}
													},
													"id": 663,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "typeConversion",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1929:14:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_string_memory_ptr",
														"typeString": "string memory"
													}
												},
												"functionReturnParameters": 599,
												"id": 664,
												"nodeType": "Return",
												"src": "1922:21:5"
											}
										]
									},
									"documentation": {
										"id": 591,
										"nodeType": "StructuredDocumentation",
										"src": "1396:112:5",
										"text": " @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length."
									},
									"id": 666,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "toHexString",
									"nameLocation": "1522:11:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 596,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 593,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "1542:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 666,
												"src": "1534:13:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 592,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1534:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 595,
												"mutability": "mutable",
												"name": "length",
												"nameLocation": "1557:6:5",
												"nodeType": "VariableDeclaration",
												"scope": 666,
												"src": "1549:14:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 594,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1549:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1533:31:5"
									},
									"returnParameters": {
										"id": 599,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 598,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 666,
												"src": "1588:13:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 597,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "1588:6:5",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1587:15:5"
									},
									"scope": 687,
									"src": "1513:437:5",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 685,
										"nodeType": "Block",
										"src": "2175:76:5",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"arguments": [
																		{
																			"id": 679,
																			"name": "addr",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 669,
																			"src": "2220:4:5",
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		],
																		"id": 678,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "2212:7:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_uint160_$",
																			"typeString": "type(uint160)"
																		},
																		"typeName": {
																			"id": 677,
																			"name": "uint160",
																			"nodeType": "ElementaryTypeName",
																			"src": "2212:7:5",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 680,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "2212:13:5",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint160",
																		"typeString": "uint160"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint160",
																		"typeString": "uint160"
																	}
																],
																"id": 676,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "2204:7:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_uint256_$",
																	"typeString": "type(uint256)"
																},
																"typeName": {
																	"id": 675,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "2204:7:5",
																	"typeDescriptions": {}
																}
															},
															"id": 681,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2204:22:5",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 682,
															"name": "_ADDRESS_LENGTH",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 522,
															"src": "2228:15:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															}
														],
														"id": 674,
														"name": "toHexString",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															590,
															666,
															686
														],
														"referencedDeclaration": 666,
														"src": "2192:11:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_string_memory_ptr_$",
															"typeString": "function (uint256,uint256) pure returns (string memory)"
														}
													},
													"id": 683,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2192:52:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_string_memory_ptr",
														"typeString": "string memory"
													}
												},
												"functionReturnParameters": 673,
												"id": 684,
												"nodeType": "Return",
												"src": "2185:59:5"
											}
										]
									},
									"documentation": {
										"id": 667,
										"nodeType": "StructuredDocumentation",
										"src": "1956:141:5",
										"text": " @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation."
									},
									"id": 686,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "toHexString",
									"nameLocation": "2111:11:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 670,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 669,
												"mutability": "mutable",
												"name": "addr",
												"nameLocation": "2131:4:5",
												"nodeType": "VariableDeclaration",
												"scope": 686,
												"src": "2123:12:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 668,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2123:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2122:14:5"
									},
									"returnParameters": {
										"id": 673,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 672,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 686,
												"src": "2160:13:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 671,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "2160:6:5",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2159:15:5"
									},
									"scope": 687,
									"src": "2102:149:5",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 688,
							"src": "188:2065:5",
							"usedErrors": []
						}
					],
					"src": "101:2153:5"
				},
				"id": 5
			},
			"@openzeppelin/contracts/utils/introspection/ERC165.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/utils/introspection/ERC165.sol",
					"exportedSymbols": {
						"ERC165": [
							711
						],
						"IERC165": [
							723
						]
					},
					"id": 712,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 689,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "99:23:6"
						},
						{
							"absolutePath": "@openzeppelin/contracts/utils/introspection/IERC165.sol",
							"file": "./IERC165.sol",
							"id": 690,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 712,
							"sourceUnit": 724,
							"src": "124:23:6",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": true,
							"baseContracts": [
								{
									"baseName": {
										"id": 692,
										"name": "IERC165",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 723,
										"src": "754:7:6"
									},
									"id": 693,
									"nodeType": "InheritanceSpecifier",
									"src": "754:7:6"
								}
							],
							"canonicalName": "ERC165",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 691,
								"nodeType": "StructuredDocumentation",
								"src": "149:576:6",
								"text": " @dev Implementation of the {IERC165} interface.\n Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n for the additional interface id that will be supported. For example:\n ```solidity\n function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n }\n ```\n Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation."
							},
							"fullyImplemented": true,
							"id": 711,
							"linearizedBaseContracts": [
								711,
								723
							],
							"name": "ERC165",
							"nameLocation": "744:6:6",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"baseFunctions": [
										722
									],
									"body": {
										"id": 709,
										"nodeType": "Block",
										"src": "920:64:6",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_bytes4",
														"typeString": "bytes4"
													},
													"id": 707,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 702,
														"name": "interfaceId",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 696,
														"src": "937:11:6",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes4",
															"typeString": "bytes4"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"expression": {
															"arguments": [
																{
																	"id": 704,
																	"name": "IERC165",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 723,
																	"src": "957:7:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_contract$_IERC165_$723_$",
																		"typeString": "type(contract IERC165)"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_type$_t_contract$_IERC165_$723_$",
																		"typeString": "type(contract IERC165)"
																	}
																],
																"id": 703,
																"name": "type",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967269,
																"src": "952:4:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_metatype_pure$__$returns$__$",
																	"typeString": "function () pure"
																}
															},
															"id": 705,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "952:13:6",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_magic_meta_type_t_contract$_IERC165_$723",
																"typeString": "type(contract IERC165)"
															}
														},
														"id": 706,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"memberName": "interfaceId",
														"nodeType": "MemberAccess",
														"src": "952:25:6",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes4",
															"typeString": "bytes4"
														}
													},
													"src": "937:40:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 701,
												"id": 708,
												"nodeType": "Return",
												"src": "930:47:6"
											}
										]
									},
									"documentation": {
										"id": 694,
										"nodeType": "StructuredDocumentation",
										"src": "768:56:6",
										"text": " @dev See {IERC165-supportsInterface}."
									},
									"functionSelector": "01ffc9a7",
									"id": 710,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "supportsInterface",
									"nameLocation": "838:17:6",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 698,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "896:8:6"
									},
									"parameters": {
										"id": 697,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 696,
												"mutability": "mutable",
												"name": "interfaceId",
												"nameLocation": "863:11:6",
												"nodeType": "VariableDeclaration",
												"scope": 710,
												"src": "856:18:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes4",
													"typeString": "bytes4"
												},
												"typeName": {
													"id": 695,
													"name": "bytes4",
													"nodeType": "ElementaryTypeName",
													"src": "856:6:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes4",
														"typeString": "bytes4"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "855:20:6"
									},
									"returnParameters": {
										"id": 701,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 700,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 710,
												"src": "914:4:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 699,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "914:4:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "913:6:6"
									},
									"scope": 711,
									"src": "829:155:6",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								}
							],
							"scope": 712,
							"src": "726:260:6",
							"usedErrors": []
						}
					],
					"src": "99:888:6"
				},
				"id": 6
			},
			"@openzeppelin/contracts/utils/introspection/IERC165.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/utils/introspection/IERC165.sol",
					"exportedSymbols": {
						"IERC165": [
							723
						]
					},
					"id": 724,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 713,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "100:23:7"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IERC165",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 714,
								"nodeType": "StructuredDocumentation",
								"src": "125:279:7",
								"text": " @dev Interface of the ERC165 standard, as defined in the\n https://eips.ethereum.org/EIPS/eip-165[EIP].\n Implementers can declare support of contract interfaces, which can then be\n queried by others ({ERC165Checker}).\n For an implementation, see {ERC165}."
							},
							"fullyImplemented": false,
							"id": 723,
							"linearizedBaseContracts": [
								723
							],
							"name": "IERC165",
							"nameLocation": "415:7:7",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 715,
										"nodeType": "StructuredDocumentation",
										"src": "429:340:7",
										"text": " @dev Returns true if this contract implements the interface defined by\n `interfaceId`. See the corresponding\n https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n to learn more about how these ids are created.\n This function call must use less than 30 000 gas."
									},
									"functionSelector": "01ffc9a7",
									"id": 722,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "supportsInterface",
									"nameLocation": "783:17:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 718,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 717,
												"mutability": "mutable",
												"name": "interfaceId",
												"nameLocation": "808:11:7",
												"nodeType": "VariableDeclaration",
												"scope": 722,
												"src": "801:18:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes4",
													"typeString": "bytes4"
												},
												"typeName": {
													"id": 716,
													"name": "bytes4",
													"nodeType": "ElementaryTypeName",
													"src": "801:6:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes4",
														"typeString": "bytes4"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "800:20:7"
									},
									"returnParameters": {
										"id": 721,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 720,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 722,
												"src": "844:4:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 719,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "844:4:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "843:6:7"
									},
									"scope": 723,
									"src": "774:76:7",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 724,
							"src": "405:447:7",
							"usedErrors": []
						}
					],
					"src": "100:753:7"
				},
				"id": 7
			},
			"@openzeppelin/contracts/utils/math/Math.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/utils/math/Math.sol",
					"exportedSymbols": {
						"Math": [
							1588
						]
					},
					"id": 1589,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 725,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "103:23:8"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "Math",
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 726,
								"nodeType": "StructuredDocumentation",
								"src": "128:73:8",
								"text": " @dev Standard math utilities missing in the Solidity language."
							},
							"fullyImplemented": true,
							"id": 1588,
							"linearizedBaseContracts": [
								1588
							],
							"name": "Math",
							"nameLocation": "210:4:8",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"canonicalName": "Math.Rounding",
									"id": 730,
									"members": [
										{
											"id": 727,
											"name": "Down",
											"nameLocation": "245:4:8",
											"nodeType": "EnumValue",
											"src": "245:4:8"
										},
										{
											"id": 728,
											"name": "Up",
											"nameLocation": "287:2:8",
											"nodeType": "EnumValue",
											"src": "287:2:8"
										},
										{
											"id": 729,
											"name": "Zero",
											"nameLocation": "318:4:8",
											"nodeType": "EnumValue",
											"src": "318:4:8"
										}
									],
									"name": "Rounding",
									"nameLocation": "226:8:8",
									"nodeType": "EnumDefinition",
									"src": "221:122:8"
								},
								{
									"body": {
										"id": 747,
										"nodeType": "Block",
										"src": "480:37:8",
										"statements": [
											{
												"expression": {
													"condition": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 742,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 740,
															"name": "a",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 733,
															"src": "497:1:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": ">",
														"rightExpression": {
															"id": 741,
															"name": "b",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 735,
															"src": "501:1:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "497:5:8",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"falseExpression": {
														"id": 744,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 735,
														"src": "509:1:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 745,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "Conditional",
													"src": "497:13:8",
													"trueExpression": {
														"id": 743,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 733,
														"src": "505:1:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 739,
												"id": 746,
												"nodeType": "Return",
												"src": "490:20:8"
											}
										]
									},
									"documentation": {
										"id": 731,
										"nodeType": "StructuredDocumentation",
										"src": "349:59:8",
										"text": " @dev Returns the largest of two numbers."
									},
									"id": 748,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "max",
									"nameLocation": "422:3:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 736,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 733,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "434:1:8",
												"nodeType": "VariableDeclaration",
												"scope": 748,
												"src": "426:9:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 732,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "426:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 735,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "445:1:8",
												"nodeType": "VariableDeclaration",
												"scope": 748,
												"src": "437:9:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 734,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "437:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "425:22:8"
									},
									"returnParameters": {
										"id": 739,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 738,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 748,
												"src": "471:7:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 737,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "471:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "470:9:8"
									},
									"scope": 1588,
									"src": "413:104:8",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 765,
										"nodeType": "Block",
										"src": "655:37:8",
										"statements": [
											{
												"expression": {
													"condition": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 760,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 758,
															"name": "a",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 751,
															"src": "672:1:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "<",
														"rightExpression": {
															"id": 759,
															"name": "b",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 753,
															"src": "676:1:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "672:5:8",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"falseExpression": {
														"id": 762,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 753,
														"src": "684:1:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 763,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "Conditional",
													"src": "672:13:8",
													"trueExpression": {
														"id": 761,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 751,
														"src": "680:1:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 757,
												"id": 764,
												"nodeType": "Return",
												"src": "665:20:8"
											}
										]
									},
									"documentation": {
										"id": 749,
										"nodeType": "StructuredDocumentation",
										"src": "523:60:8",
										"text": " @dev Returns the smallest of two numbers."
									},
									"id": 766,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "min",
									"nameLocation": "597:3:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 754,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 751,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "609:1:8",
												"nodeType": "VariableDeclaration",
												"scope": 766,
												"src": "601:9:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 750,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "601:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 753,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "620:1:8",
												"nodeType": "VariableDeclaration",
												"scope": 766,
												"src": "612:9:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 752,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "612:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "600:22:8"
									},
									"returnParameters": {
										"id": 757,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 756,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 766,
												"src": "646:7:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 755,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "646:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "645:9:8"
									},
									"scope": 1588,
									"src": "588:104:8",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 788,
										"nodeType": "Block",
										"src": "876:82:8",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 786,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"components": [
															{
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 778,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 776,
																	"name": "a",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 769,
																	"src": "931:1:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "&",
																"rightExpression": {
																	"id": 777,
																	"name": "b",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 771,
																	"src": "935:1:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "931:5:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"id": 779,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "930:7:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "+",
													"rightExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 785,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"components": [
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 782,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 780,
																		"name": "a",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 769,
																		"src": "941:1:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "^",
																	"rightExpression": {
																		"id": 781,
																		"name": "b",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 771,
																		"src": "945:1:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "941:5:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"id": 783,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "940:7:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "/",
														"rightExpression": {
															"hexValue": "32",
															"id": 784,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "950:1:8",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_2_by_1",
																"typeString": "int_const 2"
															},
															"value": "2"
														},
														"src": "940:11:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "930:21:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 775,
												"id": 787,
												"nodeType": "Return",
												"src": "923:28:8"
											}
										]
									},
									"documentation": {
										"id": 767,
										"nodeType": "StructuredDocumentation",
										"src": "698:102:8",
										"text": " @dev Returns the average of two numbers. The result is rounded towards\n zero."
									},
									"id": 789,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "average",
									"nameLocation": "814:7:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 772,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 769,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "830:1:8",
												"nodeType": "VariableDeclaration",
												"scope": 789,
												"src": "822:9:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 768,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "822:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 771,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "841:1:8",
												"nodeType": "VariableDeclaration",
												"scope": 789,
												"src": "833:9:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 770,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "833:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "821:22:8"
									},
									"returnParameters": {
										"id": 775,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 774,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 789,
												"src": "867:7:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 773,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "867:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "866:9:8"
									},
									"scope": 1588,
									"src": "805:153:8",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 813,
										"nodeType": "Block",
										"src": "1228:123:8",
										"statements": [
											{
												"expression": {
													"condition": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 801,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 799,
															"name": "a",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 792,
															"src": "1316:1:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "==",
														"rightExpression": {
															"hexValue": "30",
															"id": 800,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1321:1:8",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														"src": "1316:6:8",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"falseExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 810,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 808,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 805,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 803,
																			"name": "a",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 792,
																			"src": "1330:1:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "-",
																		"rightExpression": {
																			"hexValue": "31",
																			"id": 804,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "1334:1:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_1_by_1",
																				"typeString": "int_const 1"
																			},
																			"value": "1"
																		},
																		"src": "1330:5:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 806,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "1329:7:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "/",
															"rightExpression": {
																"id": 807,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 794,
																"src": "1339:1:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "1329:11:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "+",
														"rightExpression": {
															"hexValue": "31",
															"id": 809,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1343:1:8",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_1_by_1",
																"typeString": "int_const 1"
															},
															"value": "1"
														},
														"src": "1329:15:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 811,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "Conditional",
													"src": "1316:28:8",
													"trueExpression": {
														"hexValue": "30",
														"id": 802,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1325:1:8",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 798,
												"id": 812,
												"nodeType": "Return",
												"src": "1309:35:8"
											}
										]
									},
									"documentation": {
										"id": 790,
										"nodeType": "StructuredDocumentation",
										"src": "964:188:8",
										"text": " @dev Returns the ceiling of the division of two numbers.\n This differs from standard division with `/` in that it rounds up instead\n of rounding down."
									},
									"id": 814,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "ceilDiv",
									"nameLocation": "1166:7:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 795,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 792,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "1182:1:8",
												"nodeType": "VariableDeclaration",
												"scope": 814,
												"src": "1174:9:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 791,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1174:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 794,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "1193:1:8",
												"nodeType": "VariableDeclaration",
												"scope": 814,
												"src": "1185:9:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 793,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1185:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1173:22:8"
									},
									"returnParameters": {
										"id": 798,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 797,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 814,
												"src": "1219:7:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 796,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1219:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1218:9:8"
									},
									"scope": 1588,
									"src": "1157:194:8",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 935,
										"nodeType": "Block",
										"src": "1795:3797:8",
										"statements": [
											{
												"id": 934,
												"nodeType": "UncheckedBlock",
												"src": "1805:3781:8",
												"statements": [
													{
														"assignments": [
															827
														],
														"declarations": [
															{
																"constant": false,
																"id": 827,
																"mutability": "mutable",
																"name": "prod0",
																"nameLocation": "2134:5:8",
																"nodeType": "VariableDeclaration",
																"scope": 934,
																"src": "2126:13:8",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 826,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "2126:7:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 828,
														"nodeType": "VariableDeclarationStatement",
														"src": "2126:13:8"
													},
													{
														"assignments": [
															830
														],
														"declarations": [
															{
																"constant": false,
																"id": 830,
																"mutability": "mutable",
																"name": "prod1",
																"nameLocation": "2206:5:8",
																"nodeType": "VariableDeclaration",
																"scope": 934,
																"src": "2198:13:8",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 829,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "2198:7:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 831,
														"nodeType": "VariableDeclarationStatement",
														"src": "2198:13:8"
													},
													{
														"AST": {
															"nodeType": "YulBlock",
															"src": "2278:157:8",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "2296:30:8",
																	"value": {
																		"arguments": [
																			{
																				"name": "x",
																				"nodeType": "YulIdentifier",
																				"src": "2313:1:8"
																			},
																			{
																				"name": "y",
																				"nodeType": "YulIdentifier",
																				"src": "2316:1:8"
																			},
																			{
																				"arguments": [
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "2323:1:8",
																						"type": "",
																						"value": "0"
																					}
																				],
																				"functionName": {
																					"name": "not",
																					"nodeType": "YulIdentifier",
																					"src": "2319:3:8"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "2319:6:8"
																			}
																		],
																		"functionName": {
																			"name": "mulmod",
																			"nodeType": "YulIdentifier",
																			"src": "2306:6:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2306:20:8"
																	},
																	"variables": [
																		{
																			"name": "mm",
																			"nodeType": "YulTypedName",
																			"src": "2300:2:8",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "2343:18:8",
																	"value": {
																		"arguments": [
																			{
																				"name": "x",
																				"nodeType": "YulIdentifier",
																				"src": "2356:1:8"
																			},
																			{
																				"name": "y",
																				"nodeType": "YulIdentifier",
																				"src": "2359:1:8"
																			}
																		],
																		"functionName": {
																			"name": "mul",
																			"nodeType": "YulIdentifier",
																			"src": "2352:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2352:9:8"
																	},
																	"variableNames": [
																		{
																			"name": "prod0",
																			"nodeType": "YulIdentifier",
																			"src": "2343:5:8"
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "2378:43:8",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "mm",
																						"nodeType": "YulIdentifier",
																						"src": "2395:2:8"
																					},
																					{
																						"name": "prod0",
																						"nodeType": "YulIdentifier",
																						"src": "2399:5:8"
																					}
																				],
																				"functionName": {
																					"name": "sub",
																					"nodeType": "YulIdentifier",
																					"src": "2391:3:8"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "2391:14:8"
																			},
																			{
																				"arguments": [
																					{
																						"name": "mm",
																						"nodeType": "YulIdentifier",
																						"src": "2410:2:8"
																					},
																					{
																						"name": "prod0",
																						"nodeType": "YulIdentifier",
																						"src": "2414:5:8"
																					}
																				],
																				"functionName": {
																					"name": "lt",
																					"nodeType": "YulIdentifier",
																					"src": "2407:2:8"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "2407:13:8"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "2387:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2387:34:8"
																	},
																	"variableNames": [
																		{
																			"name": "prod1",
																			"nodeType": "YulIdentifier",
																			"src": "2378:5:8"
																		}
																	]
																}
															]
														},
														"evmVersion": "london",
														"externalReferences": [
															{
																"declaration": 827,
																"isOffset": false,
																"isSlot": false,
																"src": "2343:5:8",
																"valueSize": 1
															},
															{
																"declaration": 827,
																"isOffset": false,
																"isSlot": false,
																"src": "2399:5:8",
																"valueSize": 1
															},
															{
																"declaration": 827,
																"isOffset": false,
																"isSlot": false,
																"src": "2414:5:8",
																"valueSize": 1
															},
															{
																"declaration": 830,
																"isOffset": false,
																"isSlot": false,
																"src": "2378:5:8",
																"valueSize": 1
															},
															{
																"declaration": 817,
																"isOffset": false,
																"isSlot": false,
																"src": "2313:1:8",
																"valueSize": 1
															},
															{
																"declaration": 817,
																"isOffset": false,
																"isSlot": false,
																"src": "2356:1:8",
																"valueSize": 1
															},
															{
																"declaration": 819,
																"isOffset": false,
																"isSlot": false,
																"src": "2316:1:8",
																"valueSize": 1
															},
															{
																"declaration": 819,
																"isOffset": false,
																"isSlot": false,
																"src": "2359:1:8",
																"valueSize": 1
															}
														],
														"id": 832,
														"nodeType": "InlineAssembly",
														"src": "2269:166:8"
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 835,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 833,
																"name": "prod1",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 830,
																"src": "2516:5:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"hexValue": "30",
																"id": 834,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2525:1:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "2516:10:8",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 841,
														"nodeType": "IfStatement",
														"src": "2512:75:8",
														"trueBody": {
															"id": 840,
															"nodeType": "Block",
															"src": "2528:59:8",
															"statements": [
																{
																	"expression": {
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 838,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 836,
																			"name": "prod0",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 827,
																			"src": "2553:5:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "/",
																		"rightExpression": {
																			"id": 837,
																			"name": "denominator",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 821,
																			"src": "2561:11:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"src": "2553:19:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"functionReturnParameters": 825,
																	"id": 839,
																	"nodeType": "Return",
																	"src": "2546:26:8"
																}
															]
														}
													},
													{
														"expression": {
															"arguments": [
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 845,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 843,
																		"name": "denominator",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 821,
																		"src": "2697:11:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": ">",
																	"rightExpression": {
																		"id": 844,
																		"name": "prod1",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 830,
																		"src": "2711:5:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "2697:19:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																],
																"id": 842,
																"name": "require",
																"nodeType": "Identifier",
																"overloadedDeclarations": [
																	4294967278,
																	4294967278
																],
																"referencedDeclaration": 4294967278,
																"src": "2689:7:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
																	"typeString": "function (bool) pure"
																}
															},
															"id": 846,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2689:28:8",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$__$",
																"typeString": "tuple()"
															}
														},
														"id": 847,
														"nodeType": "ExpressionStatement",
														"src": "2689:28:8"
													},
													{
														"assignments": [
															849
														],
														"declarations": [
															{
																"constant": false,
																"id": 849,
																"mutability": "mutable",
																"name": "remainder",
																"nameLocation": "2981:9:8",
																"nodeType": "VariableDeclaration",
																"scope": 934,
																"src": "2973:17:8",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 848,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "2973:7:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 850,
														"nodeType": "VariableDeclarationStatement",
														"src": "2973:17:8"
													},
													{
														"AST": {
															"nodeType": "YulBlock",
															"src": "3013:291:8",
															"statements": [
																{
																	"nodeType": "YulAssignment",
																	"src": "3082:38:8",
																	"value": {
																		"arguments": [
																			{
																				"name": "x",
																				"nodeType": "YulIdentifier",
																				"src": "3102:1:8"
																			},
																			{
																				"name": "y",
																				"nodeType": "YulIdentifier",
																				"src": "3105:1:8"
																			},
																			{
																				"name": "denominator",
																				"nodeType": "YulIdentifier",
																				"src": "3108:11:8"
																			}
																		],
																		"functionName": {
																			"name": "mulmod",
																			"nodeType": "YulIdentifier",
																			"src": "3095:6:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3095:25:8"
																	},
																	"variableNames": [
																		{
																			"name": "remainder",
																			"nodeType": "YulIdentifier",
																			"src": "3082:9:8"
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "3202:41:8",
																	"value": {
																		"arguments": [
																			{
																				"name": "prod1",
																				"nodeType": "YulIdentifier",
																				"src": "3215:5:8"
																			},
																			{
																				"arguments": [
																					{
																						"name": "remainder",
																						"nodeType": "YulIdentifier",
																						"src": "3225:9:8"
																					},
																					{
																						"name": "prod0",
																						"nodeType": "YulIdentifier",
																						"src": "3236:5:8"
																					}
																				],
																				"functionName": {
																					"name": "gt",
																					"nodeType": "YulIdentifier",
																					"src": "3222:2:8"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "3222:20:8"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "3211:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3211:32:8"
																	},
																	"variableNames": [
																		{
																			"name": "prod1",
																			"nodeType": "YulIdentifier",
																			"src": "3202:5:8"
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "3260:30:8",
																	"value": {
																		"arguments": [
																			{
																				"name": "prod0",
																				"nodeType": "YulIdentifier",
																				"src": "3273:5:8"
																			},
																			{
																				"name": "remainder",
																				"nodeType": "YulIdentifier",
																				"src": "3280:9:8"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "3269:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3269:21:8"
																	},
																	"variableNames": [
																		{
																			"name": "prod0",
																			"nodeType": "YulIdentifier",
																			"src": "3260:5:8"
																		}
																	]
																}
															]
														},
														"evmVersion": "london",
														"externalReferences": [
															{
																"declaration": 821,
																"isOffset": false,
																"isSlot": false,
																"src": "3108:11:8",
																"valueSize": 1
															},
															{
																"declaration": 827,
																"isOffset": false,
																"isSlot": false,
																"src": "3236:5:8",
																"valueSize": 1
															},
															{
																"declaration": 827,
																"isOffset": false,
																"isSlot": false,
																"src": "3260:5:8",
																"valueSize": 1
															},
															{
																"declaration": 827,
																"isOffset": false,
																"isSlot": false,
																"src": "3273:5:8",
																"valueSize": 1
															},
															{
																"declaration": 830,
																"isOffset": false,
																"isSlot": false,
																"src": "3202:5:8",
																"valueSize": 1
															},
															{
																"declaration": 830,
																"isOffset": false,
																"isSlot": false,
																"src": "3215:5:8",
																"valueSize": 1
															},
															{
																"declaration": 849,
																"isOffset": false,
																"isSlot": false,
																"src": "3082:9:8",
																"valueSize": 1
															},
															{
																"declaration": 849,
																"isOffset": false,
																"isSlot": false,
																"src": "3225:9:8",
																"valueSize": 1
															},
															{
																"declaration": 849,
																"isOffset": false,
																"isSlot": false,
																"src": "3280:9:8",
																"valueSize": 1
															},
															{
																"declaration": 817,
																"isOffset": false,
																"isSlot": false,
																"src": "3102:1:8",
																"valueSize": 1
															},
															{
																"declaration": 819,
																"isOffset": false,
																"isSlot": false,
																"src": "3105:1:8",
																"valueSize": 1
															}
														],
														"id": 851,
														"nodeType": "InlineAssembly",
														"src": "3004:300:8"
													},
													{
														"assignments": [
															853
														],
														"declarations": [
															{
																"constant": false,
																"id": 853,
																"mutability": "mutable",
																"name": "twos",
																"nameLocation": "3619:4:8",
																"nodeType": "VariableDeclaration",
																"scope": 934,
																"src": "3611:12:8",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 852,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "3611:7:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 861,
														"initialValue": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 860,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 854,
																"name": "denominator",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 821,
																"src": "3626:11:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "&",
															"rightExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 858,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 856,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"nodeType": "UnaryOperation",
																			"operator": "~",
																			"prefix": true,
																			"src": "3641:12:8",
																			"subExpression": {
																				"id": 855,
																				"name": "denominator",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 821,
																				"src": "3642:11:8",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "+",
																		"rightExpression": {
																			"hexValue": "31",
																			"id": 857,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "3656:1:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_1_by_1",
																				"typeString": "int_const 1"
																			},
																			"value": "1"
																		},
																		"src": "3641:16:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 859,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "3640:18:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "3626:32:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "3611:47:8"
													},
													{
														"AST": {
															"nodeType": "YulBlock",
															"src": "3681:362:8",
															"statements": [
																{
																	"nodeType": "YulAssignment",
																	"src": "3746:37:8",
																	"value": {
																		"arguments": [
																			{
																				"name": "denominator",
																				"nodeType": "YulIdentifier",
																				"src": "3765:11:8"
																			},
																			{
																				"name": "twos",
																				"nodeType": "YulIdentifier",
																				"src": "3778:4:8"
																			}
																		],
																		"functionName": {
																			"name": "div",
																			"nodeType": "YulIdentifier",
																			"src": "3761:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3761:22:8"
																	},
																	"variableNames": [
																		{
																			"name": "denominator",
																			"nodeType": "YulIdentifier",
																			"src": "3746:11:8"
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "3850:25:8",
																	"value": {
																		"arguments": [
																			{
																				"name": "prod0",
																				"nodeType": "YulIdentifier",
																				"src": "3863:5:8"
																			},
																			{
																				"name": "twos",
																				"nodeType": "YulIdentifier",
																				"src": "3870:4:8"
																			}
																		],
																		"functionName": {
																			"name": "div",
																			"nodeType": "YulIdentifier",
																			"src": "3859:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3859:16:8"
																	},
																	"variableNames": [
																		{
																			"name": "prod0",
																			"nodeType": "YulIdentifier",
																			"src": "3850:5:8"
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "3990:39:8",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "4010:1:8",
																								"type": "",
																								"value": "0"
																							},
																							{
																								"name": "twos",
																								"nodeType": "YulIdentifier",
																								"src": "4013:4:8"
																							}
																						],
																						"functionName": {
																							"name": "sub",
																							"nodeType": "YulIdentifier",
																							"src": "4006:3:8"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "4006:12:8"
																					},
																					{
																						"name": "twos",
																						"nodeType": "YulIdentifier",
																						"src": "4020:4:8"
																					}
																				],
																				"functionName": {
																					"name": "div",
																					"nodeType": "YulIdentifier",
																					"src": "4002:3:8"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "4002:23:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4027:1:8",
																				"type": "",
																				"value": "1"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3998:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3998:31:8"
																	},
																	"variableNames": [
																		{
																			"name": "twos",
																			"nodeType": "YulIdentifier",
																			"src": "3990:4:8"
																		}
																	]
																}
															]
														},
														"evmVersion": "london",
														"externalReferences": [
															{
																"declaration": 821,
																"isOffset": false,
																"isSlot": false,
																"src": "3746:11:8",
																"valueSize": 1
															},
															{
																"declaration": 821,
																"isOffset": false,
																"isSlot": false,
																"src": "3765:11:8",
																"valueSize": 1
															},
															{
																"declaration": 827,
																"isOffset": false,
																"isSlot": false,
																"src": "3850:5:8",
																"valueSize": 1
															},
															{
																"declaration": 827,
																"isOffset": false,
																"isSlot": false,
																"src": "3863:5:8",
																"valueSize": 1
															},
															{
																"declaration": 853,
																"isOffset": false,
																"isSlot": false,
																"src": "3778:4:8",
																"valueSize": 1
															},
															{
																"declaration": 853,
																"isOffset": false,
																"isSlot": false,
																"src": "3870:4:8",
																"valueSize": 1
															},
															{
																"declaration": 853,
																"isOffset": false,
																"isSlot": false,
																"src": "3990:4:8",
																"valueSize": 1
															},
															{
																"declaration": 853,
																"isOffset": false,
																"isSlot": false,
																"src": "4013:4:8",
																"valueSize": 1
															},
															{
																"declaration": 853,
																"isOffset": false,
																"isSlot": false,
																"src": "4020:4:8",
																"valueSize": 1
															}
														],
														"id": 862,
														"nodeType": "InlineAssembly",
														"src": "3672:371:8"
													},
													{
														"expression": {
															"id": 867,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 863,
																"name": "prod0",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 827,
																"src": "4109:5:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "|=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 866,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 864,
																	"name": "prod1",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 830,
																	"src": "4118:5:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "*",
																"rightExpression": {
																	"id": 865,
																	"name": "twos",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 853,
																	"src": "4126:4:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "4118:12:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "4109:21:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 868,
														"nodeType": "ExpressionStatement",
														"src": "4109:21:8"
													},
													{
														"assignments": [
															870
														],
														"declarations": [
															{
																"constant": false,
																"id": 870,
																"mutability": "mutable",
																"name": "inverse",
																"nameLocation": "4456:7:8",
																"nodeType": "VariableDeclaration",
																"scope": 934,
																"src": "4448:15:8",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 869,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "4448:7:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 877,
														"initialValue": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 876,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 873,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"hexValue": "33",
																			"id": 871,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "4467:1:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_3_by_1",
																				"typeString": "int_const 3"
																			},
																			"value": "3"
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "*",
																		"rightExpression": {
																			"id": 872,
																			"name": "denominator",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 821,
																			"src": "4471:11:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"src": "4467:15:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 874,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "4466:17:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "^",
															"rightExpression": {
																"hexValue": "32",
																"id": 875,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "4486:1:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_2_by_1",
																	"typeString": "int_const 2"
																},
																"value": "2"
															},
															"src": "4466:21:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "4448:39:8"
													},
													{
														"expression": {
															"id": 884,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 878,
																"name": "inverse",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 870,
																"src": "4704:7:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "*=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 883,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "32",
																	"id": 879,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "4715:1:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_2_by_1",
																		"typeString": "int_const 2"
																	},
																	"value": "2"
																},
																"nodeType": "BinaryOperation",
																"operator": "-",
																"rightExpression": {
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 882,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 880,
																		"name": "denominator",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 821,
																		"src": "4719:11:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "*",
																	"rightExpression": {
																		"id": 881,
																		"name": "inverse",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 870,
																		"src": "4733:7:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "4719:21:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "4715:25:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "4704:36:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 885,
														"nodeType": "ExpressionStatement",
														"src": "4704:36:8"
													},
													{
														"expression": {
															"id": 892,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 886,
																"name": "inverse",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 870,
																"src": "4773:7:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "*=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 891,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "32",
																	"id": 887,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "4784:1:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_2_by_1",
																		"typeString": "int_const 2"
																	},
																	"value": "2"
																},
																"nodeType": "BinaryOperation",
																"operator": "-",
																"rightExpression": {
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 890,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 888,
																		"name": "denominator",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 821,
																		"src": "4788:11:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "*",
																	"rightExpression": {
																		"id": 889,
																		"name": "inverse",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 870,
																		"src": "4802:7:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "4788:21:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "4784:25:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "4773:36:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 893,
														"nodeType": "ExpressionStatement",
														"src": "4773:36:8"
													},
													{
														"expression": {
															"id": 900,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 894,
																"name": "inverse",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 870,
																"src": "4843:7:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "*=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 899,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "32",
																	"id": 895,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "4854:1:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_2_by_1",
																		"typeString": "int_const 2"
																	},
																	"value": "2"
																},
																"nodeType": "BinaryOperation",
																"operator": "-",
																"rightExpression": {
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 898,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 896,
																		"name": "denominator",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 821,
																		"src": "4858:11:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "*",
																	"rightExpression": {
																		"id": 897,
																		"name": "inverse",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 870,
																		"src": "4872:7:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "4858:21:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "4854:25:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "4843:36:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 901,
														"nodeType": "ExpressionStatement",
														"src": "4843:36:8"
													},
													{
														"expression": {
															"id": 908,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 902,
																"name": "inverse",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 870,
																"src": "4913:7:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "*=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 907,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "32",
																	"id": 903,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "4924:1:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_2_by_1",
																		"typeString": "int_const 2"
																	},
																	"value": "2"
																},
																"nodeType": "BinaryOperation",
																"operator": "-",
																"rightExpression": {
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 906,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 904,
																		"name": "denominator",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 821,
																		"src": "4928:11:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "*",
																	"rightExpression": {
																		"id": 905,
																		"name": "inverse",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 870,
																		"src": "4942:7:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "4928:21:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "4924:25:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "4913:36:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 909,
														"nodeType": "ExpressionStatement",
														"src": "4913:36:8"
													},
													{
														"expression": {
															"id": 916,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 910,
																"name": "inverse",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 870,
																"src": "4983:7:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "*=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 915,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "32",
																	"id": 911,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "4994:1:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_2_by_1",
																		"typeString": "int_const 2"
																	},
																	"value": "2"
																},
																"nodeType": "BinaryOperation",
																"operator": "-",
																"rightExpression": {
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 914,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 912,
																		"name": "denominator",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 821,
																		"src": "4998:11:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "*",
																	"rightExpression": {
																		"id": 913,
																		"name": "inverse",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 870,
																		"src": "5012:7:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "4998:21:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "4994:25:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "4983:36:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 917,
														"nodeType": "ExpressionStatement",
														"src": "4983:36:8"
													},
													{
														"expression": {
															"id": 924,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 918,
																"name": "inverse",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 870,
																"src": "5054:7:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "*=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 923,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "32",
																	"id": 919,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "5065:1:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_2_by_1",
																		"typeString": "int_const 2"
																	},
																	"value": "2"
																},
																"nodeType": "BinaryOperation",
																"operator": "-",
																"rightExpression": {
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 922,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 920,
																		"name": "denominator",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 821,
																		"src": "5069:11:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "*",
																	"rightExpression": {
																		"id": 921,
																		"name": "inverse",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 870,
																		"src": "5083:7:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "5069:21:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "5065:25:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "5054:36:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 925,
														"nodeType": "ExpressionStatement",
														"src": "5054:36:8"
													},
													{
														"expression": {
															"id": 930,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 926,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 824,
																"src": "5524:6:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 929,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 927,
																	"name": "prod0",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 827,
																	"src": "5533:5:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "*",
																"rightExpression": {
																	"id": 928,
																	"name": "inverse",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 870,
																	"src": "5541:7:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "5533:15:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "5524:24:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 931,
														"nodeType": "ExpressionStatement",
														"src": "5524:24:8"
													},
													{
														"expression": {
															"id": 932,
															"name": "result",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 824,
															"src": "5569:6:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"functionReturnParameters": 825,
														"id": 933,
														"nodeType": "Return",
														"src": "5562:13:8"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 815,
										"nodeType": "StructuredDocumentation",
										"src": "1357:305:8",
										"text": " @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n with further edits by Uniswap Labs also under MIT license."
									},
									"id": 936,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "mulDiv",
									"nameLocation": "1676:6:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 822,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 817,
												"mutability": "mutable",
												"name": "x",
												"nameLocation": "1700:1:8",
												"nodeType": "VariableDeclaration",
												"scope": 936,
												"src": "1692:9:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 816,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1692:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 819,
												"mutability": "mutable",
												"name": "y",
												"nameLocation": "1719:1:8",
												"nodeType": "VariableDeclaration",
												"scope": 936,
												"src": "1711:9:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 818,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1711:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 821,
												"mutability": "mutable",
												"name": "denominator",
												"nameLocation": "1738:11:8",
												"nodeType": "VariableDeclaration",
												"scope": 936,
												"src": "1730:19:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 820,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1730:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1682:73:8"
									},
									"returnParameters": {
										"id": 825,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 824,
												"mutability": "mutable",
												"name": "result",
												"nameLocation": "1787:6:8",
												"nodeType": "VariableDeclaration",
												"scope": 936,
												"src": "1779:14:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 823,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1779:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1778:16:8"
									},
									"scope": 1588,
									"src": "1667:3925:8",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 979,
										"nodeType": "Block",
										"src": "5872:189:8",
										"statements": [
											{
												"assignments": [
													952
												],
												"declarations": [
													{
														"constant": false,
														"id": 952,
														"mutability": "mutable",
														"name": "result",
														"nameLocation": "5890:6:8",
														"nodeType": "VariableDeclaration",
														"scope": 979,
														"src": "5882:14:8",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 951,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "5882:7:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 958,
												"initialValue": {
													"arguments": [
														{
															"id": 954,
															"name": "x",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 939,
															"src": "5906:1:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 955,
															"name": "y",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 941,
															"src": "5909:1:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 956,
															"name": "denominator",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 943,
															"src": "5912:11:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 953,
														"name": "mulDiv",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															936,
															980
														],
														"referencedDeclaration": 936,
														"src": "5899:6:8",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
															"typeString": "function (uint256,uint256,uint256) pure returns (uint256)"
														}
													},
													"id": 957,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5899:25:8",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "5882:42:8"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"id": 970,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_enum$_Rounding_$730",
															"typeString": "enum Math.Rounding"
														},
														"id": 962,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 959,
															"name": "rounding",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 946,
															"src": "5938:8:8",
															"typeDescriptions": {
																"typeIdentifier": "t_enum$_Rounding_$730",
																"typeString": "enum Math.Rounding"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "==",
														"rightExpression": {
															"expression": {
																"id": 960,
																"name": "Rounding",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 730,
																"src": "5950:8:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_enum$_Rounding_$730_$",
																	"typeString": "type(enum Math.Rounding)"
																}
															},
															"id": 961,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"memberName": "Up",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 728,
															"src": "5950:11:8",
															"typeDescriptions": {
																"typeIdentifier": "t_enum$_Rounding_$730",
																"typeString": "enum Math.Rounding"
															}
														},
														"src": "5938:23:8",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "&&",
													"rightExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 969,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"arguments": [
																{
																	"id": 964,
																	"name": "x",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 939,
																	"src": "5972:1:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																{
																	"id": 965,
																	"name": "y",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 941,
																	"src": "5975:1:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																{
																	"id": 966,
																	"name": "denominator",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 943,
																	"src": "5978:11:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 963,
																"name": "mulmod",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967280,
																"src": "5965:6:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_mulmod_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
																	"typeString": "function (uint256,uint256,uint256) pure returns (uint256)"
																}
															},
															"id": 967,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "5965:25:8",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": ">",
														"rightExpression": {
															"hexValue": "30",
															"id": 968,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "5993:1:8",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														"src": "5965:29:8",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"src": "5938:56:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 976,
												"nodeType": "IfStatement",
												"src": "5934:98:8",
												"trueBody": {
													"id": 975,
													"nodeType": "Block",
													"src": "5996:36:8",
													"statements": [
														{
															"expression": {
																"id": 973,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 971,
																	"name": "result",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 952,
																	"src": "6010:6:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": "+=",
																"rightHandSide": {
																	"hexValue": "31",
																	"id": 972,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "6020:1:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "6010:11:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 974,
															"nodeType": "ExpressionStatement",
															"src": "6010:11:8"
														}
													]
												}
											},
											{
												"expression": {
													"id": 977,
													"name": "result",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 952,
													"src": "6048:6:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 950,
												"id": 978,
												"nodeType": "Return",
												"src": "6041:13:8"
											}
										]
									},
									"documentation": {
										"id": 937,
										"nodeType": "StructuredDocumentation",
										"src": "5598:121:8",
										"text": " @notice Calculates x * y / denominator with full precision, following the selected rounding direction."
									},
									"id": 980,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "mulDiv",
									"nameLocation": "5733:6:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 947,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 939,
												"mutability": "mutable",
												"name": "x",
												"nameLocation": "5757:1:8",
												"nodeType": "VariableDeclaration",
												"scope": 980,
												"src": "5749:9:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 938,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5749:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 941,
												"mutability": "mutable",
												"name": "y",
												"nameLocation": "5776:1:8",
												"nodeType": "VariableDeclaration",
												"scope": 980,
												"src": "5768:9:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 940,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5768:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 943,
												"mutability": "mutable",
												"name": "denominator",
												"nameLocation": "5795:11:8",
												"nodeType": "VariableDeclaration",
												"scope": 980,
												"src": "5787:19:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 942,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5787:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 946,
												"mutability": "mutable",
												"name": "rounding",
												"nameLocation": "5825:8:8",
												"nodeType": "VariableDeclaration",
												"scope": 980,
												"src": "5816:17:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_enum$_Rounding_$730",
													"typeString": "enum Math.Rounding"
												},
												"typeName": {
													"id": 945,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 944,
														"name": "Rounding",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 730,
														"src": "5816:8:8"
													},
													"referencedDeclaration": 730,
													"src": "5816:8:8",
													"typeDescriptions": {
														"typeIdentifier": "t_enum$_Rounding_$730",
														"typeString": "enum Math.Rounding"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5739:100:8"
									},
									"returnParameters": {
										"id": 950,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 949,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 980,
												"src": "5863:7:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 948,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5863:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5862:9:8"
									},
									"scope": 1588,
									"src": "5724:337:8",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1091,
										"nodeType": "Block",
										"src": "6337:1585:8",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 990,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 988,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 983,
														"src": "6351:1:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"hexValue": "30",
														"id": 989,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "6356:1:8",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "6351:6:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 994,
												"nodeType": "IfStatement",
												"src": "6347:45:8",
												"trueBody": {
													"id": 993,
													"nodeType": "Block",
													"src": "6359:33:8",
													"statements": [
														{
															"expression": {
																"hexValue": "30",
																"id": 991,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "6380:1:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"functionReturnParameters": 987,
															"id": 992,
															"nodeType": "Return",
															"src": "6373:8:8"
														}
													]
												}
											},
											{
												"assignments": [
													996
												],
												"declarations": [
													{
														"constant": false,
														"id": 996,
														"mutability": "mutable",
														"name": "result",
														"nameLocation": "7079:6:8",
														"nodeType": "VariableDeclaration",
														"scope": 1091,
														"src": "7071:14:8",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 995,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "7071:7:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1005,
												"initialValue": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1004,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"hexValue": "31",
														"id": 997,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "7088:1:8",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_1_by_1",
															"typeString": "int_const 1"
														},
														"value": "1"
													},
													"nodeType": "BinaryOperation",
													"operator": "<<",
													"rightExpression": {
														"components": [
															{
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1002,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"arguments": [
																		{
																			"id": 999,
																			"name": "a",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 983,
																			"src": "7099:1:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		],
																		"id": 998,
																		"name": "log2",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [
																			1260,
																			1296
																		],
																		"referencedDeclaration": 1260,
																		"src": "7094:4:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_uint256_$",
																			"typeString": "function (uint256) pure returns (uint256)"
																		}
																	},
																	"id": 1000,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "7094:7:8",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 1001,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "7105:1:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "7094:12:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"id": 1003,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "7093:14:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "7088:19:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "7071:36:8"
											},
											{
												"id": 1090,
												"nodeType": "UncheckedBlock",
												"src": "7508:408:8",
												"statements": [
													{
														"expression": {
															"id": 1015,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 1006,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 996,
																"src": "7532:6:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1014,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 1011,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 1007,
																				"name": "result",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 996,
																				"src": "7542:6:8",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "+",
																			"rightExpression": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 1010,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 1008,
																					"name": "a",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 983,
																					"src": "7551:1:8",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "/",
																				"rightExpression": {
																					"id": 1009,
																					"name": "result",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 996,
																					"src": "7555:6:8",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "7551:10:8",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "7542:19:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"id": 1012,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "7541:21:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 1013,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "7566:1:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "7541:26:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "7532:35:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 1016,
														"nodeType": "ExpressionStatement",
														"src": "7532:35:8"
													},
													{
														"expression": {
															"id": 1026,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 1017,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 996,
																"src": "7581:6:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1025,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 1022,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 1018,
																				"name": "result",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 996,
																				"src": "7591:6:8",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "+",
																			"rightExpression": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 1021,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 1019,
																					"name": "a",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 983,
																					"src": "7600:1:8",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "/",
																				"rightExpression": {
																					"id": 1020,
																					"name": "result",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 996,
																					"src": "7604:6:8",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "7600:10:8",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "7591:19:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"id": 1023,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "7590:21:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 1024,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "7615:1:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "7590:26:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "7581:35:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 1027,
														"nodeType": "ExpressionStatement",
														"src": "7581:35:8"
													},
													{
														"expression": {
															"id": 1037,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 1028,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 996,
																"src": "7630:6:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1036,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 1033,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 1029,
																				"name": "result",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 996,
																				"src": "7640:6:8",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "+",
																			"rightExpression": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 1032,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 1030,
																					"name": "a",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 983,
																					"src": "7649:1:8",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "/",
																				"rightExpression": {
																					"id": 1031,
																					"name": "result",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 996,
																					"src": "7653:6:8",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "7649:10:8",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "7640:19:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"id": 1034,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "7639:21:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 1035,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "7664:1:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "7639:26:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "7630:35:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 1038,
														"nodeType": "ExpressionStatement",
														"src": "7630:35:8"
													},
													{
														"expression": {
															"id": 1048,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 1039,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 996,
																"src": "7679:6:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1047,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 1044,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 1040,
																				"name": "result",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 996,
																				"src": "7689:6:8",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "+",
																			"rightExpression": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 1043,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 1041,
																					"name": "a",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 983,
																					"src": "7698:1:8",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "/",
																				"rightExpression": {
																					"id": 1042,
																					"name": "result",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 996,
																					"src": "7702:6:8",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "7698:10:8",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "7689:19:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"id": 1045,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "7688:21:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 1046,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "7713:1:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "7688:26:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "7679:35:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 1049,
														"nodeType": "ExpressionStatement",
														"src": "7679:35:8"
													},
													{
														"expression": {
															"id": 1059,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 1050,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 996,
																"src": "7728:6:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1058,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 1055,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 1051,
																				"name": "result",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 996,
																				"src": "7738:6:8",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "+",
																			"rightExpression": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 1054,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 1052,
																					"name": "a",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 983,
																					"src": "7747:1:8",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "/",
																				"rightExpression": {
																					"id": 1053,
																					"name": "result",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 996,
																					"src": "7751:6:8",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "7747:10:8",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "7738:19:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"id": 1056,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "7737:21:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 1057,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "7762:1:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "7737:26:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "7728:35:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 1060,
														"nodeType": "ExpressionStatement",
														"src": "7728:35:8"
													},
													{
														"expression": {
															"id": 1070,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 1061,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 996,
																"src": "7777:6:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1069,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 1066,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 1062,
																				"name": "result",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 996,
																				"src": "7787:6:8",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "+",
																			"rightExpression": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 1065,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 1063,
																					"name": "a",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 983,
																					"src": "7796:1:8",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "/",
																				"rightExpression": {
																					"id": 1064,
																					"name": "result",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 996,
																					"src": "7800:6:8",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "7796:10:8",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "7787:19:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"id": 1067,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "7786:21:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 1068,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "7811:1:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "7786:26:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "7777:35:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 1071,
														"nodeType": "ExpressionStatement",
														"src": "7777:35:8"
													},
													{
														"expression": {
															"id": 1081,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 1072,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 996,
																"src": "7826:6:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1080,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 1077,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 1073,
																				"name": "result",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 996,
																				"src": "7836:6:8",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "+",
																			"rightExpression": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 1076,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 1074,
																					"name": "a",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 983,
																					"src": "7845:1:8",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "/",
																				"rightExpression": {
																					"id": 1075,
																					"name": "result",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 996,
																					"src": "7849:6:8",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "7845:10:8",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "7836:19:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"id": 1078,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "7835:21:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 1079,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "7860:1:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "7835:26:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "7826:35:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 1082,
														"nodeType": "ExpressionStatement",
														"src": "7826:35:8"
													},
													{
														"expression": {
															"arguments": [
																{
																	"id": 1084,
																	"name": "result",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 996,
																	"src": "7886:6:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 1087,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 1085,
																		"name": "a",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 983,
																		"src": "7894:1:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "/",
																	"rightExpression": {
																		"id": 1086,
																		"name": "result",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 996,
																		"src": "7898:6:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "7894:10:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 1083,
																"name": "min",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 766,
																"src": "7882:3:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
																	"typeString": "function (uint256,uint256) pure returns (uint256)"
																}
															},
															"id": 1088,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "7882:23:8",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"functionReturnParameters": 987,
														"id": 1089,
														"nodeType": "Return",
														"src": "7875:30:8"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 981,
										"nodeType": "StructuredDocumentation",
										"src": "6067:208:8",
										"text": " @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11)."
									},
									"id": 1092,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "sqrt",
									"nameLocation": "6289:4:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 984,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 983,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "6302:1:8",
												"nodeType": "VariableDeclaration",
												"scope": 1092,
												"src": "6294:9:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 982,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6294:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6293:11:8"
									},
									"returnParameters": {
										"id": 987,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 986,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1092,
												"src": "6328:7:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 985,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6328:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6327:9:8"
									},
									"scope": 1588,
									"src": "6280:1642:8",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1127,
										"nodeType": "Block",
										"src": "8098:161:8",
										"statements": [
											{
												"id": 1126,
												"nodeType": "UncheckedBlock",
												"src": "8108:145:8",
												"statements": [
													{
														"assignments": [
															1104
														],
														"declarations": [
															{
																"constant": false,
																"id": 1104,
																"mutability": "mutable",
																"name": "result",
																"nameLocation": "8140:6:8",
																"nodeType": "VariableDeclaration",
																"scope": 1126,
																"src": "8132:14:8",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 1103,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "8132:7:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 1108,
														"initialValue": {
															"arguments": [
																{
																	"id": 1106,
																	"name": "a",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1095,
																	"src": "8154:1:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 1105,
																"name": "sqrt",
																"nodeType": "Identifier",
																"overloadedDeclarations": [
																	1092,
																	1128
																],
																"referencedDeclaration": 1092,
																"src": "8149:4:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_uint256_$",
																	"typeString": "function (uint256) pure returns (uint256)"
																}
															},
															"id": 1107,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "8149:7:8",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "8132:24:8"
													},
													{
														"expression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1124,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1109,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1104,
																"src": "8177:6:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "+",
															"rightExpression": {
																"components": [
																	{
																		"condition": {
																			"commonType": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			},
																			"id": 1119,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"commonType": {
																					"typeIdentifier": "t_enum$_Rounding_$730",
																					"typeString": "enum Math.Rounding"
																				},
																				"id": 1113,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 1110,
																					"name": "rounding",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1098,
																					"src": "8187:8:8",
																					"typeDescriptions": {
																						"typeIdentifier": "t_enum$_Rounding_$730",
																						"typeString": "enum Math.Rounding"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "==",
																				"rightExpression": {
																					"expression": {
																						"id": 1111,
																						"name": "Rounding",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 730,
																						"src": "8199:8:8",
																						"typeDescriptions": {
																							"typeIdentifier": "t_type$_t_enum$_Rounding_$730_$",
																							"typeString": "type(enum Math.Rounding)"
																						}
																					},
																					"id": 1112,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"lValueRequested": false,
																					"memberName": "Up",
																					"nodeType": "MemberAccess",
																					"referencedDeclaration": 728,
																					"src": "8199:11:8",
																					"typeDescriptions": {
																						"typeIdentifier": "t_enum$_Rounding_$730",
																						"typeString": "enum Math.Rounding"
																					}
																				},
																				"src": "8187:23:8",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "&&",
																			"rightExpression": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 1118,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"commonType": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					},
																					"id": 1116,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"leftExpression": {
																						"id": 1114,
																						"name": "result",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 1104,
																						"src": "8214:6:8",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"nodeType": "BinaryOperation",
																					"operator": "*",
																					"rightExpression": {
																						"id": 1115,
																						"name": "result",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 1104,
																						"src": "8223:6:8",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"src": "8214:15:8",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "<",
																				"rightExpression": {
																					"id": 1117,
																					"name": "a",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1095,
																					"src": "8232:1:8",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "8214:19:8",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			},
																			"src": "8187:46:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		},
																		"falseExpression": {
																			"hexValue": "30",
																			"id": 1121,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "8240:1:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			},
																			"value": "0"
																		},
																		"id": 1122,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "Conditional",
																		"src": "8187:54:8",
																		"trueExpression": {
																			"hexValue": "31",
																			"id": 1120,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "8236:1:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_1_by_1",
																				"typeString": "int_const 1"
																			},
																			"value": "1"
																		},
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint8",
																			"typeString": "uint8"
																		}
																	}
																],
																"id": 1123,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "8186:56:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint8",
																	"typeString": "uint8"
																}
															},
															"src": "8177:65:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"functionReturnParameters": 1102,
														"id": 1125,
														"nodeType": "Return",
														"src": "8170:72:8"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 1093,
										"nodeType": "StructuredDocumentation",
										"src": "7928:89:8",
										"text": " @notice Calculates sqrt(a), following the selected rounding direction."
									},
									"id": 1128,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "sqrt",
									"nameLocation": "8031:4:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1099,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1095,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "8044:1:8",
												"nodeType": "VariableDeclaration",
												"scope": 1128,
												"src": "8036:9:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1094,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8036:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1098,
												"mutability": "mutable",
												"name": "rounding",
												"nameLocation": "8056:8:8",
												"nodeType": "VariableDeclaration",
												"scope": 1128,
												"src": "8047:17:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_enum$_Rounding_$730",
													"typeString": "enum Math.Rounding"
												},
												"typeName": {
													"id": 1097,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1096,
														"name": "Rounding",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 730,
														"src": "8047:8:8"
													},
													"referencedDeclaration": 730,
													"src": "8047:8:8",
													"typeDescriptions": {
														"typeIdentifier": "t_enum$_Rounding_$730",
														"typeString": "enum Math.Rounding"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8035:30:8"
									},
									"returnParameters": {
										"id": 1102,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1101,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1128,
												"src": "8089:7:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1100,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8089:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8088:9:8"
									},
									"scope": 1588,
									"src": "8022:237:8",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1259,
										"nodeType": "Block",
										"src": "8444:922:8",
										"statements": [
											{
												"assignments": [
													1137
												],
												"declarations": [
													{
														"constant": false,
														"id": 1137,
														"mutability": "mutable",
														"name": "result",
														"nameLocation": "8462:6:8",
														"nodeType": "VariableDeclaration",
														"scope": 1259,
														"src": "8454:14:8",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1136,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "8454:7:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1139,
												"initialValue": {
													"hexValue": "30",
													"id": 1138,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "8471:1:8",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_0_by_1",
														"typeString": "int_const 0"
													},
													"value": "0"
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "8454:18:8"
											},
											{
												"id": 1256,
												"nodeType": "UncheckedBlock",
												"src": "8482:855:8",
												"statements": [
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1144,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1142,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 1140,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1131,
																	"src": "8510:5:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "313238",
																	"id": 1141,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "8519:3:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_128_by_1",
																		"typeString": "int_const 128"
																	},
																	"value": "128"
																},
																"src": "8510:12:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 1143,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "8525:1:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "8510:16:8",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 1154,
														"nodeType": "IfStatement",
														"src": "8506:99:8",
														"trueBody": {
															"id": 1153,
															"nodeType": "Block",
															"src": "8528:77:8",
															"statements": [
																{
																	"expression": {
																		"id": 1147,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 1145,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1131,
																			"src": "8546:5:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": ">>=",
																		"rightHandSide": {
																			"hexValue": "313238",
																			"id": 1146,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "8556:3:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_128_by_1",
																				"typeString": "int_const 128"
																			},
																			"value": "128"
																		},
																		"src": "8546:13:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 1148,
																	"nodeType": "ExpressionStatement",
																	"src": "8546:13:8"
																},
																{
																	"expression": {
																		"id": 1151,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 1149,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1137,
																			"src": "8577:6:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "313238",
																			"id": 1150,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "8587:3:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_128_by_1",
																				"typeString": "int_const 128"
																			},
																			"value": "128"
																		},
																		"src": "8577:13:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 1152,
																	"nodeType": "ExpressionStatement",
																	"src": "8577:13:8"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1159,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1157,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 1155,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1131,
																	"src": "8622:5:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "3634",
																	"id": 1156,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "8631:2:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_64_by_1",
																		"typeString": "int_const 64"
																	},
																	"value": "64"
																},
																"src": "8622:11:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 1158,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "8636:1:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "8622:15:8",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 1169,
														"nodeType": "IfStatement",
														"src": "8618:96:8",
														"trueBody": {
															"id": 1168,
															"nodeType": "Block",
															"src": "8639:75:8",
															"statements": [
																{
																	"expression": {
																		"id": 1162,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 1160,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1131,
																			"src": "8657:5:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": ">>=",
																		"rightHandSide": {
																			"hexValue": "3634",
																			"id": 1161,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "8667:2:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_64_by_1",
																				"typeString": "int_const 64"
																			},
																			"value": "64"
																		},
																		"src": "8657:12:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 1163,
																	"nodeType": "ExpressionStatement",
																	"src": "8657:12:8"
																},
																{
																	"expression": {
																		"id": 1166,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 1164,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1137,
																			"src": "8687:6:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "3634",
																			"id": 1165,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "8697:2:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_64_by_1",
																				"typeString": "int_const 64"
																			},
																			"value": "64"
																		},
																		"src": "8687:12:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 1167,
																	"nodeType": "ExpressionStatement",
																	"src": "8687:12:8"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1174,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1172,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 1170,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1131,
																	"src": "8731:5:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "3332",
																	"id": 1171,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "8740:2:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_32_by_1",
																		"typeString": "int_const 32"
																	},
																	"value": "32"
																},
																"src": "8731:11:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 1173,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "8745:1:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "8731:15:8",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 1184,
														"nodeType": "IfStatement",
														"src": "8727:96:8",
														"trueBody": {
															"id": 1183,
															"nodeType": "Block",
															"src": "8748:75:8",
															"statements": [
																{
																	"expression": {
																		"id": 1177,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 1175,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1131,
																			"src": "8766:5:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": ">>=",
																		"rightHandSide": {
																			"hexValue": "3332",
																			"id": 1176,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "8776:2:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_32_by_1",
																				"typeString": "int_const 32"
																			},
																			"value": "32"
																		},
																		"src": "8766:12:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 1178,
																	"nodeType": "ExpressionStatement",
																	"src": "8766:12:8"
																},
																{
																	"expression": {
																		"id": 1181,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 1179,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1137,
																			"src": "8796:6:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "3332",
																			"id": 1180,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "8806:2:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_32_by_1",
																				"typeString": "int_const 32"
																			},
																			"value": "32"
																		},
																		"src": "8796:12:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 1182,
																	"nodeType": "ExpressionStatement",
																	"src": "8796:12:8"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1189,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1187,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 1185,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1131,
																	"src": "8840:5:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "3136",
																	"id": 1186,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "8849:2:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_16_by_1",
																		"typeString": "int_const 16"
																	},
																	"value": "16"
																},
																"src": "8840:11:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 1188,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "8854:1:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "8840:15:8",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 1199,
														"nodeType": "IfStatement",
														"src": "8836:96:8",
														"trueBody": {
															"id": 1198,
															"nodeType": "Block",
															"src": "8857:75:8",
															"statements": [
																{
																	"expression": {
																		"id": 1192,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 1190,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1131,
																			"src": "8875:5:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": ">>=",
																		"rightHandSide": {
																			"hexValue": "3136",
																			"id": 1191,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "8885:2:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_16_by_1",
																				"typeString": "int_const 16"
																			},
																			"value": "16"
																		},
																		"src": "8875:12:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 1193,
																	"nodeType": "ExpressionStatement",
																	"src": "8875:12:8"
																},
																{
																	"expression": {
																		"id": 1196,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 1194,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1137,
																			"src": "8905:6:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "3136",
																			"id": 1195,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "8915:2:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_16_by_1",
																				"typeString": "int_const 16"
																			},
																			"value": "16"
																		},
																		"src": "8905:12:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 1197,
																	"nodeType": "ExpressionStatement",
																	"src": "8905:12:8"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1204,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1202,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 1200,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1131,
																	"src": "8949:5:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "38",
																	"id": 1201,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "8958:1:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_8_by_1",
																		"typeString": "int_const 8"
																	},
																	"value": "8"
																},
																"src": "8949:10:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 1203,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "8962:1:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "8949:14:8",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 1214,
														"nodeType": "IfStatement",
														"src": "8945:93:8",
														"trueBody": {
															"id": 1213,
															"nodeType": "Block",
															"src": "8965:73:8",
															"statements": [
																{
																	"expression": {
																		"id": 1207,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 1205,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1131,
																			"src": "8983:5:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": ">>=",
																		"rightHandSide": {
																			"hexValue": "38",
																			"id": 1206,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "8993:1:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_8_by_1",
																				"typeString": "int_const 8"
																			},
																			"value": "8"
																		},
																		"src": "8983:11:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 1208,
																	"nodeType": "ExpressionStatement",
																	"src": "8983:11:8"
																},
																{
																	"expression": {
																		"id": 1211,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 1209,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1137,
																			"src": "9012:6:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "38",
																			"id": 1210,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "9022:1:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_8_by_1",
																				"typeString": "int_const 8"
																			},
																			"value": "8"
																		},
																		"src": "9012:11:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 1212,
																	"nodeType": "ExpressionStatement",
																	"src": "9012:11:8"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1219,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1217,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 1215,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1131,
																	"src": "9055:5:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "34",
																	"id": 1216,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "9064:1:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_4_by_1",
																		"typeString": "int_const 4"
																	},
																	"value": "4"
																},
																"src": "9055:10:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 1218,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "9068:1:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "9055:14:8",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 1229,
														"nodeType": "IfStatement",
														"src": "9051:93:8",
														"trueBody": {
															"id": 1228,
															"nodeType": "Block",
															"src": "9071:73:8",
															"statements": [
																{
																	"expression": {
																		"id": 1222,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 1220,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1131,
																			"src": "9089:5:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": ">>=",
																		"rightHandSide": {
																			"hexValue": "34",
																			"id": 1221,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "9099:1:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_4_by_1",
																				"typeString": "int_const 4"
																			},
																			"value": "4"
																		},
																		"src": "9089:11:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 1223,
																	"nodeType": "ExpressionStatement",
																	"src": "9089:11:8"
																},
																{
																	"expression": {
																		"id": 1226,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 1224,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1137,
																			"src": "9118:6:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "34",
																			"id": 1225,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "9128:1:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_4_by_1",
																				"typeString": "int_const 4"
																			},
																			"value": "4"
																		},
																		"src": "9118:11:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 1227,
																	"nodeType": "ExpressionStatement",
																	"src": "9118:11:8"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1234,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1232,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 1230,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1131,
																	"src": "9161:5:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "32",
																	"id": 1231,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "9170:1:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_2_by_1",
																		"typeString": "int_const 2"
																	},
																	"value": "2"
																},
																"src": "9161:10:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 1233,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "9174:1:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "9161:14:8",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 1244,
														"nodeType": "IfStatement",
														"src": "9157:93:8",
														"trueBody": {
															"id": 1243,
															"nodeType": "Block",
															"src": "9177:73:8",
															"statements": [
																{
																	"expression": {
																		"id": 1237,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 1235,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1131,
																			"src": "9195:5:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": ">>=",
																		"rightHandSide": {
																			"hexValue": "32",
																			"id": 1236,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "9205:1:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_2_by_1",
																				"typeString": "int_const 2"
																			},
																			"value": "2"
																		},
																		"src": "9195:11:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 1238,
																	"nodeType": "ExpressionStatement",
																	"src": "9195:11:8"
																},
																{
																	"expression": {
																		"id": 1241,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 1239,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1137,
																			"src": "9224:6:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "32",
																			"id": 1240,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "9234:1:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_2_by_1",
																				"typeString": "int_const 2"
																			},
																			"value": "2"
																		},
																		"src": "9224:11:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 1242,
																	"nodeType": "ExpressionStatement",
																	"src": "9224:11:8"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1249,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1247,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 1245,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1131,
																	"src": "9267:5:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 1246,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "9276:1:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "9267:10:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 1248,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "9280:1:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "9267:14:8",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 1255,
														"nodeType": "IfStatement",
														"src": "9263:64:8",
														"trueBody": {
															"id": 1254,
															"nodeType": "Block",
															"src": "9283:44:8",
															"statements": [
																{
																	"expression": {
																		"id": 1252,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 1250,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1137,
																			"src": "9301:6:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "31",
																			"id": 1251,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "9311:1:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_1_by_1",
																				"typeString": "int_const 1"
																			},
																			"value": "1"
																		},
																		"src": "9301:11:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 1253,
																	"nodeType": "ExpressionStatement",
																	"src": "9301:11:8"
																}
															]
														}
													}
												]
											},
											{
												"expression": {
													"id": 1257,
													"name": "result",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 1137,
													"src": "9353:6:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1135,
												"id": 1258,
												"nodeType": "Return",
												"src": "9346:13:8"
											}
										]
									},
									"documentation": {
										"id": 1129,
										"nodeType": "StructuredDocumentation",
										"src": "8265:113:8",
										"text": " @dev Return the log in base 2, rounded down, of a positive value.\n Returns 0 if given 0."
									},
									"id": 1260,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "log2",
									"nameLocation": "8392:4:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1132,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1131,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "8405:5:8",
												"nodeType": "VariableDeclaration",
												"scope": 1260,
												"src": "8397:13:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1130,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8397:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8396:15:8"
									},
									"returnParameters": {
										"id": 1135,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1134,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1260,
												"src": "8435:7:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1133,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8435:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8434:9:8"
									},
									"scope": 1588,
									"src": "8383:983:8",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1295,
										"nodeType": "Block",
										"src": "9599:165:8",
										"statements": [
											{
												"id": 1294,
												"nodeType": "UncheckedBlock",
												"src": "9609:149:8",
												"statements": [
													{
														"assignments": [
															1272
														],
														"declarations": [
															{
																"constant": false,
																"id": 1272,
																"mutability": "mutable",
																"name": "result",
																"nameLocation": "9641:6:8",
																"nodeType": "VariableDeclaration",
																"scope": 1294,
																"src": "9633:14:8",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 1271,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "9633:7:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 1276,
														"initialValue": {
															"arguments": [
																{
																	"id": 1274,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1263,
																	"src": "9655:5:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 1273,
																"name": "log2",
																"nodeType": "Identifier",
																"overloadedDeclarations": [
																	1260,
																	1296
																],
																"referencedDeclaration": 1260,
																"src": "9650:4:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_uint256_$",
																	"typeString": "function (uint256) pure returns (uint256)"
																}
															},
															"id": 1275,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "9650:11:8",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "9633:28:8"
													},
													{
														"expression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1292,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1277,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1272,
																"src": "9682:6:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "+",
															"rightExpression": {
																"components": [
																	{
																		"condition": {
																			"commonType": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			},
																			"id": 1287,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"commonType": {
																					"typeIdentifier": "t_enum$_Rounding_$730",
																					"typeString": "enum Math.Rounding"
																				},
																				"id": 1281,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 1278,
																					"name": "rounding",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1266,
																					"src": "9692:8:8",
																					"typeDescriptions": {
																						"typeIdentifier": "t_enum$_Rounding_$730",
																						"typeString": "enum Math.Rounding"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "==",
																				"rightExpression": {
																					"expression": {
																						"id": 1279,
																						"name": "Rounding",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 730,
																						"src": "9704:8:8",
																						"typeDescriptions": {
																							"typeIdentifier": "t_type$_t_enum$_Rounding_$730_$",
																							"typeString": "type(enum Math.Rounding)"
																						}
																					},
																					"id": 1280,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"lValueRequested": false,
																					"memberName": "Up",
																					"nodeType": "MemberAccess",
																					"referencedDeclaration": 728,
																					"src": "9704:11:8",
																					"typeDescriptions": {
																						"typeIdentifier": "t_enum$_Rounding_$730",
																						"typeString": "enum Math.Rounding"
																					}
																				},
																				"src": "9692:23:8",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "&&",
																			"rightExpression": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 1286,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"commonType": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					},
																					"id": 1284,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"leftExpression": {
																						"hexValue": "31",
																						"id": 1282,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": true,
																						"kind": "number",
																						"lValueRequested": false,
																						"nodeType": "Literal",
																						"src": "9719:1:8",
																						"typeDescriptions": {
																							"typeIdentifier": "t_rational_1_by_1",
																							"typeString": "int_const 1"
																						},
																						"value": "1"
																					},
																					"nodeType": "BinaryOperation",
																					"operator": "<<",
																					"rightExpression": {
																						"id": 1283,
																						"name": "result",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 1272,
																						"src": "9724:6:8",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"src": "9719:11:8",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "<",
																				"rightExpression": {
																					"id": 1285,
																					"name": "value",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1263,
																					"src": "9733:5:8",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "9719:19:8",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			},
																			"src": "9692:46:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		},
																		"falseExpression": {
																			"hexValue": "30",
																			"id": 1289,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "9745:1:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			},
																			"value": "0"
																		},
																		"id": 1290,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "Conditional",
																		"src": "9692:54:8",
																		"trueExpression": {
																			"hexValue": "31",
																			"id": 1288,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "9741:1:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_1_by_1",
																				"typeString": "int_const 1"
																			},
																			"value": "1"
																		},
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint8",
																			"typeString": "uint8"
																		}
																	}
																],
																"id": 1291,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "9691:56:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint8",
																	"typeString": "uint8"
																}
															},
															"src": "9682:65:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"functionReturnParameters": 1270,
														"id": 1293,
														"nodeType": "Return",
														"src": "9675:72:8"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 1261,
										"nodeType": "StructuredDocumentation",
										"src": "9372:142:8",
										"text": " @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."
									},
									"id": 1296,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "log2",
									"nameLocation": "9528:4:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1267,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1263,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "9541:5:8",
												"nodeType": "VariableDeclaration",
												"scope": 1296,
												"src": "9533:13:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1262,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "9533:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1266,
												"mutability": "mutable",
												"name": "rounding",
												"nameLocation": "9557:8:8",
												"nodeType": "VariableDeclaration",
												"scope": 1296,
												"src": "9548:17:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_enum$_Rounding_$730",
													"typeString": "enum Math.Rounding"
												},
												"typeName": {
													"id": 1265,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1264,
														"name": "Rounding",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 730,
														"src": "9548:8:8"
													},
													"referencedDeclaration": 730,
													"src": "9548:8:8",
													"typeDescriptions": {
														"typeIdentifier": "t_enum$_Rounding_$730",
														"typeString": "enum Math.Rounding"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9532:34:8"
									},
									"returnParameters": {
										"id": 1270,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1269,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1296,
												"src": "9590:7:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1268,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "9590:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9589:9:8"
									},
									"scope": 1588,
									"src": "9519:245:8",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1424,
										"nodeType": "Block",
										"src": "9951:828:8",
										"statements": [
											{
												"assignments": [
													1305
												],
												"declarations": [
													{
														"constant": false,
														"id": 1305,
														"mutability": "mutable",
														"name": "result",
														"nameLocation": "9969:6:8",
														"nodeType": "VariableDeclaration",
														"scope": 1424,
														"src": "9961:14:8",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1304,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "9961:7:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1307,
												"initialValue": {
													"hexValue": "30",
													"id": 1306,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "9978:1:8",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_0_by_1",
														"typeString": "int_const 0"
													},
													"value": "0"
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "9961:18:8"
											},
											{
												"id": 1421,
												"nodeType": "UncheckedBlock",
												"src": "9989:761:8",
												"statements": [
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1312,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1308,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1299,
																"src": "10017:5:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1",
																	"typeString": "int_const 1000...(57 digits omitted)...0000"
																},
																"id": 1311,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "3130",
																	"id": 1309,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10026:2:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_10_by_1",
																		"typeString": "int_const 10"
																	},
																	"value": "10"
																},
																"nodeType": "BinaryOperation",
																"operator": "**",
																"rightExpression": {
																	"hexValue": "3634",
																	"id": 1310,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10030:2:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_64_by_1",
																		"typeString": "int_const 64"
																	},
																	"value": "64"
																},
																"src": "10026:6:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1",
																	"typeString": "int_const 1000...(57 digits omitted)...0000"
																}
															},
															"src": "10017:15:8",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 1324,
														"nodeType": "IfStatement",
														"src": "10013:99:8",
														"trueBody": {
															"id": 1323,
															"nodeType": "Block",
															"src": "10034:78:8",
															"statements": [
																{
																	"expression": {
																		"id": 1317,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 1313,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1299,
																			"src": "10052:5:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "/=",
																		"rightHandSide": {
																			"commonType": {
																				"typeIdentifier": "t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1",
																				"typeString": "int_const 1000...(57 digits omitted)...0000"
																			},
																			"id": 1316,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"leftExpression": {
																				"hexValue": "3130",
																				"id": 1314,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "10061:2:8",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_10_by_1",
																					"typeString": "int_const 10"
																				},
																				"value": "10"
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "**",
																			"rightExpression": {
																				"hexValue": "3634",
																				"id": 1315,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "10065:2:8",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_64_by_1",
																					"typeString": "int_const 64"
																				},
																				"value": "64"
																			},
																			"src": "10061:6:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1",
																				"typeString": "int_const 1000...(57 digits omitted)...0000"
																			}
																		},
																		"src": "10052:15:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 1318,
																	"nodeType": "ExpressionStatement",
																	"src": "10052:15:8"
																},
																{
																	"expression": {
																		"id": 1321,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 1319,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1305,
																			"src": "10085:6:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "3634",
																			"id": 1320,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "10095:2:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_64_by_1",
																				"typeString": "int_const 64"
																			},
																			"value": "64"
																		},
																		"src": "10085:12:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 1322,
																	"nodeType": "ExpressionStatement",
																	"src": "10085:12:8"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1329,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1325,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1299,
																"src": "10129:5:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_rational_100000000000000000000000000000000_by_1",
																	"typeString": "int_const 1000...(25 digits omitted)...0000"
																},
																"id": 1328,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "3130",
																	"id": 1326,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10138:2:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_10_by_1",
																		"typeString": "int_const 10"
																	},
																	"value": "10"
																},
																"nodeType": "BinaryOperation",
																"operator": "**",
																"rightExpression": {
																	"hexValue": "3332",
																	"id": 1327,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10142:2:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_32_by_1",
																		"typeString": "int_const 32"
																	},
																	"value": "32"
																},
																"src": "10138:6:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_100000000000000000000000000000000_by_1",
																	"typeString": "int_const 1000...(25 digits omitted)...0000"
																}
															},
															"src": "10129:15:8",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 1341,
														"nodeType": "IfStatement",
														"src": "10125:99:8",
														"trueBody": {
															"id": 1340,
															"nodeType": "Block",
															"src": "10146:78:8",
															"statements": [
																{
																	"expression": {
																		"id": 1334,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 1330,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1299,
																			"src": "10164:5:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "/=",
																		"rightHandSide": {
																			"commonType": {
																				"typeIdentifier": "t_rational_100000000000000000000000000000000_by_1",
																				"typeString": "int_const 1000...(25 digits omitted)...0000"
																			},
																			"id": 1333,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"leftExpression": {
																				"hexValue": "3130",
																				"id": 1331,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "10173:2:8",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_10_by_1",
																					"typeString": "int_const 10"
																				},
																				"value": "10"
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "**",
																			"rightExpression": {
																				"hexValue": "3332",
																				"id": 1332,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "10177:2:8",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_32_by_1",
																					"typeString": "int_const 32"
																				},
																				"value": "32"
																			},
																			"src": "10173:6:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_100000000000000000000000000000000_by_1",
																				"typeString": "int_const 1000...(25 digits omitted)...0000"
																			}
																		},
																		"src": "10164:15:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 1335,
																	"nodeType": "ExpressionStatement",
																	"src": "10164:15:8"
																},
																{
																	"expression": {
																		"id": 1338,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 1336,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1305,
																			"src": "10197:6:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "3332",
																			"id": 1337,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "10207:2:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_32_by_1",
																				"typeString": "int_const 32"
																			},
																			"value": "32"
																		},
																		"src": "10197:12:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 1339,
																	"nodeType": "ExpressionStatement",
																	"src": "10197:12:8"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1346,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1342,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1299,
																"src": "10241:5:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_rational_10000000000000000_by_1",
																	"typeString": "int_const 10000000000000000"
																},
																"id": 1345,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "3130",
																	"id": 1343,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10250:2:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_10_by_1",
																		"typeString": "int_const 10"
																	},
																	"value": "10"
																},
																"nodeType": "BinaryOperation",
																"operator": "**",
																"rightExpression": {
																	"hexValue": "3136",
																	"id": 1344,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10254:2:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_16_by_1",
																		"typeString": "int_const 16"
																	},
																	"value": "16"
																},
																"src": "10250:6:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_10000000000000000_by_1",
																	"typeString": "int_const 10000000000000000"
																}
															},
															"src": "10241:15:8",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 1358,
														"nodeType": "IfStatement",
														"src": "10237:99:8",
														"trueBody": {
															"id": 1357,
															"nodeType": "Block",
															"src": "10258:78:8",
															"statements": [
																{
																	"expression": {
																		"id": 1351,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 1347,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1299,
																			"src": "10276:5:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "/=",
																		"rightHandSide": {
																			"commonType": {
																				"typeIdentifier": "t_rational_10000000000000000_by_1",
																				"typeString": "int_const 10000000000000000"
																			},
																			"id": 1350,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"leftExpression": {
																				"hexValue": "3130",
																				"id": 1348,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "10285:2:8",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_10_by_1",
																					"typeString": "int_const 10"
																				},
																				"value": "10"
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "**",
																			"rightExpression": {
																				"hexValue": "3136",
																				"id": 1349,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "10289:2:8",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_16_by_1",
																					"typeString": "int_const 16"
																				},
																				"value": "16"
																			},
																			"src": "10285:6:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_10000000000000000_by_1",
																				"typeString": "int_const 10000000000000000"
																			}
																		},
																		"src": "10276:15:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 1352,
																	"nodeType": "ExpressionStatement",
																	"src": "10276:15:8"
																},
																{
																	"expression": {
																		"id": 1355,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 1353,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1305,
																			"src": "10309:6:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "3136",
																			"id": 1354,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "10319:2:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_16_by_1",
																				"typeString": "int_const 16"
																			},
																			"value": "16"
																		},
																		"src": "10309:12:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 1356,
																	"nodeType": "ExpressionStatement",
																	"src": "10309:12:8"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1363,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1359,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1299,
																"src": "10353:5:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_rational_100000000_by_1",
																	"typeString": "int_const 100000000"
																},
																"id": 1362,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "3130",
																	"id": 1360,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10362:2:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_10_by_1",
																		"typeString": "int_const 10"
																	},
																	"value": "10"
																},
																"nodeType": "BinaryOperation",
																"operator": "**",
																"rightExpression": {
																	"hexValue": "38",
																	"id": 1361,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10366:1:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_8_by_1",
																		"typeString": "int_const 8"
																	},
																	"value": "8"
																},
																"src": "10362:5:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_100000000_by_1",
																	"typeString": "int_const 100000000"
																}
															},
															"src": "10353:14:8",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 1375,
														"nodeType": "IfStatement",
														"src": "10349:96:8",
														"trueBody": {
															"id": 1374,
															"nodeType": "Block",
															"src": "10369:76:8",
															"statements": [
																{
																	"expression": {
																		"id": 1368,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 1364,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1299,
																			"src": "10387:5:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "/=",
																		"rightHandSide": {
																			"commonType": {
																				"typeIdentifier": "t_rational_100000000_by_1",
																				"typeString": "int_const 100000000"
																			},
																			"id": 1367,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"leftExpression": {
																				"hexValue": "3130",
																				"id": 1365,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "10396:2:8",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_10_by_1",
																					"typeString": "int_const 10"
																				},
																				"value": "10"
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "**",
																			"rightExpression": {
																				"hexValue": "38",
																				"id": 1366,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "10400:1:8",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_8_by_1",
																					"typeString": "int_const 8"
																				},
																				"value": "8"
																			},
																			"src": "10396:5:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_100000000_by_1",
																				"typeString": "int_const 100000000"
																			}
																		},
																		"src": "10387:14:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 1369,
																	"nodeType": "ExpressionStatement",
																	"src": "10387:14:8"
																},
																{
																	"expression": {
																		"id": 1372,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 1370,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1305,
																			"src": "10419:6:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "38",
																			"id": 1371,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "10429:1:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_8_by_1",
																				"typeString": "int_const 8"
																			},
																			"value": "8"
																		},
																		"src": "10419:11:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 1373,
																	"nodeType": "ExpressionStatement",
																	"src": "10419:11:8"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1380,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1376,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1299,
																"src": "10462:5:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_rational_10000_by_1",
																	"typeString": "int_const 10000"
																},
																"id": 1379,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "3130",
																	"id": 1377,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10471:2:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_10_by_1",
																		"typeString": "int_const 10"
																	},
																	"value": "10"
																},
																"nodeType": "BinaryOperation",
																"operator": "**",
																"rightExpression": {
																	"hexValue": "34",
																	"id": 1378,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10475:1:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_4_by_1",
																		"typeString": "int_const 4"
																	},
																	"value": "4"
																},
																"src": "10471:5:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_10000_by_1",
																	"typeString": "int_const 10000"
																}
															},
															"src": "10462:14:8",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 1392,
														"nodeType": "IfStatement",
														"src": "10458:96:8",
														"trueBody": {
															"id": 1391,
															"nodeType": "Block",
															"src": "10478:76:8",
															"statements": [
																{
																	"expression": {
																		"id": 1385,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 1381,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1299,
																			"src": "10496:5:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "/=",
																		"rightHandSide": {
																			"commonType": {
																				"typeIdentifier": "t_rational_10000_by_1",
																				"typeString": "int_const 10000"
																			},
																			"id": 1384,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"leftExpression": {
																				"hexValue": "3130",
																				"id": 1382,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "10505:2:8",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_10_by_1",
																					"typeString": "int_const 10"
																				},
																				"value": "10"
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "**",
																			"rightExpression": {
																				"hexValue": "34",
																				"id": 1383,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "10509:1:8",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_4_by_1",
																					"typeString": "int_const 4"
																				},
																				"value": "4"
																			},
																			"src": "10505:5:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_10000_by_1",
																				"typeString": "int_const 10000"
																			}
																		},
																		"src": "10496:14:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 1386,
																	"nodeType": "ExpressionStatement",
																	"src": "10496:14:8"
																},
																{
																	"expression": {
																		"id": 1389,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 1387,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1305,
																			"src": "10528:6:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "34",
																			"id": 1388,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "10538:1:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_4_by_1",
																				"typeString": "int_const 4"
																			},
																			"value": "4"
																		},
																		"src": "10528:11:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 1390,
																	"nodeType": "ExpressionStatement",
																	"src": "10528:11:8"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1397,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1393,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1299,
																"src": "10571:5:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_rational_100_by_1",
																	"typeString": "int_const 100"
																},
																"id": 1396,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "3130",
																	"id": 1394,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10580:2:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_10_by_1",
																		"typeString": "int_const 10"
																	},
																	"value": "10"
																},
																"nodeType": "BinaryOperation",
																"operator": "**",
																"rightExpression": {
																	"hexValue": "32",
																	"id": 1395,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10584:1:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_2_by_1",
																		"typeString": "int_const 2"
																	},
																	"value": "2"
																},
																"src": "10580:5:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_100_by_1",
																	"typeString": "int_const 100"
																}
															},
															"src": "10571:14:8",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 1409,
														"nodeType": "IfStatement",
														"src": "10567:96:8",
														"trueBody": {
															"id": 1408,
															"nodeType": "Block",
															"src": "10587:76:8",
															"statements": [
																{
																	"expression": {
																		"id": 1402,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 1398,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1299,
																			"src": "10605:5:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "/=",
																		"rightHandSide": {
																			"commonType": {
																				"typeIdentifier": "t_rational_100_by_1",
																				"typeString": "int_const 100"
																			},
																			"id": 1401,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"leftExpression": {
																				"hexValue": "3130",
																				"id": 1399,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "10614:2:8",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_10_by_1",
																					"typeString": "int_const 10"
																				},
																				"value": "10"
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "**",
																			"rightExpression": {
																				"hexValue": "32",
																				"id": 1400,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "10618:1:8",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_2_by_1",
																					"typeString": "int_const 2"
																				},
																				"value": "2"
																			},
																			"src": "10614:5:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_100_by_1",
																				"typeString": "int_const 100"
																			}
																		},
																		"src": "10605:14:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 1403,
																	"nodeType": "ExpressionStatement",
																	"src": "10605:14:8"
																},
																{
																	"expression": {
																		"id": 1406,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 1404,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1305,
																			"src": "10637:6:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "32",
																			"id": 1405,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "10647:1:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_2_by_1",
																				"typeString": "int_const 2"
																			},
																			"value": "2"
																		},
																		"src": "10637:11:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 1407,
																	"nodeType": "ExpressionStatement",
																	"src": "10637:11:8"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1414,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1410,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1299,
																"src": "10680:5:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_rational_10_by_1",
																	"typeString": "int_const 10"
																},
																"id": 1413,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "3130",
																	"id": 1411,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10689:2:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_10_by_1",
																		"typeString": "int_const 10"
																	},
																	"value": "10"
																},
																"nodeType": "BinaryOperation",
																"operator": "**",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 1412,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10693:1:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "10689:5:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_10_by_1",
																	"typeString": "int_const 10"
																}
															},
															"src": "10680:14:8",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 1420,
														"nodeType": "IfStatement",
														"src": "10676:64:8",
														"trueBody": {
															"id": 1419,
															"nodeType": "Block",
															"src": "10696:44:8",
															"statements": [
																{
																	"expression": {
																		"id": 1417,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 1415,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1305,
																			"src": "10714:6:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "31",
																			"id": 1416,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "10724:1:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_1_by_1",
																				"typeString": "int_const 1"
																			},
																			"value": "1"
																		},
																		"src": "10714:11:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 1418,
																	"nodeType": "ExpressionStatement",
																	"src": "10714:11:8"
																}
															]
														}
													}
												]
											},
											{
												"expression": {
													"id": 1422,
													"name": "result",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 1305,
													"src": "10766:6:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1303,
												"id": 1423,
												"nodeType": "Return",
												"src": "10759:13:8"
											}
										]
									},
									"documentation": {
										"id": 1297,
										"nodeType": "StructuredDocumentation",
										"src": "9770:114:8",
										"text": " @dev Return the log in base 10, rounded down, of a positive value.\n Returns 0 if given 0."
									},
									"id": 1425,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "log10",
									"nameLocation": "9898:5:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1300,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1299,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "9912:5:8",
												"nodeType": "VariableDeclaration",
												"scope": 1425,
												"src": "9904:13:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1298,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "9904:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9903:15:8"
									},
									"returnParameters": {
										"id": 1303,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1302,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1425,
												"src": "9942:7:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1301,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "9942:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9941:9:8"
									},
									"scope": 1588,
									"src": "9889:890:8",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1460,
										"nodeType": "Block",
										"src": "11014:165:8",
										"statements": [
											{
												"id": 1459,
												"nodeType": "UncheckedBlock",
												"src": "11024:149:8",
												"statements": [
													{
														"assignments": [
															1437
														],
														"declarations": [
															{
																"constant": false,
																"id": 1437,
																"mutability": "mutable",
																"name": "result",
																"nameLocation": "11056:6:8",
																"nodeType": "VariableDeclaration",
																"scope": 1459,
																"src": "11048:14:8",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 1436,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "11048:7:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 1441,
														"initialValue": {
															"arguments": [
																{
																	"id": 1439,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1428,
																	"src": "11071:5:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 1438,
																"name": "log10",
																"nodeType": "Identifier",
																"overloadedDeclarations": [
																	1425,
																	1461
																],
																"referencedDeclaration": 1425,
																"src": "11065:5:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_uint256_$",
																	"typeString": "function (uint256) pure returns (uint256)"
																}
															},
															"id": 1440,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "11065:12:8",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "11048:29:8"
													},
													{
														"expression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1457,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1442,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1437,
																"src": "11098:6:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "+",
															"rightExpression": {
																"components": [
																	{
																		"condition": {
																			"commonType": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			},
																			"id": 1452,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"commonType": {
																					"typeIdentifier": "t_enum$_Rounding_$730",
																					"typeString": "enum Math.Rounding"
																				},
																				"id": 1446,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 1443,
																					"name": "rounding",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1431,
																					"src": "11108:8:8",
																					"typeDescriptions": {
																						"typeIdentifier": "t_enum$_Rounding_$730",
																						"typeString": "enum Math.Rounding"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "==",
																				"rightExpression": {
																					"expression": {
																						"id": 1444,
																						"name": "Rounding",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 730,
																						"src": "11120:8:8",
																						"typeDescriptions": {
																							"typeIdentifier": "t_type$_t_enum$_Rounding_$730_$",
																							"typeString": "type(enum Math.Rounding)"
																						}
																					},
																					"id": 1445,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"lValueRequested": false,
																					"memberName": "Up",
																					"nodeType": "MemberAccess",
																					"referencedDeclaration": 728,
																					"src": "11120:11:8",
																					"typeDescriptions": {
																						"typeIdentifier": "t_enum$_Rounding_$730",
																						"typeString": "enum Math.Rounding"
																					}
																				},
																				"src": "11108:23:8",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "&&",
																			"rightExpression": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 1451,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"commonType": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					},
																					"id": 1449,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"leftExpression": {
																						"hexValue": "3130",
																						"id": 1447,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": true,
																						"kind": "number",
																						"lValueRequested": false,
																						"nodeType": "Literal",
																						"src": "11135:2:8",
																						"typeDescriptions": {
																							"typeIdentifier": "t_rational_10_by_1",
																							"typeString": "int_const 10"
																						},
																						"value": "10"
																					},
																					"nodeType": "BinaryOperation",
																					"operator": "**",
																					"rightExpression": {
																						"id": 1448,
																						"name": "result",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 1437,
																						"src": "11139:6:8",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"src": "11135:10:8",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "<",
																				"rightExpression": {
																					"id": 1450,
																					"name": "value",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1428,
																					"src": "11148:5:8",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "11135:18:8",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			},
																			"src": "11108:45:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		},
																		"falseExpression": {
																			"hexValue": "30",
																			"id": 1454,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "11160:1:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			},
																			"value": "0"
																		},
																		"id": 1455,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "Conditional",
																		"src": "11108:53:8",
																		"trueExpression": {
																			"hexValue": "31",
																			"id": 1453,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "11156:1:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_1_by_1",
																				"typeString": "int_const 1"
																			},
																			"value": "1"
																		},
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint8",
																			"typeString": "uint8"
																		}
																	}
																],
																"id": 1456,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "11107:55:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint8",
																	"typeString": "uint8"
																}
															},
															"src": "11098:64:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"functionReturnParameters": 1435,
														"id": 1458,
														"nodeType": "Return",
														"src": "11091:71:8"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 1426,
										"nodeType": "StructuredDocumentation",
										"src": "10785:143:8",
										"text": " @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."
									},
									"id": 1461,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "log10",
									"nameLocation": "10942:5:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1432,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1428,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "10956:5:8",
												"nodeType": "VariableDeclaration",
												"scope": 1461,
												"src": "10948:13:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1427,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "10948:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1431,
												"mutability": "mutable",
												"name": "rounding",
												"nameLocation": "10972:8:8",
												"nodeType": "VariableDeclaration",
												"scope": 1461,
												"src": "10963:17:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_enum$_Rounding_$730",
													"typeString": "enum Math.Rounding"
												},
												"typeName": {
													"id": 1430,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1429,
														"name": "Rounding",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 730,
														"src": "10963:8:8"
													},
													"referencedDeclaration": 730,
													"src": "10963:8:8",
													"typeDescriptions": {
														"typeIdentifier": "t_enum$_Rounding_$730",
														"typeString": "enum Math.Rounding"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10947:34:8"
									},
									"returnParameters": {
										"id": 1435,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1434,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1461,
												"src": "11005:7:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1433,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "11005:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "11004:9:8"
									},
									"scope": 1588,
									"src": "10933:246:8",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1547,
										"nodeType": "Block",
										"src": "11493:600:8",
										"statements": [
											{
												"assignments": [
													1470
												],
												"declarations": [
													{
														"constant": false,
														"id": 1470,
														"mutability": "mutable",
														"name": "result",
														"nameLocation": "11511:6:8",
														"nodeType": "VariableDeclaration",
														"scope": 1547,
														"src": "11503:14:8",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1469,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "11503:7:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1472,
												"initialValue": {
													"hexValue": "30",
													"id": 1471,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "11520:1:8",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_0_by_1",
														"typeString": "int_const 0"
													},
													"value": "0"
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "11503:18:8"
											},
											{
												"id": 1544,
												"nodeType": "UncheckedBlock",
												"src": "11531:533:8",
												"statements": [
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1477,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1475,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 1473,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1464,
																	"src": "11559:5:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "313238",
																	"id": 1474,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "11568:3:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_128_by_1",
																		"typeString": "int_const 128"
																	},
																	"value": "128"
																},
																"src": "11559:12:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 1476,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "11574:1:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "11559:16:8",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 1487,
														"nodeType": "IfStatement",
														"src": "11555:98:8",
														"trueBody": {
															"id": 1486,
															"nodeType": "Block",
															"src": "11577:76:8",
															"statements": [
																{
																	"expression": {
																		"id": 1480,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 1478,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1464,
																			"src": "11595:5:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": ">>=",
																		"rightHandSide": {
																			"hexValue": "313238",
																			"id": 1479,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "11605:3:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_128_by_1",
																				"typeString": "int_const 128"
																			},
																			"value": "128"
																		},
																		"src": "11595:13:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 1481,
																	"nodeType": "ExpressionStatement",
																	"src": "11595:13:8"
																},
																{
																	"expression": {
																		"id": 1484,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 1482,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1470,
																			"src": "11626:6:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "3136",
																			"id": 1483,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "11636:2:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_16_by_1",
																				"typeString": "int_const 16"
																			},
																			"value": "16"
																		},
																		"src": "11626:12:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 1485,
																	"nodeType": "ExpressionStatement",
																	"src": "11626:12:8"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1492,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1490,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 1488,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1464,
																	"src": "11670:5:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "3634",
																	"id": 1489,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "11679:2:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_64_by_1",
																		"typeString": "int_const 64"
																	},
																	"value": "64"
																},
																"src": "11670:11:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 1491,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "11684:1:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "11670:15:8",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 1502,
														"nodeType": "IfStatement",
														"src": "11666:95:8",
														"trueBody": {
															"id": 1501,
															"nodeType": "Block",
															"src": "11687:74:8",
															"statements": [
																{
																	"expression": {
																		"id": 1495,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 1493,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1464,
																			"src": "11705:5:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": ">>=",
																		"rightHandSide": {
																			"hexValue": "3634",
																			"id": 1494,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "11715:2:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_64_by_1",
																				"typeString": "int_const 64"
																			},
																			"value": "64"
																		},
																		"src": "11705:12:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 1496,
																	"nodeType": "ExpressionStatement",
																	"src": "11705:12:8"
																},
																{
																	"expression": {
																		"id": 1499,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 1497,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1470,
																			"src": "11735:6:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "38",
																			"id": 1498,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "11745:1:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_8_by_1",
																				"typeString": "int_const 8"
																			},
																			"value": "8"
																		},
																		"src": "11735:11:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 1500,
																	"nodeType": "ExpressionStatement",
																	"src": "11735:11:8"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1507,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1505,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 1503,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1464,
																	"src": "11778:5:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "3332",
																	"id": 1504,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "11787:2:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_32_by_1",
																		"typeString": "int_const 32"
																	},
																	"value": "32"
																},
																"src": "11778:11:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 1506,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "11792:1:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "11778:15:8",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 1517,
														"nodeType": "IfStatement",
														"src": "11774:95:8",
														"trueBody": {
															"id": 1516,
															"nodeType": "Block",
															"src": "11795:74:8",
															"statements": [
																{
																	"expression": {
																		"id": 1510,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 1508,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1464,
																			"src": "11813:5:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": ">>=",
																		"rightHandSide": {
																			"hexValue": "3332",
																			"id": 1509,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "11823:2:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_32_by_1",
																				"typeString": "int_const 32"
																			},
																			"value": "32"
																		},
																		"src": "11813:12:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 1511,
																	"nodeType": "ExpressionStatement",
																	"src": "11813:12:8"
																},
																{
																	"expression": {
																		"id": 1514,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 1512,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1470,
																			"src": "11843:6:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "34",
																			"id": 1513,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "11853:1:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_4_by_1",
																				"typeString": "int_const 4"
																			},
																			"value": "4"
																		},
																		"src": "11843:11:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 1515,
																	"nodeType": "ExpressionStatement",
																	"src": "11843:11:8"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1522,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1520,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 1518,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1464,
																	"src": "11886:5:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "3136",
																	"id": 1519,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "11895:2:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_16_by_1",
																		"typeString": "int_const 16"
																	},
																	"value": "16"
																},
																"src": "11886:11:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 1521,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "11900:1:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "11886:15:8",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 1532,
														"nodeType": "IfStatement",
														"src": "11882:95:8",
														"trueBody": {
															"id": 1531,
															"nodeType": "Block",
															"src": "11903:74:8",
															"statements": [
																{
																	"expression": {
																		"id": 1525,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 1523,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1464,
																			"src": "11921:5:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": ">>=",
																		"rightHandSide": {
																			"hexValue": "3136",
																			"id": 1524,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "11931:2:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_16_by_1",
																				"typeString": "int_const 16"
																			},
																			"value": "16"
																		},
																		"src": "11921:12:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 1526,
																	"nodeType": "ExpressionStatement",
																	"src": "11921:12:8"
																},
																{
																	"expression": {
																		"id": 1529,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 1527,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1470,
																			"src": "11951:6:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "32",
																			"id": 1528,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "11961:1:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_2_by_1",
																				"typeString": "int_const 2"
																			},
																			"value": "2"
																		},
																		"src": "11951:11:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 1530,
																	"nodeType": "ExpressionStatement",
																	"src": "11951:11:8"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1537,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1535,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 1533,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1464,
																	"src": "11994:5:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "38",
																	"id": 1534,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "12003:1:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_8_by_1",
																		"typeString": "int_const 8"
																	},
																	"value": "8"
																},
																"src": "11994:10:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 1536,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "12007:1:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "11994:14:8",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 1543,
														"nodeType": "IfStatement",
														"src": "11990:64:8",
														"trueBody": {
															"id": 1542,
															"nodeType": "Block",
															"src": "12010:44:8",
															"statements": [
																{
																	"expression": {
																		"id": 1540,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 1538,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1470,
																			"src": "12028:6:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "31",
																			"id": 1539,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "12038:1:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_1_by_1",
																				"typeString": "int_const 1"
																			},
																			"value": "1"
																		},
																		"src": "12028:11:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 1541,
																	"nodeType": "ExpressionStatement",
																	"src": "12028:11:8"
																}
															]
														}
													}
												]
											},
											{
												"expression": {
													"id": 1545,
													"name": "result",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 1470,
													"src": "12080:6:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1468,
												"id": 1546,
												"nodeType": "Return",
												"src": "12073:13:8"
											}
										]
									},
									"documentation": {
										"id": 1462,
										"nodeType": "StructuredDocumentation",
										"src": "11185:240:8",
										"text": " @dev Return the log in base 256, rounded down, of a positive value.\n Returns 0 if given 0.\n Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string."
									},
									"id": 1548,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "log256",
									"nameLocation": "11439:6:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1465,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1464,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "11454:5:8",
												"nodeType": "VariableDeclaration",
												"scope": 1548,
												"src": "11446:13:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1463,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "11446:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "11445:15:8"
									},
									"returnParameters": {
										"id": 1468,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1467,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1548,
												"src": "11484:7:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1466,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "11484:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "11483:9:8"
									},
									"scope": 1588,
									"src": "11430:663:8",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1586,
										"nodeType": "Block",
										"src": "12329:173:8",
										"statements": [
											{
												"id": 1585,
												"nodeType": "UncheckedBlock",
												"src": "12339:157:8",
												"statements": [
													{
														"assignments": [
															1560
														],
														"declarations": [
															{
																"constant": false,
																"id": 1560,
																"mutability": "mutable",
																"name": "result",
																"nameLocation": "12371:6:8",
																"nodeType": "VariableDeclaration",
																"scope": 1585,
																"src": "12363:14:8",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 1559,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "12363:7:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 1564,
														"initialValue": {
															"arguments": [
																{
																	"id": 1562,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1551,
																	"src": "12387:5:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 1561,
																"name": "log256",
																"nodeType": "Identifier",
																"overloadedDeclarations": [
																	1548,
																	1587
																],
																"referencedDeclaration": 1548,
																"src": "12380:6:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_uint256_$",
																	"typeString": "function (uint256) pure returns (uint256)"
																}
															},
															"id": 1563,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "12380:13:8",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "12363:30:8"
													},
													{
														"expression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1583,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1565,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1560,
																"src": "12414:6:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "+",
															"rightExpression": {
																"components": [
																	{
																		"condition": {
																			"commonType": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			},
																			"id": 1578,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"commonType": {
																					"typeIdentifier": "t_enum$_Rounding_$730",
																					"typeString": "enum Math.Rounding"
																				},
																				"id": 1569,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 1566,
																					"name": "rounding",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1554,
																					"src": "12424:8:8",
																					"typeDescriptions": {
																						"typeIdentifier": "t_enum$_Rounding_$730",
																						"typeString": "enum Math.Rounding"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "==",
																				"rightExpression": {
																					"expression": {
																						"id": 1567,
																						"name": "Rounding",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 730,
																						"src": "12436:8:8",
																						"typeDescriptions": {
																							"typeIdentifier": "t_type$_t_enum$_Rounding_$730_$",
																							"typeString": "type(enum Math.Rounding)"
																						}
																					},
																					"id": 1568,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"lValueRequested": false,
																					"memberName": "Up",
																					"nodeType": "MemberAccess",
																					"referencedDeclaration": 728,
																					"src": "12436:11:8",
																					"typeDescriptions": {
																						"typeIdentifier": "t_enum$_Rounding_$730",
																						"typeString": "enum Math.Rounding"
																					}
																				},
																				"src": "12424:23:8",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "&&",
																			"rightExpression": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 1577,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"commonType": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					},
																					"id": 1575,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"leftExpression": {
																						"hexValue": "31",
																						"id": 1570,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": true,
																						"kind": "number",
																						"lValueRequested": false,
																						"nodeType": "Literal",
																						"src": "12451:1:8",
																						"typeDescriptions": {
																							"typeIdentifier": "t_rational_1_by_1",
																							"typeString": "int_const 1"
																						},
																						"value": "1"
																					},
																					"nodeType": "BinaryOperation",
																					"operator": "<<",
																					"rightExpression": {
																						"components": [
																							{
																								"commonType": {
																									"typeIdentifier": "t_uint256",
																									"typeString": "uint256"
																								},
																								"id": 1573,
																								"isConstant": false,
																								"isLValue": false,
																								"isPure": false,
																								"lValueRequested": false,
																								"leftExpression": {
																									"id": 1571,
																									"name": "result",
																									"nodeType": "Identifier",
																									"overloadedDeclarations": [],
																									"referencedDeclaration": 1560,
																									"src": "12457:6:8",
																									"typeDescriptions": {
																										"typeIdentifier": "t_uint256",
																										"typeString": "uint256"
																									}
																								},
																								"nodeType": "BinaryOperation",
																								"operator": "*",
																								"rightExpression": {
																									"hexValue": "38",
																									"id": 1572,
																									"isConstant": false,
																									"isLValue": false,
																									"isPure": true,
																									"kind": "number",
																									"lValueRequested": false,
																									"nodeType": "Literal",
																									"src": "12466:1:8",
																									"typeDescriptions": {
																										"typeIdentifier": "t_rational_8_by_1",
																										"typeString": "int_const 8"
																									},
																									"value": "8"
																								},
																								"src": "12457:10:8",
																								"typeDescriptions": {
																									"typeIdentifier": "t_uint256",
																									"typeString": "uint256"
																								}
																							}
																						],
																						"id": 1574,
																						"isConstant": false,
																						"isInlineArray": false,
																						"isLValue": false,
																						"isPure": false,
																						"lValueRequested": false,
																						"nodeType": "TupleExpression",
																						"src": "12456:12:8",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"src": "12451:17:8",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "<",
																				"rightExpression": {
																					"id": 1576,
																					"name": "value",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1551,
																					"src": "12471:5:8",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "12451:25:8",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			},
																			"src": "12424:52:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		},
																		"falseExpression": {
																			"hexValue": "30",
																			"id": 1580,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "12483:1:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			},
																			"value": "0"
																		},
																		"id": 1581,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "Conditional",
																		"src": "12424:60:8",
																		"trueExpression": {
																			"hexValue": "31",
																			"id": 1579,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "12479:1:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_1_by_1",
																				"typeString": "int_const 1"
																			},
																			"value": "1"
																		},
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint8",
																			"typeString": "uint8"
																		}
																	}
																],
																"id": 1582,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "12423:62:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint8",
																	"typeString": "uint8"
																}
															},
															"src": "12414:71:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"functionReturnParameters": 1558,
														"id": 1584,
														"nodeType": "Return",
														"src": "12407:78:8"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 1549,
										"nodeType": "StructuredDocumentation",
										"src": "12099:143:8",
										"text": " @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."
									},
									"id": 1587,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "log256",
									"nameLocation": "12256:6:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1555,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1551,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "12271:5:8",
												"nodeType": "VariableDeclaration",
												"scope": 1587,
												"src": "12263:13:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1550,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "12263:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1554,
												"mutability": "mutable",
												"name": "rounding",
												"nameLocation": "12287:8:8",
												"nodeType": "VariableDeclaration",
												"scope": 1587,
												"src": "12278:17:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_enum$_Rounding_$730",
													"typeString": "enum Math.Rounding"
												},
												"typeName": {
													"id": 1553,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1552,
														"name": "Rounding",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 730,
														"src": "12278:8:8"
													},
													"referencedDeclaration": 730,
													"src": "12278:8:8",
													"typeDescriptions": {
														"typeIdentifier": "t_enum$_Rounding_$730",
														"typeString": "enum Math.Rounding"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "12262:34:8"
									},
									"returnParameters": {
										"id": 1558,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1557,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1587,
												"src": "12320:7:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1556,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "12320:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "12319:9:8"
									},
									"scope": 1588,
									"src": "12247:255:8",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 1589,
							"src": "202:12302:8",
							"usedErrors": []
						}
					],
					"src": "103:12402:8"
				},
				"id": 8
			},
			"Midas/Midas_main/src/LPToken.sol": {
				"ast": {
					"absolutePath": "Midas/Midas_main/src/LPToken.sol",
					"exportedSymbols": {
						"Address": [
							490
						],
						"Context": [
							512
						],
						"ERC165": [
							711
						],
						"IERC165": [
							723
						],
						"IERC721": [
							115
						],
						"IERC721Metadata": [
							160
						],
						"IERC721Receiver": [
							133
						],
						"LPToken": [
							2613
						],
						"Math": [
							1588
						],
						"Strings": [
							687
						]
					},
					"id": 2614,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1590,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "107:23:9"
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC721/IERC721.sol",
							"file": "@openzeppelin/contracts/token/ERC721/IERC721.sol",
							"id": 1591,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 2614,
							"sourceUnit": 116,
							"src": "132:58:9",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol",
							"file": "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol",
							"id": 1592,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 2614,
							"sourceUnit": 134,
							"src": "191:66:9",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol",
							"file": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol",
							"id": 1593,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 2614,
							"sourceUnit": 161,
							"src": "258:77:9",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/utils/Address.sol",
							"file": "@openzeppelin/contracts/utils/Address.sol",
							"id": 1594,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 2614,
							"sourceUnit": 491,
							"src": "336:51:9",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/utils/Context.sol",
							"file": "@openzeppelin/contracts/utils/Context.sol",
							"id": 1595,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 2614,
							"sourceUnit": 513,
							"src": "388:51:9",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/utils/Strings.sol",
							"file": "@openzeppelin/contracts/utils/Strings.sol",
							"id": 1596,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 2614,
							"sourceUnit": 688,
							"src": "440:51:9",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/utils/introspection/ERC165.sol",
							"file": "@openzeppelin/contracts/utils/introspection/ERC165.sol",
							"id": 1597,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 2614,
							"sourceUnit": 712,
							"src": "492:64:9",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 1599,
										"name": "Context",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 512,
										"src": "765:7:9"
									},
									"id": 1600,
									"nodeType": "InheritanceSpecifier",
									"src": "765:7:9"
								},
								{
									"baseName": {
										"id": 1601,
										"name": "ERC165",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 711,
										"src": "774:6:9"
									},
									"id": 1602,
									"nodeType": "InheritanceSpecifier",
									"src": "774:6:9"
								},
								{
									"baseName": {
										"id": 1603,
										"name": "IERC721",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 115,
										"src": "782:7:9"
									},
									"id": 1604,
									"nodeType": "InheritanceSpecifier",
									"src": "782:7:9"
								},
								{
									"baseName": {
										"id": 1605,
										"name": "IERC721Metadata",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 160,
										"src": "791:15:9"
									},
									"id": 1606,
									"nodeType": "InheritanceSpecifier",
									"src": "791:15:9"
								}
							],
							"canonicalName": "LPToken",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 1598,
								"nodeType": "StructuredDocumentation",
								"src": "558:186:9",
								"text": "@title Midas ERC721 LP Token\n @author midaswap\n @notice LP token wrapped the Midaswap position information which provides interfaces to liquidity providers from Midaswap Pair."
							},
							"fullyImplemented": true,
							"id": 2613,
							"linearizedBaseContracts": [
								2613,
								160,
								115,
								711,
								723,
								512
							],
							"name": "LPToken",
							"nameLocation": "754:7:9",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"id": 1609,
									"libraryName": {
										"id": 1607,
										"name": "Address",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 490,
										"src": "819:7:9"
									},
									"nodeType": "UsingForDirective",
									"src": "813:26:9",
									"typeName": {
										"id": 1608,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "831:7:9",
										"stateMutability": "nonpayable",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									}
								},
								{
									"id": 1612,
									"libraryName": {
										"id": 1610,
										"name": "Strings",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 687,
										"src": "850:7:9"
									},
									"nodeType": "UsingForDirective",
									"src": "844:26:9",
									"typeName": {
										"id": 1611,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "862:7:9",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									}
								},
								{
									"constant": false,
									"id": 1614,
									"mutability": "mutable",
									"name": "_name",
									"nameLocation": "909:5:9",
									"nodeType": "VariableDeclaration",
									"scope": 2613,
									"src": "894:20:9",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_string_storage",
										"typeString": "string"
									},
									"typeName": {
										"id": 1613,
										"name": "string",
										"nodeType": "ElementaryTypeName",
										"src": "894:6:9",
										"typeDescriptions": {
											"typeIdentifier": "t_string_storage_ptr",
											"typeString": "string"
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 1616,
									"mutability": "mutable",
									"name": "_symbol",
									"nameLocation": "956:7:9",
									"nodeType": "VariableDeclaration",
									"scope": 2613,
									"src": "941:22:9",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_string_storage",
										"typeString": "string"
									},
									"typeName": {
										"id": 1615,
										"name": "string",
										"nodeType": "ElementaryTypeName",
										"src": "941:6:9",
										"typeDescriptions": {
											"typeIdentifier": "t_string_storage_ptr",
											"typeString": "string"
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 1618,
									"mutability": "mutable",
									"name": "_pair",
									"nameLocation": "1006:5:9",
									"nodeType": "VariableDeclaration",
									"scope": 2613,
									"src": "990:21:9",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_address",
										"typeString": "address"
									},
									"typeName": {
										"id": 1617,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "990:7:9",
										"stateMutability": "nonpayable",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 1620,
									"mutability": "mutable",
									"name": "_factory",
									"nameLocation": "1057:8:9",
									"nodeType": "VariableDeclaration",
									"scope": 2613,
									"src": "1041:24:9",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_address",
										"typeString": "address"
									},
									"typeName": {
										"id": 1619,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "1041:7:9",
										"stateMutability": "nonpayable",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 1624,
									"mutability": "mutable",
									"name": "_owners",
									"nameLocation": "1154:7:9",
									"nodeType": "VariableDeclaration",
									"scope": 2613,
									"src": "1118:43:9",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_uint256_$_t_address_$",
										"typeString": "mapping(uint256 => address)"
									},
									"typeName": {
										"id": 1623,
										"keyType": {
											"id": 1621,
											"name": "uint256",
											"nodeType": "ElementaryTypeName",
											"src": "1126:7:9",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										},
										"nodeType": "Mapping",
										"src": "1118:27:9",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_uint256_$_t_address_$",
											"typeString": "mapping(uint256 => address)"
										},
										"valueType": {
											"id": 1622,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "1137:7:9",
											"stateMutability": "nonpayable",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 1628,
									"mutability": "mutable",
									"name": "_balances",
									"nameLocation": "1248:9:9",
									"nodeType": "VariableDeclaration",
									"scope": 2613,
									"src": "1212:45:9",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
										"typeString": "mapping(address => uint256)"
									},
									"typeName": {
										"id": 1627,
										"keyType": {
											"id": 1625,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "1220:7:9",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"nodeType": "Mapping",
										"src": "1212:27:9",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
											"typeString": "mapping(address => uint256)"
										},
										"valueType": {
											"id": 1626,
											"name": "uint256",
											"nodeType": "ElementaryTypeName",
											"src": "1231:7:9",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 1632,
									"mutability": "mutable",
									"name": "_tokenApprovals",
									"nameLocation": "1349:15:9",
									"nodeType": "VariableDeclaration",
									"scope": 2613,
									"src": "1313:51:9",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_uint256_$_t_address_$",
										"typeString": "mapping(uint256 => address)"
									},
									"typeName": {
										"id": 1631,
										"keyType": {
											"id": 1629,
											"name": "uint256",
											"nodeType": "ElementaryTypeName",
											"src": "1321:7:9",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										},
										"nodeType": "Mapping",
										"src": "1313:27:9",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_uint256_$_t_address_$",
											"typeString": "mapping(uint256 => address)"
										},
										"valueType": {
											"id": 1630,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "1332:7:9",
											"stateMutability": "nonpayable",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 1638,
									"mutability": "mutable",
									"name": "_operatorApprovals",
									"nameLocation": "1472:18:9",
									"nodeType": "VariableDeclaration",
									"scope": 2613,
									"src": "1419:71:9",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_bool_$_$",
										"typeString": "mapping(address => mapping(address => bool))"
									},
									"typeName": {
										"id": 1637,
										"keyType": {
											"id": 1633,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "1427:7:9",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"nodeType": "Mapping",
										"src": "1419:44:9",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_bool_$_$",
											"typeString": "mapping(address => mapping(address => bool))"
										},
										"valueType": {
											"id": 1636,
											"keyType": {
												"id": 1634,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "1446:7:9",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"nodeType": "Mapping",
											"src": "1438:24:9",
											"typeDescriptions": {
												"typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
												"typeString": "mapping(address => bool)"
											},
											"valueType": {
												"id": 1635,
												"name": "bool",
												"nodeType": "ElementaryTypeName",
												"src": "1457:4:9",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												}
											}
										}
									},
									"visibility": "private"
								},
								{
									"body": {
										"id": 1660,
										"nodeType": "Block",
										"src": "1684:86:9",
										"statements": [
											{
												"expression": {
													"id": 1650,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1648,
														"name": "_name",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1614,
														"src": "1694:5:9",
														"typeDescriptions": {
															"typeIdentifier": "t_string_storage",
															"typeString": "string storage ref"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 1649,
														"name": "name_",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1641,
														"src": "1702:5:9",
														"typeDescriptions": {
															"typeIdentifier": "t_string_memory_ptr",
															"typeString": "string memory"
														}
													},
													"src": "1694:13:9",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage",
														"typeString": "string storage ref"
													}
												},
												"id": 1651,
												"nodeType": "ExpressionStatement",
												"src": "1694:13:9"
											},
											{
												"expression": {
													"id": 1654,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1652,
														"name": "_symbol",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1616,
														"src": "1717:7:9",
														"typeDescriptions": {
															"typeIdentifier": "t_string_storage",
															"typeString": "string storage ref"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 1653,
														"name": "symbol_",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1643,
														"src": "1727:7:9",
														"typeDescriptions": {
															"typeIdentifier": "t_string_memory_ptr",
															"typeString": "string memory"
														}
													},
													"src": "1717:17:9",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage",
														"typeString": "string storage ref"
													}
												},
												"id": 1655,
												"nodeType": "ExpressionStatement",
												"src": "1717:17:9"
											},
											{
												"expression": {
													"id": 1658,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1656,
														"name": "_factory",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1620,
														"src": "1744:8:9",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 1657,
														"name": "factory_",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1645,
														"src": "1755:8:9",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "1744:19:9",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 1659,
												"nodeType": "ExpressionStatement",
												"src": "1744:19:9"
											}
										]
									},
									"documentation": {
										"id": 1639,
										"nodeType": "StructuredDocumentation",
										"src": "1497:108:9",
										"text": " @dev Initializes the contract by setting a `name` and a `symbol` to the token collection."
									},
									"id": 1661,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [],
									"name": "",
									"nameLocation": "-1:-1:-1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1646,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1641,
												"mutability": "mutable",
												"name": "name_",
												"nameLocation": "1636:5:9",
												"nodeType": "VariableDeclaration",
												"scope": 1661,
												"src": "1622:19:9",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1640,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "1622:6:9",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1643,
												"mutability": "mutable",
												"name": "symbol_",
												"nameLocation": "1657:7:9",
												"nodeType": "VariableDeclaration",
												"scope": 1661,
												"src": "1643:21:9",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1642,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "1643:6:9",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1645,
												"mutability": "mutable",
												"name": "factory_",
												"nameLocation": "1674:8:9",
												"nodeType": "VariableDeclaration",
												"scope": 1661,
												"src": "1666:16:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1644,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1666:7:9",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1621:62:9"
									},
									"returnParameters": {
										"id": 1647,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1684:0:9"
									},
									"scope": 2613,
									"src": "1610:160:9",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 1671,
										"nodeType": "Block",
										"src": "1798:56:9",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 1667,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"id": 1664,
																	"name": "msg",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967281,
																	"src": "1816:3:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_message",
																		"typeString": "msg"
																	}
																},
																"id": 1665,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "sender",
																"nodeType": "MemberAccess",
																"src": "1816:10:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"id": 1666,
																"name": "_pair",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1618,
																"src": "1830:5:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "1816:19:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														],
														"id": 1663,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1808:7:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
															"typeString": "function (bool) pure"
														}
													},
													"id": 1668,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1808:28:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1669,
												"nodeType": "ExpressionStatement",
												"src": "1808:28:9"
											},
											{
												"id": 1670,
												"nodeType": "PlaceholderStatement",
												"src": "1846:1:9"
											}
										]
									},
									"id": 1672,
									"name": "onlyPair",
									"nameLocation": "1789:8:9",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 1662,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1798:0:9"
									},
									"src": "1780:74:9",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1682,
										"nodeType": "Block",
										"src": "1881:59:9",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 1678,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"id": 1675,
																	"name": "msg",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967281,
																	"src": "1899:3:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_message",
																		"typeString": "msg"
																	}
																},
																"id": 1676,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "sender",
																"nodeType": "MemberAccess",
																"src": "1899:10:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"id": 1677,
																"name": "_factory",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1620,
																"src": "1913:8:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "1899:22:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														],
														"id": 1674,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1891:7:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
															"typeString": "function (bool) pure"
														}
													},
													"id": 1679,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1891:31:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1680,
												"nodeType": "ExpressionStatement",
												"src": "1891:31:9"
											},
											{
												"id": 1681,
												"nodeType": "PlaceholderStatement",
												"src": "1932:1:9"
											}
										]
									},
									"id": 1683,
									"name": "onlyFactory",
									"nameLocation": "1869:11:9",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 1673,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1881:0:9"
									},
									"src": "1860:80:9",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1694,
										"nodeType": "Block",
										"src": "2007:29:9",
										"statements": [
											{
												"expression": {
													"id": 1692,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1690,
														"name": "_pair",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1618,
														"src": "2017:5:9",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 1691,
														"name": "pair",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1685,
														"src": "2025:4:9",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "2017:12:9",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 1693,
												"nodeType": "ExpressionStatement",
												"src": "2017:12:9"
											}
										]
									},
									"functionSelector": "c4d66de8",
									"id": 1695,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 1688,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 1687,
												"name": "onlyFactory",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 1683,
												"src": "1995:11:9"
											},
											"nodeType": "ModifierInvocation",
											"src": "1995:11:9"
										}
									],
									"name": "initialize",
									"nameLocation": "1955:10:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1686,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1685,
												"mutability": "mutable",
												"name": "pair",
												"nameLocation": "1974:4:9",
												"nodeType": "VariableDeclaration",
												"scope": 1695,
												"src": "1966:12:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1684,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1966:7:9",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1965:14:9"
									},
									"returnParameters": {
										"id": 1689,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2007:0:9"
									},
									"scope": 2613,
									"src": "1946:90:9",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 1709,
										"nodeType": "Block",
										"src": "2113:39:9",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 1705,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1697,
															"src": "2133:2:9",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1706,
															"name": "tokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1699,
															"src": "2137:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1704,
														"name": "_safeMint",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															2163,
															2192
														],
														"referencedDeclaration": 2163,
														"src": "2123:9:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,uint256)"
														}
													},
													"id": 1707,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2123:22:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1708,
												"nodeType": "ExpressionStatement",
												"src": "2123:22:9"
											}
										]
									},
									"functionSelector": "40c10f19",
									"id": 1710,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 1702,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 1701,
												"name": "onlyPair",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 1672,
												"src": "2104:8:9"
											},
											"nodeType": "ModifierInvocation",
											"src": "2104:8:9"
										}
									],
									"name": "mint",
									"nameLocation": "2055:4:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1700,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1697,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "2068:2:9",
												"nodeType": "VariableDeclaration",
												"scope": 1710,
												"src": "2060:10:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1696,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2060:7:9",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1699,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "2080:7:9",
												"nodeType": "VariableDeclaration",
												"scope": 1710,
												"src": "2072:15:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1698,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2072:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2059:29:9"
									},
									"returnParameters": {
										"id": 1703,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2113:0:9"
									},
									"scope": 2613,
									"src": "2046:106:9",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 1730,
										"nodeType": "Block",
										"src": "2213:141:9",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"arguments": [],
																	"expression": {
																		"argumentTypes": [],
																		"id": 1719,
																		"name": "_msgSender",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 502,
																		"src": "2250:10:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																			"typeString": "function () view returns (address)"
																		}
																	},
																	"id": 1720,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "2250:12:9",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 1721,
																	"name": "tokenId",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1712,
																	"src": "2264:7:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 1718,
																"name": "_isApprovedOrOwner",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2148,
																"src": "2231:18:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$_t_address_$_t_uint256_$returns$_t_bool_$",
																	"typeString": "function (address,uint256) view returns (bool)"
																}
															},
															"id": 1722,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2231:41:9",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "4c50546f6b656e3a2063616c6c6572206973206e6f7420746f6b656e206f776e6572206f7220617070726f766564",
															"id": 1723,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2274:48:9",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_a5ffe5dde529c790f4d4d30827fab7c2daf9e1a22354adadcc2286d93abb4b98",
																"typeString": "literal_string \"LPToken: caller is not token owner or approved\""
															},
															"value": "LPToken: caller is not token owner or approved"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_a5ffe5dde529c790f4d4d30827fab7c2daf9e1a22354adadcc2286d93abb4b98",
																"typeString": "literal_string \"LPToken: caller is not token owner or approved\""
															}
														],
														"id": 1717,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "2223:7:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1724,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2223:100:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1725,
												"nodeType": "ExpressionStatement",
												"src": "2223:100:9"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 1727,
															"name": "tokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1712,
															"src": "2339:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1726,
														"name": "_burn",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2336,
														"src": "2333:5:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_uint256_$returns$__$",
															"typeString": "function (uint256)"
														}
													},
													"id": 1728,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2333:14:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1729,
												"nodeType": "ExpressionStatement",
												"src": "2333:14:9"
											}
										]
									},
									"functionSelector": "42966c68",
									"id": 1731,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 1715,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 1714,
												"name": "onlyPair",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 1672,
												"src": "2204:8:9"
											},
											"nodeType": "ModifierInvocation",
											"src": "2204:8:9"
										}
									],
									"name": "burn",
									"nameLocation": "2167:4:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1713,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1712,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "2180:7:9",
												"nodeType": "VariableDeclaration",
												"scope": 1731,
												"src": "2172:15:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1711,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2172:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2171:17:9"
									},
									"returnParameters": {
										"id": 1716,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2213:0:9"
									},
									"scope": 2613,
									"src": "2158:196:9",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										710,
										722
									],
									"body": {
										"id": 1761,
										"nodeType": "Block",
										"src": "2529:192:9",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"id": 1759,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"id": 1754,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"commonType": {
																"typeIdentifier": "t_bytes4",
																"typeString": "bytes4"
															},
															"id": 1747,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1742,
																"name": "interfaceId",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1734,
																"src": "2558:11:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes4",
																	"typeString": "bytes4"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"expression": {
																	"arguments": [
																		{
																			"id": 1744,
																			"name": "IERC721",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 115,
																			"src": "2578:7:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_contract$_IERC721_$115_$",
																				"typeString": "type(contract IERC721)"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_type$_t_contract$_IERC721_$115_$",
																				"typeString": "type(contract IERC721)"
																			}
																		],
																		"id": 1743,
																		"name": "type",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4294967269,
																		"src": "2573:4:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_metatype_pure$__$returns$__$",
																			"typeString": "function () pure"
																		}
																	},
																	"id": 1745,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "2573:13:9",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_meta_type_t_contract$_IERC721_$115",
																		"typeString": "type(contract IERC721)"
																	}
																},
																"id": 1746,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberName": "interfaceId",
																"nodeType": "MemberAccess",
																"src": "2573:25:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes4",
																	"typeString": "bytes4"
																}
															},
															"src": "2558:40:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "||",
														"rightExpression": {
															"commonType": {
																"typeIdentifier": "t_bytes4",
																"typeString": "bytes4"
															},
															"id": 1753,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1748,
																"name": "interfaceId",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1734,
																"src": "2614:11:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes4",
																	"typeString": "bytes4"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"expression": {
																	"arguments": [
																		{
																			"id": 1750,
																			"name": "IERC721Metadata",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 160,
																			"src": "2634:15:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_contract$_IERC721Metadata_$160_$",
																				"typeString": "type(contract IERC721Metadata)"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_type$_t_contract$_IERC721Metadata_$160_$",
																				"typeString": "type(contract IERC721Metadata)"
																			}
																		],
																		"id": 1749,
																		"name": "type",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4294967269,
																		"src": "2629:4:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_metatype_pure$__$returns$__$",
																			"typeString": "function () pure"
																		}
																	},
																	"id": 1751,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "2629:21:9",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_meta_type_t_contract$_IERC721Metadata_$160",
																		"typeString": "type(contract IERC721Metadata)"
																	}
																},
																"id": 1752,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberName": "interfaceId",
																"nodeType": "MemberAccess",
																"src": "2629:33:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes4",
																	"typeString": "bytes4"
																}
															},
															"src": "2614:48:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"src": "2558:104:9",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "||",
													"rightExpression": {
														"arguments": [
															{
																"id": 1757,
																"name": "interfaceId",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1734,
																"src": "2702:11:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes4",
																	"typeString": "bytes4"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_bytes4",
																	"typeString": "bytes4"
																}
															],
															"expression": {
																"id": 1755,
																"name": "super",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967271,
																"src": "2678:5:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_super$_LPToken_$2613_$",
																	"typeString": "type(contract super LPToken)"
																}
															},
															"id": 1756,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "supportsInterface",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 710,
															"src": "2678:23:9",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_view$_t_bytes4_$returns$_t_bool_$",
																"typeString": "function (bytes4) view returns (bool)"
															}
														},
														"id": 1758,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "2678:36:9",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"src": "2558:156:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 1741,
												"id": 1760,
												"nodeType": "Return",
												"src": "2539:175:9"
											}
										]
									},
									"documentation": {
										"id": 1732,
										"nodeType": "StructuredDocumentation",
										"src": "2360:56:9",
										"text": " @dev See {IERC165-supportsInterface}."
									},
									"functionSelector": "01ffc9a7",
									"id": 1762,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "supportsInterface",
									"nameLocation": "2430:17:9",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 1738,
										"nodeType": "OverrideSpecifier",
										"overrides": [
											{
												"id": 1736,
												"name": "ERC165",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 711,
												"src": "2497:6:9"
											},
											{
												"id": 1737,
												"name": "IERC165",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 723,
												"src": "2505:7:9"
											}
										],
										"src": "2488:25:9"
									},
									"parameters": {
										"id": 1735,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1734,
												"mutability": "mutable",
												"name": "interfaceId",
												"nameLocation": "2455:11:9",
												"nodeType": "VariableDeclaration",
												"scope": 1762,
												"src": "2448:18:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes4",
													"typeString": "bytes4"
												},
												"typeName": {
													"id": 1733,
													"name": "bytes4",
													"nodeType": "ElementaryTypeName",
													"src": "2448:6:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes4",
														"typeString": "bytes4"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2447:20:9"
									},
									"returnParameters": {
										"id": 1741,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1740,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1762,
												"src": "2523:4:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1739,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2523:4:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2522:6:9"
									},
									"scope": 2613,
									"src": "2421:300:9",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										40
									],
									"body": {
										"id": 1785,
										"nodeType": "Block",
										"src": "2861:124:9",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 1777,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1772,
																"name": "owner",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1765,
																"src": "2879:5:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 1775,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "2896:1:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 1774,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "2888:7:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 1773,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "2888:7:9",
																		"typeDescriptions": {}
																	}
																},
																"id": 1776,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2888:10:9",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "2879:19:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "4c50546f6b656e3a2061646472657373207a65726f206973206e6f7420612076616c6964206f776e6572",
															"id": 1778,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2900:44:9",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_90d40f4b500dad131a37c48a1929541c0dc77a82fa018c908d230f38021fe37d",
																"typeString": "literal_string \"LPToken: address zero is not a valid owner\""
															},
															"value": "LPToken: address zero is not a valid owner"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_90d40f4b500dad131a37c48a1929541c0dc77a82fa018c908d230f38021fe37d",
																"typeString": "literal_string \"LPToken: address zero is not a valid owner\""
															}
														],
														"id": 1771,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "2871:7:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1779,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2871:74:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1780,
												"nodeType": "ExpressionStatement",
												"src": "2871:74:9"
											},
											{
												"expression": {
													"baseExpression": {
														"id": 1781,
														"name": "_balances",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1628,
														"src": "2962:9:9",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
															"typeString": "mapping(address => uint256)"
														}
													},
													"id": 1783,
													"indexExpression": {
														"id": 1782,
														"name": "owner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1765,
														"src": "2972:5:9",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "2962:16:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1770,
												"id": 1784,
												"nodeType": "Return",
												"src": "2955:23:9"
											}
										]
									},
									"documentation": {
										"id": 1763,
										"nodeType": "StructuredDocumentation",
										"src": "2727:48:9",
										"text": " @dev See {IERC721-balanceOf}."
									},
									"functionSelector": "70a08231",
									"id": 1786,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "balanceOf",
									"nameLocation": "2789:9:9",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 1767,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "2834:8:9"
									},
									"parameters": {
										"id": 1766,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1765,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "2807:5:9",
												"nodeType": "VariableDeclaration",
												"scope": 1786,
												"src": "2799:13:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1764,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2799:7:9",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2798:15:9"
									},
									"returnParameters": {
										"id": 1770,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1769,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1786,
												"src": "2852:7:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1768,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2852:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2851:9:9"
									},
									"scope": 2613,
									"src": "2780:205:9",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										48
									],
									"body": {
										"id": 1813,
										"nodeType": "Block",
										"src": "3123:139:9",
										"statements": [
											{
												"assignments": [
													1796
												],
												"declarations": [
													{
														"constant": false,
														"id": 1796,
														"mutability": "mutable",
														"name": "owner",
														"nameLocation": "3141:5:9",
														"nodeType": "VariableDeclaration",
														"scope": 1813,
														"src": "3133:13:9",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 1795,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "3133:7:9",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1800,
												"initialValue": {
													"arguments": [
														{
															"id": 1798,
															"name": "tokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1789,
															"src": "3158:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1797,
														"name": "_ownerOf",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2096,
														"src": "3149:8:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_address_$",
															"typeString": "function (uint256) view returns (address)"
														}
													},
													"id": 1799,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3149:17:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3133:33:9"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 1807,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1802,
																"name": "owner",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1796,
																"src": "3184:5:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 1805,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "3201:1:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 1804,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "3193:7:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 1803,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "3193:7:9",
																		"typeDescriptions": {}
																	}
																},
																"id": 1806,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "3193:10:9",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "3184:19:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "4c50546f6b656e3a20696e76616c696420746f6b656e204944",
															"id": 1808,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3205:27:9",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_0de948d3f2800070ee485cb4e6ddea363a22e035a4bbf48d8192e08bacbc4871",
																"typeString": "literal_string \"LPToken: invalid token ID\""
															},
															"value": "LPToken: invalid token ID"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_0de948d3f2800070ee485cb4e6ddea363a22e035a4bbf48d8192e08bacbc4871",
																"typeString": "literal_string \"LPToken: invalid token ID\""
															}
														],
														"id": 1801,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "3176:7:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1809,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3176:57:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1810,
												"nodeType": "ExpressionStatement",
												"src": "3176:57:9"
											},
											{
												"expression": {
													"id": 1811,
													"name": "owner",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 1796,
													"src": "3250:5:9",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 1794,
												"id": 1812,
												"nodeType": "Return",
												"src": "3243:12:9"
											}
										]
									},
									"documentation": {
										"id": 1787,
										"nodeType": "StructuredDocumentation",
										"src": "2991:46:9",
										"text": " @dev See {IERC721-ownerOf}."
									},
									"functionSelector": "6352211e",
									"id": 1814,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "ownerOf",
									"nameLocation": "3051:7:9",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 1791,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "3096:8:9"
									},
									"parameters": {
										"id": 1790,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1789,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "3067:7:9",
												"nodeType": "VariableDeclaration",
												"scope": 1814,
												"src": "3059:15:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1788,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3059:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3058:17:9"
									},
									"returnParameters": {
										"id": 1794,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1793,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1814,
												"src": "3114:7:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1792,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3114:7:9",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3113:9:9"
									},
									"scope": 2613,
									"src": "3042:220:9",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										145
									],
									"body": {
										"id": 1823,
										"nodeType": "Block",
										"src": "3393:29:9",
										"statements": [
											{
												"expression": {
													"id": 1821,
													"name": "_name",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 1614,
													"src": "3410:5:9",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage",
														"typeString": "string storage ref"
													}
												},
												"functionReturnParameters": 1820,
												"id": 1822,
												"nodeType": "Return",
												"src": "3403:12:9"
											}
										]
									},
									"documentation": {
										"id": 1815,
										"nodeType": "StructuredDocumentation",
										"src": "3268:51:9",
										"text": " @dev See {IERC721Metadata-name}."
									},
									"functionSelector": "06fdde03",
									"id": 1824,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "name",
									"nameLocation": "3333:4:9",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 1817,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "3360:8:9"
									},
									"parameters": {
										"id": 1816,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3337:2:9"
									},
									"returnParameters": {
										"id": 1820,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1819,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1824,
												"src": "3378:13:9",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1818,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "3378:6:9",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3377:15:9"
									},
									"scope": 2613,
									"src": "3324:98:9",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										151
									],
									"body": {
										"id": 1833,
										"nodeType": "Block",
										"src": "3557:31:9",
										"statements": [
											{
												"expression": {
													"id": 1831,
													"name": "_symbol",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 1616,
													"src": "3574:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage",
														"typeString": "string storage ref"
													}
												},
												"functionReturnParameters": 1830,
												"id": 1832,
												"nodeType": "Return",
												"src": "3567:14:9"
											}
										]
									},
									"documentation": {
										"id": 1825,
										"nodeType": "StructuredDocumentation",
										"src": "3428:53:9",
										"text": " @dev See {IERC721Metadata-symbol}."
									},
									"functionSelector": "95d89b41",
									"id": 1834,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "symbol",
									"nameLocation": "3495:6:9",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 1827,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "3524:8:9"
									},
									"parameters": {
										"id": 1826,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3501:2:9"
									},
									"returnParameters": {
										"id": 1830,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1829,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1834,
												"src": "3542:13:9",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1828,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "3542:6:9",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3541:15:9"
									},
									"scope": 2613,
									"src": "3486:102:9",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										159
									],
									"body": {
										"id": 1872,
										"nodeType": "Block",
										"src": "3742:188:9",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 1844,
															"name": "tokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1837,
															"src": "3767:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1843,
														"name": "_requireMinted",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2491,
														"src": "3752:14:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_uint256_$returns$__$",
															"typeString": "function (uint256) view"
														}
													},
													"id": 1845,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3752:23:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1846,
												"nodeType": "ExpressionStatement",
												"src": "3752:23:9"
											},
											{
												"assignments": [
													1848
												],
												"declarations": [
													{
														"constant": false,
														"id": 1848,
														"mutability": "mutable",
														"name": "baseURI",
														"nameLocation": "3800:7:9",
														"nodeType": "VariableDeclaration",
														"scope": 1872,
														"src": "3786:21:9",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_string_memory_ptr",
															"typeString": "string"
														},
														"typeName": {
															"id": 1847,
															"name": "string",
															"nodeType": "ElementaryTypeName",
															"src": "3786:6:9",
															"typeDescriptions": {
																"typeIdentifier": "t_string_storage_ptr",
																"typeString": "string"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1851,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 1849,
														"name": "_baseURI",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1882,
														"src": "3810:8:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$_t_string_memory_ptr_$",
															"typeString": "function () view returns (string memory)"
														}
													},
													"id": 1850,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3810:10:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_string_memory_ptr",
														"typeString": "string memory"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3786:34:9"
											},
											{
												"expression": {
													"condition": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 1858,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"expression": {
																"arguments": [
																	{
																		"id": 1854,
																		"name": "baseURI",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1848,
																		"src": "3843:7:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	],
																	"id": 1853,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "3837:5:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_bytes_storage_ptr_$",
																		"typeString": "type(bytes storage pointer)"
																	},
																	"typeName": {
																		"id": 1852,
																		"name": "bytes",
																		"nodeType": "ElementaryTypeName",
																		"src": "3837:5:9",
																		"typeDescriptions": {}
																	}
																},
																"id": 1855,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "3837:14:9",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															},
															"id": 1856,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "length",
															"nodeType": "MemberAccess",
															"src": "3837:21:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": ">",
														"rightExpression": {
															"hexValue": "30",
															"id": 1857,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3861:1:9",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														"src": "3837:25:9",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"falseExpression": {
														"hexValue": "",
														"id": 1869,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "string",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "3921:2:9",
														"typeDescriptions": {
															"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
															"typeString": "literal_string \"\""
														},
														"value": ""
													},
													"id": 1870,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "Conditional",
													"src": "3837:86:9",
													"trueExpression": {
														"arguments": [
															{
																"arguments": [
																	{
																		"id": 1863,
																		"name": "baseURI",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1848,
																		"src": "3889:7:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	},
																	{
																		"arguments": [],
																		"expression": {
																			"argumentTypes": [],
																			"expression": {
																				"id": 1864,
																				"name": "tokenId",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1837,
																				"src": "3898:7:9",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"id": 1865,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"memberName": "toString",
																			"nodeType": "MemberAccess",
																			"referencedDeclaration": 570,
																			"src": "3898:16:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_string_memory_ptr_$bound_to$_t_uint256_$",
																				"typeString": "function (uint256) pure returns (string memory)"
																			}
																		},
																		"id": 1866,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "3898:18:9",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		},
																		{
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	],
																	"expression": {
																		"id": 1861,
																		"name": "abi",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4294967295,
																		"src": "3872:3:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_magic_abi",
																			"typeString": "abi"
																		}
																	},
																	"id": 1862,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"memberName": "encodePacked",
																	"nodeType": "MemberAccess",
																	"src": "3872:16:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$",
																		"typeString": "function () pure returns (bytes memory)"
																	}
																},
																"id": 1867,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "3872:45:9",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															],
															"id": 1860,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "3865:6:9",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_string_storage_ptr_$",
																"typeString": "type(string storage pointer)"
															},
															"typeName": {
																"id": 1859,
																"name": "string",
																"nodeType": "ElementaryTypeName",
																"src": "3865:6:9",
																"typeDescriptions": {}
															}
														},
														"id": 1868,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "typeConversion",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "3865:53:9",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_string_memory_ptr",
															"typeString": "string memory"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_string_memory_ptr",
														"typeString": "string memory"
													}
												},
												"functionReturnParameters": 1842,
												"id": 1871,
												"nodeType": "Return",
												"src": "3830:93:9"
											}
										]
									},
									"documentation": {
										"id": 1835,
										"nodeType": "StructuredDocumentation",
										"src": "3594:55:9",
										"text": " @dev See {IERC721Metadata-tokenURI}."
									},
									"functionSelector": "c87b56dd",
									"id": 1873,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "tokenURI",
									"nameLocation": "3663:8:9",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 1839,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "3709:8:9"
									},
									"parameters": {
										"id": 1838,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1837,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "3680:7:9",
												"nodeType": "VariableDeclaration",
												"scope": 1873,
												"src": "3672:15:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1836,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3672:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3671:17:9"
									},
									"returnParameters": {
										"id": 1842,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1841,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1873,
												"src": "3727:13:9",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1840,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "3727:6:9",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3726:15:9"
									},
									"scope": 2613,
									"src": "3654:276:9",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 1881,
										"nodeType": "Block",
										"src": "4238:26:9",
										"statements": [
											{
												"expression": {
													"hexValue": "",
													"id": 1879,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "string",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "4255:2:9",
													"typeDescriptions": {
														"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
														"typeString": "literal_string \"\""
													},
													"value": ""
												},
												"functionReturnParameters": 1878,
												"id": 1880,
												"nodeType": "Return",
												"src": "4248:9:9"
											}
										]
									},
									"documentation": {
										"id": 1874,
										"nodeType": "StructuredDocumentation",
										"src": "3936:231:9",
										"text": " @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n by default, can be overridden in child contracts."
									},
									"id": 1882,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_baseURI",
									"nameLocation": "4181:8:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1875,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4189:2:9"
									},
									"returnParameters": {
										"id": 1878,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1877,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1882,
												"src": "4223:13:9",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1876,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "4223:6:9",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4222:15:9"
									},
									"scope": 2613,
									"src": "4172:92:9",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"baseFunctions": [
										88
									],
									"body": {
										"id": 1924,
										"nodeType": "Block",
										"src": "4391:339:9",
										"statements": [
											{
												"assignments": [
													1892
												],
												"declarations": [
													{
														"constant": false,
														"id": 1892,
														"mutability": "mutable",
														"name": "owner",
														"nameLocation": "4409:5:9",
														"nodeType": "VariableDeclaration",
														"scope": 1924,
														"src": "4401:13:9",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 1891,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "4401:7:9",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1897,
												"initialValue": {
													"arguments": [
														{
															"id": 1895,
															"name": "tokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1887,
															"src": "4433:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"id": 1893,
															"name": "LPToken",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2613,
															"src": "4417:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_contract$_LPToken_$2613_$",
																"typeString": "type(contract LPToken)"
															}
														},
														"id": 1894,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "ownerOf",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1814,
														"src": "4417:15:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_address_$",
															"typeString": "function (uint256) view returns (address)"
														}
													},
													"id": 1896,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4417:24:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4401:40:9"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 1901,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1899,
																"name": "to",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1885,
																"src": "4459:2:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"id": 1900,
																"name": "owner",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1892,
																"src": "4465:5:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "4459:11:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "4c50546f6b656e3a20617070726f76616c20746f2063757272656e74206f776e6572",
															"id": 1902,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4472:36:9",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_9210b42866450f064f5c8ec9ce98d17f9fb7cc05dedf8125e9046199846ae43d",
																"typeString": "literal_string \"LPToken: approval to current owner\""
															},
															"value": "LPToken: approval to current owner"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_9210b42866450f064f5c8ec9ce98d17f9fb7cc05dedf8125e9046199846ae43d",
																"typeString": "literal_string \"LPToken: approval to current owner\""
															}
														],
														"id": 1898,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "4451:7:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1903,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4451:58:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1904,
												"nodeType": "ExpressionStatement",
												"src": "4451:58:9"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"id": 1915,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																},
																"id": 1909,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"arguments": [],
																	"expression": {
																		"argumentTypes": [],
																		"id": 1906,
																		"name": "_msgSender",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 502,
																		"src": "4541:10:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																			"typeString": "function () view returns (address)"
																		}
																	},
																	"id": 1907,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "4541:12:9",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "==",
																"rightExpression": {
																	"id": 1908,
																	"name": "owner",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1892,
																	"src": "4557:5:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"src": "4541:21:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "||",
															"rightExpression": {
																"arguments": [
																	{
																		"id": 1911,
																		"name": "owner",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1892,
																		"src": "4583:5:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"arguments": [],
																		"expression": {
																			"argumentTypes": [],
																			"id": 1912,
																			"name": "_msgSender",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 502,
																			"src": "4590:10:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																				"typeString": "function () view returns (address)"
																			}
																		},
																		"id": 1913,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "4590:12:9",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 1910,
																	"name": "isApprovedForAll",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1978,
																	"src": "4566:16:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_view$_t_address_$_t_address_$returns$_t_bool_$",
																		"typeString": "function (address,address) view returns (bool)"
																	}
																},
																"id": 1914,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "4566:37:9",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"src": "4541:62:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "4c50546f6b656e3a20617070726f76652063616c6c6572206973206e6f7420746f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c",
															"id": 1916,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4617:64:9",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_ef1298a7174f188e1119a85bd9a0cda763120d85cfd0dbe8ef81a425bd78189f",
																"typeString": "literal_string \"LPToken: approve caller is not token owner or approved for all\""
															},
															"value": "LPToken: approve caller is not token owner or approved for all"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_ef1298a7174f188e1119a85bd9a0cda763120d85cfd0dbe8ef81a425bd78189f",
																"typeString": "literal_string \"LPToken: approve caller is not token owner or approved for all\""
															}
														],
														"id": 1905,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "4520:7:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1917,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4520:171:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1918,
												"nodeType": "ExpressionStatement",
												"src": "4520:171:9"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 1920,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1885,
															"src": "4711:2:9",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1921,
															"name": "tokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1887,
															"src": "4715:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1919,
														"name": "_approve",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2445,
														"src": "4702:8:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,uint256)"
														}
													},
													"id": 1922,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4702:21:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1923,
												"nodeType": "ExpressionStatement",
												"src": "4702:21:9"
											}
										]
									},
									"documentation": {
										"id": 1883,
										"nodeType": "StructuredDocumentation",
										"src": "4270:46:9",
										"text": " @dev See {IERC721-approve}."
									},
									"functionSelector": "095ea7b3",
									"id": 1925,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "approve",
									"nameLocation": "4330:7:9",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 1889,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "4382:8:9"
									},
									"parameters": {
										"id": 1888,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1885,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "4346:2:9",
												"nodeType": "VariableDeclaration",
												"scope": 1925,
												"src": "4338:10:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1884,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4338:7:9",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1887,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "4358:7:9",
												"nodeType": "VariableDeclaration",
												"scope": 1925,
												"src": "4350:15:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1886,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4350:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4337:29:9"
									},
									"returnParameters": {
										"id": 1890,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4391:0:9"
									},
									"scope": 2613,
									"src": "4321:409:9",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										104
									],
									"body": {
										"id": 1942,
										"nodeType": "Block",
										"src": "4876:82:9",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 1935,
															"name": "tokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1928,
															"src": "4901:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1934,
														"name": "_requireMinted",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2491,
														"src": "4886:14:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_uint256_$returns$__$",
															"typeString": "function (uint256) view"
														}
													},
													"id": 1936,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4886:23:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1937,
												"nodeType": "ExpressionStatement",
												"src": "4886:23:9"
											},
											{
												"expression": {
													"baseExpression": {
														"id": 1938,
														"name": "_tokenApprovals",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1632,
														"src": "4927:15:9",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_uint256_$_t_address_$",
															"typeString": "mapping(uint256 => address)"
														}
													},
													"id": 1940,
													"indexExpression": {
														"id": 1939,
														"name": "tokenId",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1928,
														"src": "4943:7:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "4927:24:9",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 1933,
												"id": 1941,
												"nodeType": "Return",
												"src": "4920:31:9"
											}
										]
									},
									"documentation": {
										"id": 1926,
										"nodeType": "StructuredDocumentation",
										"src": "4736:50:9",
										"text": " @dev See {IERC721-getApproved}."
									},
									"functionSelector": "081812fc",
									"id": 1943,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getApproved",
									"nameLocation": "4800:11:9",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 1930,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "4849:8:9"
									},
									"parameters": {
										"id": 1929,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1928,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "4820:7:9",
												"nodeType": "VariableDeclaration",
												"scope": 1943,
												"src": "4812:15:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1927,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4812:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4811:17:9"
									},
									"returnParameters": {
										"id": 1933,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1932,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1943,
												"src": "4867:7:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1931,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4867:7:9",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4866:9:9"
									},
									"scope": 2613,
									"src": "4791:167:9",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										96
									],
									"body": {
										"id": 1959,
										"nodeType": "Block",
										"src": "5109:69:9",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"id": 1953,
																"name": "_msgSender",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 502,
																"src": "5138:10:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																	"typeString": "function () view returns (address)"
																}
															},
															"id": 1954,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "5138:12:9",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1955,
															"name": "operator",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1946,
															"src": "5152:8:9",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1956,
															"name": "approved",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1948,
															"src": "5162:8:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														],
														"id": 1952,
														"name": "_setApprovalForAll",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2477,
														"src": "5119:18:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_bool_$returns$__$",
															"typeString": "function (address,address,bool)"
														}
													},
													"id": 1957,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5119:52:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1958,
												"nodeType": "ExpressionStatement",
												"src": "5119:52:9"
											}
										]
									},
									"documentation": {
										"id": 1944,
										"nodeType": "StructuredDocumentation",
										"src": "4964:56:9",
										"text": " @dev See {IERC721-setApprovalForAll}."
									},
									"functionSelector": "a22cb465",
									"id": 1960,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "setApprovalForAll",
									"nameLocation": "5034:17:9",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 1950,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "5100:8:9"
									},
									"parameters": {
										"id": 1949,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1946,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "5060:8:9",
												"nodeType": "VariableDeclaration",
												"scope": 1960,
												"src": "5052:16:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1945,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5052:7:9",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1948,
												"mutability": "mutable",
												"name": "approved",
												"nameLocation": "5075:8:9",
												"nodeType": "VariableDeclaration",
												"scope": 1960,
												"src": "5070:13:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1947,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "5070:4:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5051:33:9"
									},
									"returnParameters": {
										"id": 1951,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "5109:0:9"
									},
									"scope": 2613,
									"src": "5025:153:9",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										114
									],
									"body": {
										"id": 1977,
										"nodeType": "Block",
										"src": "5347:59:9",
										"statements": [
											{
												"expression": {
													"baseExpression": {
														"baseExpression": {
															"id": 1971,
															"name": "_operatorApprovals",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1638,
															"src": "5364:18:9",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_bool_$_$",
																"typeString": "mapping(address => mapping(address => bool))"
															}
														},
														"id": 1973,
														"indexExpression": {
															"id": 1972,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1963,
															"src": "5383:5:9",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "IndexAccess",
														"src": "5364:25:9",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
															"typeString": "mapping(address => bool)"
														}
													},
													"id": 1975,
													"indexExpression": {
														"id": 1974,
														"name": "operator",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1965,
														"src": "5390:8:9",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "5364:35:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 1970,
												"id": 1976,
												"nodeType": "Return",
												"src": "5357:42:9"
											}
										]
									},
									"documentation": {
										"id": 1961,
										"nodeType": "StructuredDocumentation",
										"src": "5184:55:9",
										"text": " @dev See {IERC721-isApprovedForAll}."
									},
									"functionSelector": "e985e9c5",
									"id": 1978,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "isApprovedForAll",
									"nameLocation": "5253:16:9",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 1967,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "5323:8:9"
									},
									"parameters": {
										"id": 1966,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1963,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "5278:5:9",
												"nodeType": "VariableDeclaration",
												"scope": 1978,
												"src": "5270:13:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1962,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5270:7:9",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1965,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "5293:8:9",
												"nodeType": "VariableDeclaration",
												"scope": 1978,
												"src": "5285:16:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1964,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5285:7:9",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5269:33:9"
									},
									"returnParameters": {
										"id": 1970,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1969,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1978,
												"src": "5341:4:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1968,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "5341:4:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5340:6:9"
									},
									"scope": 2613,
									"src": "5244:162:9",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										80
									],
									"body": {
										"id": 2004,
										"nodeType": "Block",
										"src": "5557:208:9",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"arguments": [],
																	"expression": {
																		"argumentTypes": [],
																		"id": 1991,
																		"name": "_msgSender",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 502,
																		"src": "5646:10:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																			"typeString": "function () view returns (address)"
																		}
																	},
																	"id": 1992,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "5646:12:9",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 1993,
																	"name": "tokenId",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1985,
																	"src": "5660:7:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 1990,
																"name": "_isApprovedOrOwner",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2148,
																"src": "5627:18:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$_t_address_$_t_uint256_$returns$_t_bool_$",
																	"typeString": "function (address,uint256) view returns (bool)"
																}
															},
															"id": 1994,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "5627:41:9",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "4c50546f6b656e3a2063616c6c6572206973206e6f7420746f6b656e206f776e6572206f7220617070726f766564",
															"id": 1995,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "5670:48:9",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_a5ffe5dde529c790f4d4d30827fab7c2daf9e1a22354adadcc2286d93abb4b98",
																"typeString": "literal_string \"LPToken: caller is not token owner or approved\""
															},
															"value": "LPToken: caller is not token owner or approved"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_a5ffe5dde529c790f4d4d30827fab7c2daf9e1a22354adadcc2286d93abb4b98",
																"typeString": "literal_string \"LPToken: caller is not token owner or approved\""
															}
														],
														"id": 1989,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "5619:7:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1996,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5619:100:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1997,
												"nodeType": "ExpressionStatement",
												"src": "5619:100:9"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 1999,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1981,
															"src": "5740:4:9",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 2000,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1983,
															"src": "5746:2:9",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 2001,
															"name": "tokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1985,
															"src": "5750:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1998,
														"name": "_transfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2421,
														"src": "5730:9:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 2002,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5730:28:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2003,
												"nodeType": "ExpressionStatement",
												"src": "5730:28:9"
											}
										]
									},
									"documentation": {
										"id": 1979,
										"nodeType": "StructuredDocumentation",
										"src": "5412:51:9",
										"text": " @dev See {IERC721-transferFrom}."
									},
									"functionSelector": "23b872dd",
									"id": 2005,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "transferFrom",
									"nameLocation": "5477:12:9",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 1987,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "5548:8:9"
									},
									"parameters": {
										"id": 1986,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1981,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "5498:4:9",
												"nodeType": "VariableDeclaration",
												"scope": 2005,
												"src": "5490:12:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1980,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5490:7:9",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1983,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "5512:2:9",
												"nodeType": "VariableDeclaration",
												"scope": 2005,
												"src": "5504:10:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1982,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5504:7:9",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1985,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "5524:7:9",
												"nodeType": "VariableDeclaration",
												"scope": 2005,
												"src": "5516:15:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1984,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5516:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5489:43:9"
									},
									"returnParameters": {
										"id": 1988,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "5557:0:9"
									},
									"scope": 2613,
									"src": "5468:297:9",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										70
									],
									"body": {
										"id": 2023,
										"nodeType": "Block",
										"src": "5924:56:9",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 2017,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2008,
															"src": "5951:4:9",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 2018,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2010,
															"src": "5957:2:9",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 2019,
															"name": "tokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2012,
															"src": "5961:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"hexValue": "",
															"id": 2020,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "5970:2:9",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																"typeString": "literal_string \"\""
															},
															"value": ""
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																"typeString": "literal_string \"\""
															}
														],
														"id": 2016,
														"name": "safeTransferFrom",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															2024,
															2054
														],
														"referencedDeclaration": 2054,
														"src": "5934:16:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$__$",
															"typeString": "function (address,address,uint256,bytes memory)"
														}
													},
													"id": 2021,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5934:39:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2022,
												"nodeType": "ExpressionStatement",
												"src": "5934:39:9"
											}
										]
									},
									"documentation": {
										"id": 2006,
										"nodeType": "StructuredDocumentation",
										"src": "5771:55:9",
										"text": " @dev See {IERC721-safeTransferFrom}."
									},
									"functionSelector": "42842e0e",
									"id": 2024,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "safeTransferFrom",
									"nameLocation": "5840:16:9",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 2014,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "5915:8:9"
									},
									"parameters": {
										"id": 2013,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2008,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "5865:4:9",
												"nodeType": "VariableDeclaration",
												"scope": 2024,
												"src": "5857:12:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2007,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5857:7:9",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2010,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "5879:2:9",
												"nodeType": "VariableDeclaration",
												"scope": 2024,
												"src": "5871:10:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2009,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5871:7:9",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2012,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "5891:7:9",
												"nodeType": "VariableDeclaration",
												"scope": 2024,
												"src": "5883:15:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2011,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5883:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5856:43:9"
									},
									"returnParameters": {
										"id": 2015,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "5924:0:9"
									},
									"scope": 2613,
									"src": "5831:149:9",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										60
									],
									"body": {
										"id": 2053,
										"nodeType": "Block",
										"src": "6158:165:9",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"arguments": [],
																	"expression": {
																		"argumentTypes": [],
																		"id": 2039,
																		"name": "_msgSender",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 502,
																		"src": "6195:10:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																			"typeString": "function () view returns (address)"
																		}
																	},
																	"id": 2040,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "6195:12:9",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 2041,
																	"name": "tokenId",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2031,
																	"src": "6209:7:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 2038,
																"name": "_isApprovedOrOwner",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2148,
																"src": "6176:18:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$_t_address_$_t_uint256_$returns$_t_bool_$",
																	"typeString": "function (address,uint256) view returns (bool)"
																}
															},
															"id": 2042,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "6176:41:9",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "4c50546f6b656e3a2063616c6c6572206973206e6f7420746f6b656e206f776e6572206f7220617070726f766564",
															"id": 2043,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "6219:48:9",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_a5ffe5dde529c790f4d4d30827fab7c2daf9e1a22354adadcc2286d93abb4b98",
																"typeString": "literal_string \"LPToken: caller is not token owner or approved\""
															},
															"value": "LPToken: caller is not token owner or approved"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_a5ffe5dde529c790f4d4d30827fab7c2daf9e1a22354adadcc2286d93abb4b98",
																"typeString": "literal_string \"LPToken: caller is not token owner or approved\""
															}
														],
														"id": 2037,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "6168:7:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 2044,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6168:100:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2045,
												"nodeType": "ExpressionStatement",
												"src": "6168:100:9"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 2047,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2027,
															"src": "6292:4:9",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 2048,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2029,
															"src": "6298:2:9",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 2049,
															"name": "tokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2031,
															"src": "6302:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 2050,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2033,
															"src": "6311:4:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 2046,
														"name": "_safeTransfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2083,
														"src": "6278:13:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$__$",
															"typeString": "function (address,address,uint256,bytes memory)"
														}
													},
													"id": 2051,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6278:38:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2052,
												"nodeType": "ExpressionStatement",
												"src": "6278:38:9"
											}
										]
									},
									"documentation": {
										"id": 2025,
										"nodeType": "StructuredDocumentation",
										"src": "5986:55:9",
										"text": " @dev See {IERC721-safeTransferFrom}."
									},
									"functionSelector": "b88d4fde",
									"id": 2054,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "safeTransferFrom",
									"nameLocation": "6055:16:9",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 2035,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "6149:8:9"
									},
									"parameters": {
										"id": 2034,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2027,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "6080:4:9",
												"nodeType": "VariableDeclaration",
												"scope": 2054,
												"src": "6072:12:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2026,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6072:7:9",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2029,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "6094:2:9",
												"nodeType": "VariableDeclaration",
												"scope": 2054,
												"src": "6086:10:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2028,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6086:7:9",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2031,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "6106:7:9",
												"nodeType": "VariableDeclaration",
												"scope": 2054,
												"src": "6098:15:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2030,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6098:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2033,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "6128:4:9",
												"nodeType": "VariableDeclaration",
												"scope": 2054,
												"src": "6115:17:9",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 2032,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "6115:5:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6071:62:9"
									},
									"returnParameters": {
										"id": 2036,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "6158:0:9"
									},
									"scope": 2613,
									"src": "6046:277:9",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 2082,
										"nodeType": "Block",
										"src": "7286:166:9",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 2067,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2057,
															"src": "7306:4:9",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 2068,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2059,
															"src": "7312:2:9",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 2069,
															"name": "tokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2061,
															"src": "7316:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 2066,
														"name": "_transfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2421,
														"src": "7296:9:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 2070,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7296:28:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2071,
												"nodeType": "ExpressionStatement",
												"src": "7296:28:9"
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"id": 2074,
																	"name": "from",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2057,
																	"src": "7365:4:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 2075,
																	"name": "to",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2059,
																	"src": "7371:2:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 2076,
																	"name": "tokenId",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2061,
																	"src": "7375:7:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																{
																	"id": 2077,
																	"name": "data",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2063,
																	"src": "7384:4:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes memory"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	{
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes memory"
																	}
																],
																"id": 2073,
																"name": "_checkOnERC721Received",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2553,
																"src": "7342:22:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$_t_bool_$",
																	"typeString": "function (address,address,uint256,bytes memory) returns (bool)"
																}
															},
															"id": 2078,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "7342:47:9",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "4c50546f6b656e3a207472616e7366657220746f206e6f6e20455243373231526563656976657220696d706c656d656e746572",
															"id": 2079,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "7391:53:9",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_cd05f83da6940de4a3075fc9ad85b9137b64610f15df8549468ac7081d15bf47",
																"typeString": "literal_string \"LPToken: transfer to non ERC721Receiver implementer\""
															},
															"value": "LPToken: transfer to non ERC721Receiver implementer"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_cd05f83da6940de4a3075fc9ad85b9137b64610f15df8549468ac7081d15bf47",
																"typeString": "literal_string \"LPToken: transfer to non ERC721Receiver implementer\""
															}
														],
														"id": 2072,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "7334:7:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 2080,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7334:111:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2081,
												"nodeType": "ExpressionStatement",
												"src": "7334:111:9"
											}
										]
									},
									"documentation": {
										"id": 2055,
										"nodeType": "StructuredDocumentation",
										"src": "6329:850:9",
										"text": " @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n are aware of the ERC721 protocol to prevent tokens from being forever locked.\n `data` is additional data, it has no specified format and it is sent in call to `to`.\n This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\n implement alternative mechanisms to perform token transfer, such as signature-based.\n Requirements:\n - `from` cannot be the zero address.\n - `to` cannot be the zero address.\n - `tokenId` token must exist and be owned by `from`.\n - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n Emits a {Transfer} event."
									},
									"id": 2083,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_safeTransfer",
									"nameLocation": "7193:13:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2064,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2057,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "7215:4:9",
												"nodeType": "VariableDeclaration",
												"scope": 2083,
												"src": "7207:12:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2056,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "7207:7:9",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2059,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "7229:2:9",
												"nodeType": "VariableDeclaration",
												"scope": 2083,
												"src": "7221:10:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2058,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "7221:7:9",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2061,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "7241:7:9",
												"nodeType": "VariableDeclaration",
												"scope": 2083,
												"src": "7233:15:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2060,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "7233:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2063,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "7263:4:9",
												"nodeType": "VariableDeclaration",
												"scope": 2083,
												"src": "7250:17:9",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 2062,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "7250:5:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7206:62:9"
									},
									"returnParameters": {
										"id": 2065,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "7286:0:9"
									},
									"scope": 2613,
									"src": "7184:268:9",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2095,
										"nodeType": "Block",
										"src": "7636:40:9",
										"statements": [
											{
												"expression": {
													"baseExpression": {
														"id": 2091,
														"name": "_owners",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1624,
														"src": "7653:7:9",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_uint256_$_t_address_$",
															"typeString": "mapping(uint256 => address)"
														}
													},
													"id": 2093,
													"indexExpression": {
														"id": 2092,
														"name": "tokenId",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2086,
														"src": "7661:7:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "7653:16:9",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 2090,
												"id": 2094,
												"nodeType": "Return",
												"src": "7646:23:9"
											}
										]
									},
									"documentation": {
										"id": 2084,
										"nodeType": "StructuredDocumentation",
										"src": "7458:98:9",
										"text": " @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist"
									},
									"id": 2096,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_ownerOf",
									"nameLocation": "7570:8:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2087,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2086,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "7587:7:9",
												"nodeType": "VariableDeclaration",
												"scope": 2096,
												"src": "7579:15:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2085,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "7579:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7578:17:9"
									},
									"returnParameters": {
										"id": 2090,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2089,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2096,
												"src": "7627:7:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2088,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "7627:7:9",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7626:9:9"
									},
									"scope": 2613,
									"src": "7561:115:9",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2113,
										"nodeType": "Block",
										"src": "8050:55:9",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 2111,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"arguments": [
															{
																"id": 2105,
																"name": "tokenId",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2099,
																"src": "8076:7:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															],
															"id": 2104,
															"name": "_ownerOf",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2096,
															"src": "8067:8:9",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_address_$",
																"typeString": "function (uint256) view returns (address)"
															}
														},
														"id": 2106,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "8067:17:9",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 2109,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "8096:1:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 2108,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "8088:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 2107,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "8088:7:9",
																"typeDescriptions": {}
															}
														},
														"id": 2110,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "8088:10:9",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "8067:31:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 2103,
												"id": 2112,
												"nodeType": "Return",
												"src": "8060:38:9"
											}
										]
									},
									"documentation": {
										"id": 2097,
										"nodeType": "StructuredDocumentation",
										"src": "7682:292:9",
										"text": " @dev Returns whether `tokenId` exists.\n Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n Tokens start existing when they are minted (`_mint`),\n and stop existing when they are burned (`_burn`)."
									},
									"id": 2114,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_exists",
									"nameLocation": "7988:7:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2100,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2099,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "8004:7:9",
												"nodeType": "VariableDeclaration",
												"scope": 2114,
												"src": "7996:15:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2098,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "7996:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7995:17:9"
									},
									"returnParameters": {
										"id": 2103,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2102,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2114,
												"src": "8044:4:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 2101,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "8044:4:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8043:6:9"
									},
									"scope": 2613,
									"src": "7979:126:9",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2147,
										"nodeType": "Block",
										"src": "8362:163:9",
										"statements": [
											{
												"assignments": [
													2125
												],
												"declarations": [
													{
														"constant": false,
														"id": 2125,
														"mutability": "mutable",
														"name": "owner",
														"nameLocation": "8380:5:9",
														"nodeType": "VariableDeclaration",
														"scope": 2147,
														"src": "8372:13:9",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 2124,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "8372:7:9",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 2130,
												"initialValue": {
													"arguments": [
														{
															"id": 2128,
															"name": "tokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2119,
															"src": "8404:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"id": 2126,
															"name": "LPToken",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2613,
															"src": "8388:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_contract$_LPToken_$2613_$",
																"typeString": "type(contract LPToken)"
															}
														},
														"id": 2127,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "ownerOf",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1814,
														"src": "8388:15:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_address_$",
															"typeString": "function (uint256) view returns (address)"
														}
													},
													"id": 2129,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8388:24:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "8372:40:9"
											},
											{
												"expression": {
													"components": [
														{
															"commonType": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"id": 2144,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																},
																"id": 2138,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"commonType": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	"id": 2133,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 2131,
																		"name": "spender",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2117,
																		"src": "8430:7:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "==",
																	"rightExpression": {
																		"id": 2132,
																		"name": "owner",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2125,
																		"src": "8441:5:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	"src": "8430:16:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "||",
																"rightExpression": {
																	"arguments": [
																		{
																			"id": 2135,
																			"name": "owner",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2125,
																			"src": "8467:5:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		},
																		{
																			"id": 2136,
																			"name": "spender",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2117,
																			"src": "8474:7:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			},
																			{
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		],
																		"id": 2134,
																		"name": "isApprovedForAll",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1978,
																		"src": "8450:16:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_internal_view$_t_address_$_t_address_$returns$_t_bool_$",
																			"typeString": "function (address,address) view returns (bool)"
																		}
																	},
																	"id": 2137,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "8450:32:9",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																"src": "8430:52:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "||",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																},
																"id": 2143,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"arguments": [
																		{
																			"id": 2140,
																			"name": "tokenId",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2119,
																			"src": "8498:7:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		],
																		"id": 2139,
																		"name": "getApproved",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1943,
																		"src": "8486:11:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_address_$",
																			"typeString": "function (uint256) view returns (address)"
																		}
																	},
																	"id": 2141,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "8486:20:9",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "==",
																"rightExpression": {
																	"id": 2142,
																	"name": "spender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2117,
																	"src": "8510:7:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"src": "8486:31:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"src": "8430:87:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														}
													],
													"id": 2145,
													"isConstant": false,
													"isInlineArray": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "TupleExpression",
													"src": "8429:89:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 2123,
												"id": 2146,
												"nodeType": "Return",
												"src": "8422:96:9"
											}
										]
									},
									"documentation": {
										"id": 2115,
										"nodeType": "StructuredDocumentation",
										"src": "8111:147:9",
										"text": " @dev Returns whether `spender` is allowed to manage `tokenId`.\n Requirements:\n - `tokenId` must exist."
									},
									"id": 2148,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_isApprovedOrOwner",
									"nameLocation": "8272:18:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2120,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2117,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "8299:7:9",
												"nodeType": "VariableDeclaration",
												"scope": 2148,
												"src": "8291:15:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2116,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "8291:7:9",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2119,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "8316:7:9",
												"nodeType": "VariableDeclaration",
												"scope": 2148,
												"src": "8308:15:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2118,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8308:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8290:34:9"
									},
									"returnParameters": {
										"id": 2123,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2122,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2148,
												"src": "8356:4:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 2121,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "8356:4:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8355:6:9"
									},
									"scope": 2613,
									"src": "8263:262:9",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2162,
										"nodeType": "Block",
										"src": "8920:43:9",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 2157,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2151,
															"src": "8940:2:9",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 2158,
															"name": "tokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2153,
															"src": "8944:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"hexValue": "",
															"id": 2159,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "8953:2:9",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																"typeString": "literal_string \"\""
															},
															"value": ""
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																"typeString": "literal_string \"\""
															}
														],
														"id": 2156,
														"name": "_safeMint",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															2163,
															2192
														],
														"referencedDeclaration": 2192,
														"src": "8930:9:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$__$",
															"typeString": "function (address,uint256,bytes memory)"
														}
													},
													"id": 2160,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8930:26:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2161,
												"nodeType": "ExpressionStatement",
												"src": "8930:26:9"
											}
										]
									},
									"documentation": {
										"id": 2149,
										"nodeType": "StructuredDocumentation",
										"src": "8531:319:9",
										"text": " @dev Safely mints `tokenId` and transfers it to `to`.\n Requirements:\n - `tokenId` must not exist.\n - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n Emits a {Transfer} event."
									},
									"id": 2163,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_safeMint",
									"nameLocation": "8864:9:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2154,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2151,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "8882:2:9",
												"nodeType": "VariableDeclaration",
												"scope": 2163,
												"src": "8874:10:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2150,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "8874:7:9",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2153,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "8894:7:9",
												"nodeType": "VariableDeclaration",
												"scope": 2163,
												"src": "8886:15:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2152,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8886:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8873:29:9"
									},
									"returnParameters": {
										"id": 2155,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "8920:0:9"
									},
									"scope": 2613,
									"src": "8855:108:9",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2191,
										"nodeType": "Block",
										"src": "9268:196:9",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 2174,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2166,
															"src": "9284:2:9",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 2175,
															"name": "tokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2168,
															"src": "9288:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 2173,
														"name": "_mint",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2269,
														"src": "9278:5:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,uint256)"
														}
													},
													"id": 2176,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9278:18:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2177,
												"nodeType": "ExpressionStatement",
												"src": "9278:18:9"
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"arguments": [
																		{
																			"hexValue": "30",
																			"id": 2182,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "9358:1:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			},
																			"value": "0"
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			}
																		],
																		"id": 2181,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "9350:7:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_address_$",
																			"typeString": "type(address)"
																		},
																		"typeName": {
																			"id": 2180,
																			"name": "address",
																			"nodeType": "ElementaryTypeName",
																			"src": "9350:7:9",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 2183,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "9350:10:9",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 2184,
																	"name": "to",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2166,
																	"src": "9362:2:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 2185,
																	"name": "tokenId",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2168,
																	"src": "9366:7:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																{
																	"id": 2186,
																	"name": "data",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2170,
																	"src": "9375:4:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes memory"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	{
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes memory"
																	}
																],
																"id": 2179,
																"name": "_checkOnERC721Received",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2553,
																"src": "9327:22:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$_t_bool_$",
																	"typeString": "function (address,address,uint256,bytes memory) returns (bool)"
																}
															},
															"id": 2187,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "9327:53:9",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "4c50546f6b656e3a207472616e7366657220746f206e6f6e20455243373231526563656976657220696d706c656d656e746572",
															"id": 2188,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "9394:53:9",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_cd05f83da6940de4a3075fc9ad85b9137b64610f15df8549468ac7081d15bf47",
																"typeString": "literal_string \"LPToken: transfer to non ERC721Receiver implementer\""
															},
															"value": "LPToken: transfer to non ERC721Receiver implementer"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_cd05f83da6940de4a3075fc9ad85b9137b64610f15df8549468ac7081d15bf47",
																"typeString": "literal_string \"LPToken: transfer to non ERC721Receiver implementer\""
															}
														],
														"id": 2178,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "9306:7:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 2189,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9306:151:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2190,
												"nodeType": "ExpressionStatement",
												"src": "9306:151:9"
											}
										]
									},
									"documentation": {
										"id": 2164,
										"nodeType": "StructuredDocumentation",
										"src": "8969:210:9",
										"text": " @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\n forwarded in {IERC721Receiver-onERC721Received} to contract recipients."
									},
									"id": 2192,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_safeMint",
									"nameLocation": "9193:9:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2171,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2166,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "9211:2:9",
												"nodeType": "VariableDeclaration",
												"scope": 2192,
												"src": "9203:10:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2165,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "9203:7:9",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2168,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "9223:7:9",
												"nodeType": "VariableDeclaration",
												"scope": 2192,
												"src": "9215:15:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2167,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "9215:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2170,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "9245:4:9",
												"nodeType": "VariableDeclaration",
												"scope": 2192,
												"src": "9232:17:9",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 2169,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "9232:5:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9202:48:9"
									},
									"returnParameters": {
										"id": 2172,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "9268:0:9"
									},
									"scope": 2613,
									"src": "9184:280:9",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2268,
										"nodeType": "Block",
										"src": "9847:862:9",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 2206,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2201,
																"name": "to",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2195,
																"src": "9865:2:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 2204,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "9879:1:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 2203,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "9871:7:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 2202,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "9871:7:9",
																		"typeDescriptions": {}
																	}
																},
																"id": 2205,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "9871:10:9",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "9865:16:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "4c50546f6b656e3a206d696e7420746f20746865207a65726f2061646472657373",
															"id": 2207,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "9883:35:9",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_b68b6da5c73f081fedef6df3c9ac69fef1058ce93b413e644e8b80491cd9bc09",
																"typeString": "literal_string \"LPToken: mint to the zero address\""
															},
															"value": "LPToken: mint to the zero address"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_b68b6da5c73f081fedef6df3c9ac69fef1058ce93b413e644e8b80491cd9bc09",
																"typeString": "literal_string \"LPToken: mint to the zero address\""
															}
														],
														"id": 2200,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "9857:7:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 2208,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9857:62:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2209,
												"nodeType": "ExpressionStatement",
												"src": "9857:62:9"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 2214,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "UnaryOperation",
															"operator": "!",
															"prefix": true,
															"src": "9937:17:9",
															"subExpression": {
																"arguments": [
																	{
																		"id": 2212,
																		"name": "tokenId",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2197,
																		"src": "9946:7:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"id": 2211,
																	"name": "_exists",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2114,
																	"src": "9938:7:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_bool_$",
																		"typeString": "function (uint256) view returns (bool)"
																	}
																},
																"id": 2213,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "9938:16:9",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "4c50546f6b656e3a20746f6b656e20616c7265616479206d696e746564",
															"id": 2215,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "9956:31:9",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_7d3ee8c74050f4fe83b2ce7d49fd8df823fe5b7a5e9a3d71ecaa16369a4b53cb",
																"typeString": "literal_string \"LPToken: token already minted\""
															},
															"value": "LPToken: token already minted"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_7d3ee8c74050f4fe83b2ce7d49fd8df823fe5b7a5e9a3d71ecaa16369a4b53cb",
																"typeString": "literal_string \"LPToken: token already minted\""
															}
														],
														"id": 2210,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "9929:7:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 2216,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9929:59:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2217,
												"nodeType": "ExpressionStatement",
												"src": "9929:59:9"
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 2221,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10028:1:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 2220,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "10020:7:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 2219,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "10020:7:9",
																	"typeDescriptions": {}
																}
															},
															"id": 2222,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "10020:10:9",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 2223,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2195,
															"src": "10032:2:9",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 2224,
															"name": "tokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2197,
															"src": "10036:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"hexValue": "31",
															"id": 2225,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "10045:1:9",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_1_by_1",
																"typeString": "int_const 1"
															},
															"value": "1"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_rational_1_by_1",
																"typeString": "int_const 1"
															}
														],
														"id": 2218,
														"name": "_beforeTokenTransfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2599,
														"src": "9999:20:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256,uint256)"
														}
													},
													"id": 2226,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9999:48:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2227,
												"nodeType": "ExpressionStatement",
												"src": "9999:48:9"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 2232,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "UnaryOperation",
															"operator": "!",
															"prefix": true,
															"src": "10142:17:9",
															"subExpression": {
																"arguments": [
																	{
																		"id": 2230,
																		"name": "tokenId",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2197,
																		"src": "10151:7:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"id": 2229,
																	"name": "_exists",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2114,
																	"src": "10143:7:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_bool_$",
																		"typeString": "function (uint256) view returns (bool)"
																	}
																},
																"id": 2231,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "10143:16:9",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "4c50546f6b656e3a20746f6b656e20616c7265616479206d696e746564",
															"id": 2233,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "10161:31:9",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_7d3ee8c74050f4fe83b2ce7d49fd8df823fe5b7a5e9a3d71ecaa16369a4b53cb",
																"typeString": "literal_string \"LPToken: token already minted\""
															},
															"value": "LPToken: token already minted"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_7d3ee8c74050f4fe83b2ce7d49fd8df823fe5b7a5e9a3d71ecaa16369a4b53cb",
																"typeString": "literal_string \"LPToken: token already minted\""
															}
														],
														"id": 2228,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "10134:7:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 2234,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "10134:59:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2235,
												"nodeType": "ExpressionStatement",
												"src": "10134:59:9"
											},
											{
												"id": 2242,
												"nodeType": "UncheckedBlock",
												"src": "10204:360:9",
												"statements": [
													{
														"expression": {
															"id": 2240,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"baseExpression": {
																	"id": 2236,
																	"name": "_balances",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1628,
																	"src": "10535:9:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																		"typeString": "mapping(address => uint256)"
																	}
																},
																"id": 2238,
																"indexExpression": {
																	"id": 2237,
																	"name": "to",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2195,
																	"src": "10545:2:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": true,
																"nodeType": "IndexAccess",
																"src": "10535:13:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "+=",
															"rightHandSide": {
																"hexValue": "31",
																"id": 2239,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "10552:1:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_1_by_1",
																	"typeString": "int_const 1"
																},
																"value": "1"
															},
															"src": "10535:18:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 2241,
														"nodeType": "ExpressionStatement",
														"src": "10535:18:9"
													}
												]
											},
											{
												"expression": {
													"id": 2247,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"id": 2243,
															"name": "_owners",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1624,
															"src": "10574:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_uint256_$_t_address_$",
																"typeString": "mapping(uint256 => address)"
															}
														},
														"id": 2245,
														"indexExpression": {
															"id": 2244,
															"name": "tokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2197,
															"src": "10582:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "10574:16:9",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 2246,
														"name": "to",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2195,
														"src": "10593:2:9",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "10574:21:9",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 2248,
												"nodeType": "ExpressionStatement",
												"src": "10574:21:9"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 2252,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10628:1:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 2251,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "10620:7:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 2250,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "10620:7:9",
																	"typeDescriptions": {}
																}
															},
															"id": 2253,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "10620:10:9",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 2254,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2195,
															"src": "10632:2:9",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 2255,
															"name": "tokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2197,
															"src": "10636:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 2249,
														"name": "Transfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 14,
														"src": "10611:8:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 2256,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "10611:33:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2257,
												"nodeType": "EmitStatement",
												"src": "10606:38:9"
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 2261,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10683:1:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 2260,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "10675:7:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 2259,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "10675:7:9",
																	"typeDescriptions": {}
																}
															},
															"id": 2262,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "10675:10:9",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 2263,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2195,
															"src": "10687:2:9",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 2264,
															"name": "tokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2197,
															"src": "10691:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"hexValue": "31",
															"id": 2265,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "10700:1:9",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_1_by_1",
																"typeString": "int_const 1"
															},
															"value": "1"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_rational_1_by_1",
																"typeString": "int_const 1"
															}
														],
														"id": 2258,
														"name": "_afterTokenTransfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2612,
														"src": "10655:19:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256,uint256)"
														}
													},
													"id": 2266,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "10655:47:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2267,
												"nodeType": "ExpressionStatement",
												"src": "10655:47:9"
											}
										]
									},
									"documentation": {
										"id": 2193,
										"nodeType": "StructuredDocumentation",
										"src": "9470:311:9",
										"text": " @dev Mints `tokenId` and transfers it to `to`.\n WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\n Requirements:\n - `tokenId` must not exist.\n - `to` cannot be the zero address.\n Emits a {Transfer} event."
									},
									"id": 2269,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_mint",
									"nameLocation": "9795:5:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2198,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2195,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "9809:2:9",
												"nodeType": "VariableDeclaration",
												"scope": 2269,
												"src": "9801:10:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2194,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "9801:7:9",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2197,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "9821:7:9",
												"nodeType": "VariableDeclaration",
												"scope": 2269,
												"src": "9813:15:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2196,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "9813:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9800:29:9"
									},
									"returnParameters": {
										"id": 2199,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "9847:0:9"
									},
									"scope": 2613,
									"src": "9786:923:9",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2335,
										"nodeType": "Block",
										"src": "11084:715:9",
										"statements": [
											{
												"assignments": [
													2276
												],
												"declarations": [
													{
														"constant": false,
														"id": 2276,
														"mutability": "mutable",
														"name": "owner",
														"nameLocation": "11102:5:9",
														"nodeType": "VariableDeclaration",
														"scope": 2335,
														"src": "11094:13:9",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 2275,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "11094:7:9",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 2281,
												"initialValue": {
													"arguments": [
														{
															"id": 2279,
															"name": "tokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2272,
															"src": "11126:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"id": 2277,
															"name": "LPToken",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2613,
															"src": "11110:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_contract$_LPToken_$2613_$",
																"typeString": "type(contract LPToken)"
															}
														},
														"id": 2278,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "ownerOf",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1814,
														"src": "11110:15:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_address_$",
															"typeString": "function (uint256) view returns (address)"
														}
													},
													"id": 2280,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "11110:24:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "11094:40:9"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 2283,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2276,
															"src": "11166:5:9",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 2286,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "11181:1:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 2285,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "11173:7:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 2284,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "11173:7:9",
																	"typeDescriptions": {}
																}
															},
															"id": 2287,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "11173:10:9",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 2288,
															"name": "tokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2272,
															"src": "11185:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"hexValue": "31",
															"id": 2289,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "11194:1:9",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_1_by_1",
																"typeString": "int_const 1"
															},
															"value": "1"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_rational_1_by_1",
																"typeString": "int_const 1"
															}
														],
														"id": 2282,
														"name": "_beforeTokenTransfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2599,
														"src": "11145:20:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256,uint256)"
														}
													},
													"id": 2290,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "11145:51:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2291,
												"nodeType": "ExpressionStatement",
												"src": "11145:51:9"
											},
											{
												"expression": {
													"id": 2297,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 2292,
														"name": "owner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2276,
														"src": "11298:5:9",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"id": 2295,
																"name": "tokenId",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2272,
																"src": "11322:7:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															],
															"expression": {
																"id": 2293,
																"name": "LPToken",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2613,
																"src": "11306:7:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_contract$_LPToken_$2613_$",
																	"typeString": "type(contract LPToken)"
																}
															},
															"id": 2294,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "ownerOf",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 1814,
															"src": "11306:15:9",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_address_$",
																"typeString": "function (uint256) view returns (address)"
															}
														},
														"id": 2296,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "11306:24:9",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "11298:32:9",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 2298,
												"nodeType": "ExpressionStatement",
												"src": "11298:32:9"
											},
											{
												"expression": {
													"id": 2302,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "UnaryOperation",
													"operator": "delete",
													"prefix": true,
													"src": "11368:31:9",
													"subExpression": {
														"baseExpression": {
															"id": 2299,
															"name": "_tokenApprovals",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1632,
															"src": "11375:15:9",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_uint256_$_t_address_$",
																"typeString": "mapping(uint256 => address)"
															}
														},
														"id": 2301,
														"indexExpression": {
															"id": 2300,
															"name": "tokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2272,
															"src": "11391:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "11375:24:9",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2303,
												"nodeType": "ExpressionStatement",
												"src": "11368:31:9"
											},
											{
												"id": 2310,
												"nodeType": "UncheckedBlock",
												"src": "11410:237:9",
												"statements": [
													{
														"expression": {
															"id": 2308,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"baseExpression": {
																	"id": 2304,
																	"name": "_balances",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1628,
																	"src": "11615:9:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																		"typeString": "mapping(address => uint256)"
																	}
																},
																"id": 2306,
																"indexExpression": {
																	"id": 2305,
																	"name": "owner",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2276,
																	"src": "11625:5:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": true,
																"nodeType": "IndexAccess",
																"src": "11615:16:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "-=",
															"rightHandSide": {
																"hexValue": "31",
																"id": 2307,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "11635:1:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_1_by_1",
																	"typeString": "int_const 1"
																},
																"value": "1"
															},
															"src": "11615:21:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 2309,
														"nodeType": "ExpressionStatement",
														"src": "11615:21:9"
													}
												]
											},
											{
												"expression": {
													"id": 2314,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "UnaryOperation",
													"operator": "delete",
													"prefix": true,
													"src": "11656:23:9",
													"subExpression": {
														"baseExpression": {
															"id": 2311,
															"name": "_owners",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1624,
															"src": "11663:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_uint256_$_t_address_$",
																"typeString": "mapping(uint256 => address)"
															}
														},
														"id": 2313,
														"indexExpression": {
															"id": 2312,
															"name": "tokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2272,
															"src": "11671:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "11663:16:9",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2315,
												"nodeType": "ExpressionStatement",
												"src": "11656:23:9"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 2317,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2276,
															"src": "11704:5:9",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 2320,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "11719:1:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 2319,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "11711:7:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 2318,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "11711:7:9",
																	"typeDescriptions": {}
																}
															},
															"id": 2321,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "11711:10:9",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 2322,
															"name": "tokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2272,
															"src": "11723:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 2316,
														"name": "Transfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 14,
														"src": "11695:8:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 2323,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "11695:36:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2324,
												"nodeType": "EmitStatement",
												"src": "11690:41:9"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 2326,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2276,
															"src": "11762:5:9",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 2329,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "11777:1:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 2328,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "11769:7:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 2327,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "11769:7:9",
																	"typeDescriptions": {}
																}
															},
															"id": 2330,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "11769:10:9",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 2331,
															"name": "tokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2272,
															"src": "11781:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"hexValue": "31",
															"id": 2332,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "11790:1:9",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_1_by_1",
																"typeString": "int_const 1"
															},
															"value": "1"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_rational_1_by_1",
																"typeString": "int_const 1"
															}
														],
														"id": 2325,
														"name": "_afterTokenTransfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2612,
														"src": "11742:19:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256,uint256)"
														}
													},
													"id": 2333,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "11742:50:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2334,
												"nodeType": "ExpressionStatement",
												"src": "11742:50:9"
											}
										]
									},
									"documentation": {
										"id": 2270,
										"nodeType": "StructuredDocumentation",
										"src": "10715:315:9",
										"text": " @dev Destroys `tokenId`.\n The approval is cleared when the token is burned.\n This is an internal function that does not check if the sender is authorized to operate on the token.\n Requirements:\n - `tokenId` must exist.\n Emits a {Transfer} event."
									},
									"id": 2336,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_burn",
									"nameLocation": "11044:5:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2273,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2272,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "11058:7:9",
												"nodeType": "VariableDeclaration",
												"scope": 2336,
												"src": "11050:15:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2271,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "11050:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "11049:17:9"
									},
									"returnParameters": {
										"id": 2274,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "11084:0:9"
									},
									"scope": 2613,
									"src": "11035:764:9",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2420,
										"nodeType": "Block",
										"src": "12202:1128:9",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 2352,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"arguments": [
																	{
																		"id": 2349,
																		"name": "tokenId",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2343,
																		"src": "12236:7:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"expression": {
																		"id": 2347,
																		"name": "LPToken",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2613,
																		"src": "12220:7:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_contract$_LPToken_$2613_$",
																			"typeString": "type(contract LPToken)"
																		}
																	},
																	"id": 2348,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "ownerOf",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 1814,
																	"src": "12220:15:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_address_$",
																		"typeString": "function (uint256) view returns (address)"
																	}
																},
																"id": 2350,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "12220:24:9",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"id": 2351,
																"name": "from",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2339,
																"src": "12248:4:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "12220:32:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "4c50546f6b656e3a207472616e736665722066726f6d20696e636f7272656374206f776e6572",
															"id": 2353,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "12254:40:9",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_1aba4d9565a9de9dd59a7e784dc928dd411203bc337af1a5bf922f3c2b5c7c83",
																"typeString": "literal_string \"LPToken: transfer from incorrect owner\""
															},
															"value": "LPToken: transfer from incorrect owner"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_1aba4d9565a9de9dd59a7e784dc928dd411203bc337af1a5bf922f3c2b5c7c83",
																"typeString": "literal_string \"LPToken: transfer from incorrect owner\""
															}
														],
														"id": 2346,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "12212:7:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 2354,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "12212:83:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2355,
												"nodeType": "ExpressionStatement",
												"src": "12212:83:9"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 2362,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2357,
																"name": "to",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2341,
																"src": "12313:2:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 2360,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "12327:1:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 2359,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "12319:7:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 2358,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "12319:7:9",
																		"typeDescriptions": {}
																	}
																},
																"id": 2361,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "12319:10:9",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "12313:16:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "4c50546f6b656e3a207472616e7366657220746f20746865207a65726f2061646472657373",
															"id": 2363,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "12331:39:9",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_7840becadfba5bfbf80c756d51d1daf6c018ee83ae5dc9914c9f5798baf751bc",
																"typeString": "literal_string \"LPToken: transfer to the zero address\""
															},
															"value": "LPToken: transfer to the zero address"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_7840becadfba5bfbf80c756d51d1daf6c018ee83ae5dc9914c9f5798baf751bc",
																"typeString": "literal_string \"LPToken: transfer to the zero address\""
															}
														],
														"id": 2356,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "12305:7:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 2364,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "12305:66:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2365,
												"nodeType": "ExpressionStatement",
												"src": "12305:66:9"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 2367,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2339,
															"src": "12403:4:9",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 2368,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2341,
															"src": "12409:2:9",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 2369,
															"name": "tokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2343,
															"src": "12413:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"hexValue": "31",
															"id": 2370,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "12422:1:9",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_1_by_1",
																"typeString": "int_const 1"
															},
															"value": "1"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_rational_1_by_1",
																"typeString": "int_const 1"
															}
														],
														"id": 2366,
														"name": "_beforeTokenTransfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2599,
														"src": "12382:20:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256,uint256)"
														}
													},
													"id": 2371,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "12382:42:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2372,
												"nodeType": "ExpressionStatement",
												"src": "12382:42:9"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 2379,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"arguments": [
																	{
																		"id": 2376,
																		"name": "tokenId",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2343,
																		"src": "12540:7:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"expression": {
																		"id": 2374,
																		"name": "LPToken",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2613,
																		"src": "12524:7:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_contract$_LPToken_$2613_$",
																			"typeString": "type(contract LPToken)"
																		}
																	},
																	"id": 2375,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "ownerOf",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 1814,
																	"src": "12524:15:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_address_$",
																		"typeString": "function (uint256) view returns (address)"
																	}
																},
																"id": 2377,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "12524:24:9",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"id": 2378,
																"name": "from",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2339,
																"src": "12552:4:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "12524:32:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "4552433732313a207472616e736665722066726f6d20696e636f7272656374206f776e6572",
															"id": 2380,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "12558:39:9",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48",
																"typeString": "literal_string \"ERC721: transfer from incorrect owner\""
															},
															"value": "ERC721: transfer from incorrect owner"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48",
																"typeString": "literal_string \"ERC721: transfer from incorrect owner\""
															}
														],
														"id": 2373,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "12516:7:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 2381,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "12516:82:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2382,
												"nodeType": "ExpressionStatement",
												"src": "12516:82:9"
											},
											{
												"expression": {
													"id": 2386,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "UnaryOperation",
													"operator": "delete",
													"prefix": true,
													"src": "12660:31:9",
													"subExpression": {
														"baseExpression": {
															"id": 2383,
															"name": "_tokenApprovals",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1632,
															"src": "12667:15:9",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_uint256_$_t_address_$",
																"typeString": "mapping(uint256 => address)"
															}
														},
														"id": 2385,
														"indexExpression": {
															"id": 2384,
															"name": "tokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2343,
															"src": "12683:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "12667:24:9",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2387,
												"nodeType": "ExpressionStatement",
												"src": "12660:31:9"
											},
											{
												"id": 2400,
												"nodeType": "UncheckedBlock",
												"src": "12702:496:9",
												"statements": [
													{
														"expression": {
															"id": 2392,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"baseExpression": {
																	"id": 2388,
																	"name": "_balances",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1628,
																	"src": "13135:9:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																		"typeString": "mapping(address => uint256)"
																	}
																},
																"id": 2390,
																"indexExpression": {
																	"id": 2389,
																	"name": "from",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2339,
																	"src": "13145:4:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": true,
																"nodeType": "IndexAccess",
																"src": "13135:15:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "-=",
															"rightHandSide": {
																"hexValue": "31",
																"id": 2391,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "13154:1:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_1_by_1",
																	"typeString": "int_const 1"
																},
																"value": "1"
															},
															"src": "13135:20:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 2393,
														"nodeType": "ExpressionStatement",
														"src": "13135:20:9"
													},
													{
														"expression": {
															"id": 2398,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"baseExpression": {
																	"id": 2394,
																	"name": "_balances",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1628,
																	"src": "13169:9:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																		"typeString": "mapping(address => uint256)"
																	}
																},
																"id": 2396,
																"indexExpression": {
																	"id": 2395,
																	"name": "to",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2341,
																	"src": "13179:2:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": true,
																"nodeType": "IndexAccess",
																"src": "13169:13:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "+=",
															"rightHandSide": {
																"hexValue": "31",
																"id": 2397,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "13186:1:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_1_by_1",
																	"typeString": "int_const 1"
																},
																"value": "1"
															},
															"src": "13169:18:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 2399,
														"nodeType": "ExpressionStatement",
														"src": "13169:18:9"
													}
												]
											},
											{
												"expression": {
													"id": 2405,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"id": 2401,
															"name": "_owners",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1624,
															"src": "13207:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_uint256_$_t_address_$",
																"typeString": "mapping(uint256 => address)"
															}
														},
														"id": 2403,
														"indexExpression": {
															"id": 2402,
															"name": "tokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2343,
															"src": "13215:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "13207:16:9",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 2404,
														"name": "to",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2341,
														"src": "13226:2:9",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "13207:21:9",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 2406,
												"nodeType": "ExpressionStatement",
												"src": "13207:21:9"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 2408,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2339,
															"src": "13253:4:9",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 2409,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2341,
															"src": "13259:2:9",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 2410,
															"name": "tokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2343,
															"src": "13263:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 2407,
														"name": "Transfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 14,
														"src": "13244:8:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 2411,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "13244:27:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2412,
												"nodeType": "EmitStatement",
												"src": "13239:32:9"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 2414,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2339,
															"src": "13302:4:9",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 2415,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2341,
															"src": "13308:2:9",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 2416,
															"name": "tokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2343,
															"src": "13312:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"hexValue": "31",
															"id": 2417,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "13321:1:9",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_1_by_1",
																"typeString": "int_const 1"
															},
															"value": "1"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_rational_1_by_1",
																"typeString": "int_const 1"
															}
														],
														"id": 2413,
														"name": "_afterTokenTransfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2612,
														"src": "13282:19:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256,uint256)"
														}
													},
													"id": 2418,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "13282:41:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2419,
												"nodeType": "ExpressionStatement",
												"src": "13282:41:9"
											}
										]
									},
									"documentation": {
										"id": 2337,
										"nodeType": "StructuredDocumentation",
										"src": "11805:313:9",
										"text": " @dev Transfers `tokenId` from `from` to `to`.\n  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n Requirements:\n - `to` cannot be the zero address.\n - `tokenId` token must be owned by `from`.\n Emits a {Transfer} event."
									},
									"id": 2421,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_transfer",
									"nameLocation": "12132:9:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2344,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2339,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "12150:4:9",
												"nodeType": "VariableDeclaration",
												"scope": 2421,
												"src": "12142:12:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2338,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "12142:7:9",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2341,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "12164:2:9",
												"nodeType": "VariableDeclaration",
												"scope": 2421,
												"src": "12156:10:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2340,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "12156:7:9",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2343,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "12176:7:9",
												"nodeType": "VariableDeclaration",
												"scope": 2421,
												"src": "12168:15:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2342,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "12168:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "12141:43:9"
									},
									"returnParameters": {
										"id": 2345,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "12202:0:9"
									},
									"scope": 2613,
									"src": "12123:1207:9",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2444,
										"nodeType": "Block",
										"src": "13506:108:9",
										"statements": [
											{
												"expression": {
													"id": 2433,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"id": 2429,
															"name": "_tokenApprovals",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1632,
															"src": "13516:15:9",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_uint256_$_t_address_$",
																"typeString": "mapping(uint256 => address)"
															}
														},
														"id": 2431,
														"indexExpression": {
															"id": 2430,
															"name": "tokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2426,
															"src": "13532:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "13516:24:9",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 2432,
														"name": "to",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2424,
														"src": "13543:2:9",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "13516:29:9",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 2434,
												"nodeType": "ExpressionStatement",
												"src": "13516:29:9"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"arguments": [
																{
																	"id": 2438,
																	"name": "tokenId",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2426,
																	"src": "13585:7:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"expression": {
																	"id": 2436,
																	"name": "LPToken",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2613,
																	"src": "13569:7:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_contract$_LPToken_$2613_$",
																		"typeString": "type(contract LPToken)"
																	}
																},
																"id": 2437,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "ownerOf",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 1814,
																"src": "13569:15:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_address_$",
																	"typeString": "function (uint256) view returns (address)"
																}
															},
															"id": 2439,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "13569:24:9",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 2440,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2424,
															"src": "13595:2:9",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 2441,
															"name": "tokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2426,
															"src": "13599:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 2435,
														"name": "Approval",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 23,
														"src": "13560:8:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 2442,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "13560:47:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2443,
												"nodeType": "EmitStatement",
												"src": "13555:52:9"
											}
										]
									},
									"documentation": {
										"id": 2422,
										"nodeType": "StructuredDocumentation",
										"src": "13336:101:9",
										"text": " @dev Approve `to` to operate on `tokenId`\n Emits an {Approval} event."
									},
									"id": 2445,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_approve",
									"nameLocation": "13451:8:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2427,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2424,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "13468:2:9",
												"nodeType": "VariableDeclaration",
												"scope": 2445,
												"src": "13460:10:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2423,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "13460:7:9",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2426,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "13480:7:9",
												"nodeType": "VariableDeclaration",
												"scope": 2445,
												"src": "13472:15:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2425,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "13472:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "13459:29:9"
									},
									"returnParameters": {
										"id": 2428,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "13506:0:9"
									},
									"scope": 2613,
									"src": "13442:172:9",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2476,
										"nodeType": "Block",
										"src": "13843:185:9",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 2458,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2456,
																"name": "owner",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2448,
																"src": "13861:5:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"id": 2457,
																"name": "operator",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2450,
																"src": "13870:8:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "13861:17:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "4c50546f6b656e3a20617070726f766520746f2063616c6c6572",
															"id": 2459,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "13880:28:9",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_a5ddc949369cb9b92239d895735ce26ab946db281ce04465e00baecb5de369c0",
																"typeString": "literal_string \"LPToken: approve to caller\""
															},
															"value": "LPToken: approve to caller"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_a5ddc949369cb9b92239d895735ce26ab946db281ce04465e00baecb5de369c0",
																"typeString": "literal_string \"LPToken: approve to caller\""
															}
														],
														"id": 2455,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "13853:7:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 2460,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "13853:56:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2461,
												"nodeType": "ExpressionStatement",
												"src": "13853:56:9"
											},
											{
												"expression": {
													"id": 2468,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"baseExpression": {
																"id": 2462,
																"name": "_operatorApprovals",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1638,
																"src": "13919:18:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_bool_$_$",
																	"typeString": "mapping(address => mapping(address => bool))"
																}
															},
															"id": 2465,
															"indexExpression": {
																"id": 2463,
																"name": "owner",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2448,
																"src": "13938:5:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "13919:25:9",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
																"typeString": "mapping(address => bool)"
															}
														},
														"id": 2466,
														"indexExpression": {
															"id": 2464,
															"name": "operator",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2450,
															"src": "13945:8:9",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "13919:35:9",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 2467,
														"name": "approved",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2452,
														"src": "13957:8:9",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"src": "13919:46:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 2469,
												"nodeType": "ExpressionStatement",
												"src": "13919:46:9"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 2471,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2448,
															"src": "13995:5:9",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 2472,
															"name": "operator",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2450,
															"src": "14002:8:9",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 2473,
															"name": "approved",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2452,
															"src": "14012:8:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														],
														"id": 2470,
														"name": "ApprovalForAll",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 32,
														"src": "13980:14:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_bool_$returns$__$",
															"typeString": "function (address,address,bool)"
														}
													},
													"id": 2474,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "13980:41:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2475,
												"nodeType": "EmitStatement",
												"src": "13975:46:9"
											}
										]
									},
									"documentation": {
										"id": 2446,
										"nodeType": "StructuredDocumentation",
										"src": "13620:125:9",
										"text": " @dev Approve `operator` to operate on all of `owner` tokens\n Emits an {ApprovalForAll} event."
									},
									"id": 2477,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_setApprovalForAll",
									"nameLocation": "13759:18:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2453,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2448,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "13786:5:9",
												"nodeType": "VariableDeclaration",
												"scope": 2477,
												"src": "13778:13:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2447,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "13778:7:9",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2450,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "13801:8:9",
												"nodeType": "VariableDeclaration",
												"scope": 2477,
												"src": "13793:16:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2449,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "13793:7:9",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2452,
												"mutability": "mutable",
												"name": "approved",
												"nameLocation": "13816:8:9",
												"nodeType": "VariableDeclaration",
												"scope": 2477,
												"src": "13811:13:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 2451,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "13811:4:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "13777:48:9"
									},
									"returnParameters": {
										"id": 2454,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "13843:0:9"
									},
									"scope": 2613,
									"src": "13750:278:9",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2490,
										"nodeType": "Block",
										"src": "14175:71:9",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"id": 2485,
																	"name": "tokenId",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2480,
																	"src": "14201:7:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 2484,
																"name": "_exists",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2114,
																"src": "14193:7:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_bool_$",
																	"typeString": "function (uint256) view returns (bool)"
																}
															},
															"id": 2486,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "14193:16:9",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "4c50546f6b656e3a20696e76616c696420746f6b656e204944",
															"id": 2487,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "14211:27:9",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_0de948d3f2800070ee485cb4e6ddea363a22e035a4bbf48d8192e08bacbc4871",
																"typeString": "literal_string \"LPToken: invalid token ID\""
															},
															"value": "LPToken: invalid token ID"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_0de948d3f2800070ee485cb4e6ddea363a22e035a4bbf48d8192e08bacbc4871",
																"typeString": "literal_string \"LPToken: invalid token ID\""
															}
														],
														"id": 2483,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "14185:7:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 2488,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "14185:54:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2489,
												"nodeType": "ExpressionStatement",
												"src": "14185:54:9"
											}
										]
									},
									"documentation": {
										"id": 2478,
										"nodeType": "StructuredDocumentation",
										"src": "14034:73:9",
										"text": " @dev Reverts if the `tokenId` has not been minted yet."
									},
									"id": 2491,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_requireMinted",
									"nameLocation": "14121:14:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2481,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2480,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "14144:7:9",
												"nodeType": "VariableDeclaration",
												"scope": 2491,
												"src": "14136:15:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2479,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "14136:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "14135:17:9"
									},
									"returnParameters": {
										"id": 2482,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "14175:0:9"
									},
									"scope": 2613,
									"src": "14112:134:9",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2552,
										"nodeType": "Block",
										"src": "14953:677:9",
										"statements": [
											{
												"condition": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"expression": {
															"id": 2505,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2496,
															"src": "14967:2:9",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"id": 2506,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "isContract",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 178,
														"src": "14967:13:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_bool_$bound_to$_t_address_$",
															"typeString": "function (address) view returns (bool)"
														}
													},
													"id": 2507,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "14967:15:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 2550,
													"nodeType": "Block",
													"src": "15588:36:9",
													"statements": [
														{
															"expression": {
																"hexValue": "74727565",
																"id": 2548,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "bool",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "15609:4:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																},
																"value": "true"
															},
															"functionReturnParameters": 2504,
															"id": 2549,
															"nodeType": "Return",
															"src": "15602:11:9"
														}
													]
												},
												"id": 2551,
												"nodeType": "IfStatement",
												"src": "14963:661:9",
												"trueBody": {
													"id": 2547,
													"nodeType": "Block",
													"src": "14984:598:9",
													"statements": [
														{
															"clauses": [
																{
																	"block": {
																		"id": 2527,
																		"nodeType": "Block",
																		"src": "15098:91:9",
																		"statements": [
																			{
																				"expression": {
																					"commonType": {
																						"typeIdentifier": "t_bytes4",
																						"typeString": "bytes4"
																					},
																					"id": 2525,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"leftExpression": {
																						"id": 2521,
																						"name": "retval",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 2519,
																						"src": "15123:6:9",
																						"typeDescriptions": {
																							"typeIdentifier": "t_bytes4",
																							"typeString": "bytes4"
																						}
																					},
																					"nodeType": "BinaryOperation",
																					"operator": "==",
																					"rightExpression": {
																						"expression": {
																							"expression": {
																								"id": 2522,
																								"name": "IERC721Receiver",
																								"nodeType": "Identifier",
																								"overloadedDeclarations": [],
																								"referencedDeclaration": 133,
																								"src": "15133:15:9",
																								"typeDescriptions": {
																									"typeIdentifier": "t_type$_t_contract$_IERC721Receiver_$133_$",
																									"typeString": "type(contract IERC721Receiver)"
																								}
																							},
																							"id": 2523,
																							"isConstant": false,
																							"isLValue": false,
																							"isPure": true,
																							"lValueRequested": false,
																							"memberName": "onERC721Received",
																							"nodeType": "MemberAccess",
																							"referencedDeclaration": 132,
																							"src": "15133:32:9",
																							"typeDescriptions": {
																								"typeIdentifier": "t_function_declaration_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_calldata_ptr_$returns$_t_bytes4_$",
																								"typeString": "function IERC721Receiver.onERC721Received(address,address,uint256,bytes calldata) returns (bytes4)"
																							}
																						},
																						"id": 2524,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": true,
																						"lValueRequested": false,
																						"memberName": "selector",
																						"nodeType": "MemberAccess",
																						"src": "15133:41:9",
																						"typeDescriptions": {
																							"typeIdentifier": "t_bytes4",
																							"typeString": "bytes4"
																						}
																					},
																					"src": "15123:51:9",
																					"typeDescriptions": {
																						"typeIdentifier": "t_bool",
																						"typeString": "bool"
																					}
																				},
																				"functionReturnParameters": 2504,
																				"id": 2526,
																				"nodeType": "Return",
																				"src": "15116:58:9"
																			}
																		]
																	},
																	"errorName": "",
																	"id": 2528,
																	"nodeType": "TryCatchClause",
																	"parameters": {
																		"id": 2520,
																		"nodeType": "ParameterList",
																		"parameters": [
																			{
																				"constant": false,
																				"id": 2519,
																				"mutability": "mutable",
																				"name": "retval",
																				"nameLocation": "15090:6:9",
																				"nodeType": "VariableDeclaration",
																				"scope": 2528,
																				"src": "15083:13:9",
																				"stateVariable": false,
																				"storageLocation": "default",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bytes4",
																					"typeString": "bytes4"
																				},
																				"typeName": {
																					"id": 2518,
																					"name": "bytes4",
																					"nodeType": "ElementaryTypeName",
																					"src": "15083:6:9",
																					"typeDescriptions": {
																						"typeIdentifier": "t_bytes4",
																						"typeString": "bytes4"
																					}
																				},
																				"visibility": "internal"
																			}
																		],
																		"src": "15082:15:9"
																	},
																	"src": "15074:115:9"
																},
																{
																	"block": {
																		"id": 2544,
																		"nodeType": "Block",
																		"src": "15218:354:9",
																		"statements": [
																			{
																				"condition": {
																					"commonType": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					},
																					"id": 2535,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"leftExpression": {
																						"expression": {
																							"id": 2532,
																							"name": "reason",
																							"nodeType": "Identifier",
																							"overloadedDeclarations": [],
																							"referencedDeclaration": 2530,
																							"src": "15240:6:9",
																							"typeDescriptions": {
																								"typeIdentifier": "t_bytes_memory_ptr",
																								"typeString": "bytes memory"
																							}
																						},
																						"id": 2533,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": false,
																						"lValueRequested": false,
																						"memberName": "length",
																						"nodeType": "MemberAccess",
																						"src": "15240:13:9",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"nodeType": "BinaryOperation",
																					"operator": "==",
																					"rightExpression": {
																						"hexValue": "30",
																						"id": 2534,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": true,
																						"kind": "number",
																						"lValueRequested": false,
																						"nodeType": "Literal",
																						"src": "15257:1:9",
																						"typeDescriptions": {
																							"typeIdentifier": "t_rational_0_by_1",
																							"typeString": "int_const 0"
																						},
																						"value": "0"
																					},
																					"src": "15240:18:9",
																					"typeDescriptions": {
																						"typeIdentifier": "t_bool",
																						"typeString": "bool"
																					}
																				},
																				"falseBody": {
																					"id": 2542,
																					"nodeType": "Block",
																					"src": "15368:190:9",
																					"statements": [
																						{
																							"AST": {
																								"nodeType": "YulBlock",
																								"src": "15454:86:9",
																								"statements": [
																									{
																										"expression": {
																											"arguments": [
																												{
																													"arguments": [
																														{
																															"kind": "number",
																															"nodeType": "YulLiteral",
																															"src": "15491:2:9",
																															"type": "",
																															"value": "32"
																														},
																														{
																															"name": "reason",
																															"nodeType": "YulIdentifier",
																															"src": "15495:6:9"
																														}
																													],
																													"functionName": {
																														"name": "add",
																														"nodeType": "YulIdentifier",
																														"src": "15487:3:9"
																													},
																													"nodeType": "YulFunctionCall",
																													"src": "15487:15:9"
																												},
																												{
																													"arguments": [
																														{
																															"name": "reason",
																															"nodeType": "YulIdentifier",
																															"src": "15510:6:9"
																														}
																													],
																													"functionName": {
																														"name": "mload",
																														"nodeType": "YulIdentifier",
																														"src": "15504:5:9"
																													},
																													"nodeType": "YulFunctionCall",
																													"src": "15504:13:9"
																												}
																											],
																											"functionName": {
																												"name": "revert",
																												"nodeType": "YulIdentifier",
																												"src": "15480:6:9"
																											},
																											"nodeType": "YulFunctionCall",
																											"src": "15480:38:9"
																										},
																										"nodeType": "YulExpressionStatement",
																										"src": "15480:38:9"
																									}
																								]
																							},
																							"documentation": "@solidity memory-safe-assembly",
																							"evmVersion": "london",
																							"externalReferences": [
																								{
																									"declaration": 2530,
																									"isOffset": false,
																									"isSlot": false,
																									"src": "15495:6:9",
																									"valueSize": 1
																								},
																								{
																									"declaration": 2530,
																									"isOffset": false,
																									"isSlot": false,
																									"src": "15510:6:9",
																									"valueSize": 1
																								}
																							],
																							"id": 2541,
																							"nodeType": "InlineAssembly",
																							"src": "15445:95:9"
																						}
																					]
																				},
																				"id": 2543,
																				"nodeType": "IfStatement",
																				"src": "15236:322:9",
																				"trueBody": {
																					"id": 2540,
																					"nodeType": "Block",
																					"src": "15260:102:9",
																					"statements": [
																						{
																							"expression": {
																								"arguments": [
																									{
																										"hexValue": "4c50546f6b656e3a207472616e7366657220746f206e6f6e20455243373231526563656976657220696d706c656d656e746572",
																										"id": 2537,
																										"isConstant": false,
																										"isLValue": false,
																										"isPure": true,
																										"kind": "string",
																										"lValueRequested": false,
																										"nodeType": "Literal",
																										"src": "15289:53:9",
																										"typeDescriptions": {
																											"typeIdentifier": "t_stringliteral_cd05f83da6940de4a3075fc9ad85b9137b64610f15df8549468ac7081d15bf47",
																											"typeString": "literal_string \"LPToken: transfer to non ERC721Receiver implementer\""
																										},
																										"value": "LPToken: transfer to non ERC721Receiver implementer"
																									}
																								],
																								"expression": {
																									"argumentTypes": [
																										{
																											"typeIdentifier": "t_stringliteral_cd05f83da6940de4a3075fc9ad85b9137b64610f15df8549468ac7081d15bf47",
																											"typeString": "literal_string \"LPToken: transfer to non ERC721Receiver implementer\""
																										}
																									],
																									"id": 2536,
																									"name": "revert",
																									"nodeType": "Identifier",
																									"overloadedDeclarations": [
																										4294967277,
																										4294967277
																									],
																									"referencedDeclaration": 4294967277,
																									"src": "15282:6:9",
																									"typeDescriptions": {
																										"typeIdentifier": "t_function_revert_pure$_t_string_memory_ptr_$returns$__$",
																										"typeString": "function (string memory) pure"
																									}
																								},
																								"id": 2538,
																								"isConstant": false,
																								"isLValue": false,
																								"isPure": false,
																								"kind": "functionCall",
																								"lValueRequested": false,
																								"names": [],
																								"nodeType": "FunctionCall",
																								"src": "15282:61:9",
																								"tryCall": false,
																								"typeDescriptions": {
																									"typeIdentifier": "t_tuple$__$",
																									"typeString": "tuple()"
																								}
																							},
																							"id": 2539,
																							"nodeType": "ExpressionStatement",
																							"src": "15282:61:9"
																						}
																					]
																				}
																			}
																		]
																	},
																	"errorName": "",
																	"id": 2545,
																	"nodeType": "TryCatchClause",
																	"parameters": {
																		"id": 2531,
																		"nodeType": "ParameterList",
																		"parameters": [
																			{
																				"constant": false,
																				"id": 2530,
																				"mutability": "mutable",
																				"name": "reason",
																				"nameLocation": "15210:6:9",
																				"nodeType": "VariableDeclaration",
																				"scope": 2545,
																				"src": "15197:19:9",
																				"stateVariable": false,
																				"storageLocation": "memory",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bytes_memory_ptr",
																					"typeString": "bytes"
																				},
																				"typeName": {
																					"id": 2529,
																					"name": "bytes",
																					"nodeType": "ElementaryTypeName",
																					"src": "15197:5:9",
																					"typeDescriptions": {
																						"typeIdentifier": "t_bytes_storage_ptr",
																						"typeString": "bytes"
																					}
																				},
																				"visibility": "internal"
																			}
																		],
																		"src": "15196:21:9"
																	},
																	"src": "15190:382:9"
																}
															],
															"externalCall": {
																"arguments": [
																	{
																		"arguments": [],
																		"expression": {
																			"argumentTypes": [],
																			"id": 2512,
																			"name": "_msgSender",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 502,
																			"src": "15039:10:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																				"typeString": "function () view returns (address)"
																			}
																		},
																		"id": 2513,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "15039:12:9",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"id": 2514,
																		"name": "from",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2494,
																		"src": "15053:4:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"id": 2515,
																		"name": "tokenId",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2498,
																		"src": "15059:7:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	{
																		"id": 2516,
																		"name": "data",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2500,
																		"src": "15068:4:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		{
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	],
																	"expression": {
																		"arguments": [
																			{
																				"id": 2509,
																				"name": "to",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 2496,
																				"src": "15018:2:9",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			],
																			"id": 2508,
																			"name": "IERC721Receiver",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 133,
																			"src": "15002:15:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_contract$_IERC721Receiver_$133_$",
																				"typeString": "type(contract IERC721Receiver)"
																			}
																		},
																		"id": 2510,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "15002:19:9",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_IERC721Receiver_$133",
																			"typeString": "contract IERC721Receiver"
																		}
																	},
																	"id": 2511,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "onERC721Received",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 132,
																	"src": "15002:36:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$_t_bytes4_$",
																		"typeString": "function (address,address,uint256,bytes memory) external returns (bytes4)"
																	}
																},
																"id": 2517,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "15002:71:9",
																"tryCall": true,
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes4",
																	"typeString": "bytes4"
																}
															},
															"id": 2546,
															"nodeType": "TryStatement",
															"src": "14998:574:9"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 2492,
										"nodeType": "StructuredDocumentation",
										"src": "14252:541:9",
										"text": " @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\n The call is not executed if the target address is not a contract.\n @param from address representing the previous owner of the given token ID\n @param to target address that will receive the tokens\n @param tokenId uint256 ID of the token to be transferred\n @param data bytes optional data to send along with the call\n @return bool whether the call correctly returned the expected magic value"
									},
									"id": 2553,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_checkOnERC721Received",
									"nameLocation": "14807:22:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2501,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2494,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "14847:4:9",
												"nodeType": "VariableDeclaration",
												"scope": 2553,
												"src": "14839:12:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2493,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "14839:7:9",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2496,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "14869:2:9",
												"nodeType": "VariableDeclaration",
												"scope": 2553,
												"src": "14861:10:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2495,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "14861:7:9",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2498,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "14889:7:9",
												"nodeType": "VariableDeclaration",
												"scope": 2553,
												"src": "14881:15:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2497,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "14881:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2500,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "14919:4:9",
												"nodeType": "VariableDeclaration",
												"scope": 2553,
												"src": "14906:17:9",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 2499,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "14906:5:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "14829:100:9"
									},
									"returnParameters": {
										"id": 2504,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2503,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2553,
												"src": "14947:4:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 2502,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "14947:4:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "14946:6:9"
									},
									"scope": 2613,
									"src": "14798:832:9",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "private"
								},
								{
									"body": {
										"id": 2598,
										"nodeType": "Block",
										"src": "16504:238:9",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 2567,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 2565,
														"name": "batchSize",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2562,
														"src": "16518:9:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"hexValue": "31",
														"id": 2566,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "16530:1:9",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_1_by_1",
															"typeString": "int_const 1"
														},
														"value": "1"
													},
													"src": "16518:13:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 2597,
												"nodeType": "IfStatement",
												"src": "16514:222:9",
												"trueBody": {
													"id": 2596,
													"nodeType": "Block",
													"src": "16533:203:9",
													"statements": [
														{
															"condition": {
																"commonType": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																},
																"id": 2573,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 2568,
																	"name": "from",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2556,
																	"src": "16551:4:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "!=",
																"rightExpression": {
																	"arguments": [
																		{
																			"hexValue": "30",
																			"id": 2571,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "16567:1:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			},
																			"value": "0"
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			}
																		],
																		"id": 2570,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "16559:7:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_address_$",
																			"typeString": "type(address)"
																		},
																		"typeName": {
																			"id": 2569,
																			"name": "address",
																			"nodeType": "ElementaryTypeName",
																			"src": "16559:7:9",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 2572,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "16559:10:9",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"src": "16551:18:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 2581,
															"nodeType": "IfStatement",
															"src": "16547:85:9",
															"trueBody": {
																"id": 2580,
																"nodeType": "Block",
																"src": "16571:61:9",
																"statements": [
																	{
																		"expression": {
																			"id": 2578,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftHandSide": {
																				"baseExpression": {
																					"id": 2574,
																					"name": "_balances",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1628,
																					"src": "16589:9:9",
																					"typeDescriptions": {
																						"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																						"typeString": "mapping(address => uint256)"
																					}
																				},
																				"id": 2576,
																				"indexExpression": {
																					"id": 2575,
																					"name": "from",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2556,
																					"src": "16599:4:9",
																					"typeDescriptions": {
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				},
																				"isConstant": false,
																				"isLValue": true,
																				"isPure": false,
																				"lValueRequested": true,
																				"nodeType": "IndexAccess",
																				"src": "16589:15:9",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "Assignment",
																			"operator": "-=",
																			"rightHandSide": {
																				"id": 2577,
																				"name": "batchSize",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 2562,
																				"src": "16608:9:9",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "16589:28:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"id": 2579,
																		"nodeType": "ExpressionStatement",
																		"src": "16589:28:9"
																	}
																]
															}
														},
														{
															"condition": {
																"commonType": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																},
																"id": 2587,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 2582,
																	"name": "to",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2558,
																	"src": "16649:2:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "!=",
																"rightExpression": {
																	"arguments": [
																		{
																			"hexValue": "30",
																			"id": 2585,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "16663:1:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			},
																			"value": "0"
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			}
																		],
																		"id": 2584,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "16655:7:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_address_$",
																			"typeString": "type(address)"
																		},
																		"typeName": {
																			"id": 2583,
																			"name": "address",
																			"nodeType": "ElementaryTypeName",
																			"src": "16655:7:9",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 2586,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "16655:10:9",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"src": "16649:16:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 2595,
															"nodeType": "IfStatement",
															"src": "16645:81:9",
															"trueBody": {
																"id": 2594,
																"nodeType": "Block",
																"src": "16667:59:9",
																"statements": [
																	{
																		"expression": {
																			"id": 2592,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftHandSide": {
																				"baseExpression": {
																					"id": 2588,
																					"name": "_balances",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1628,
																					"src": "16685:9:9",
																					"typeDescriptions": {
																						"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																						"typeString": "mapping(address => uint256)"
																					}
																				},
																				"id": 2590,
																				"indexExpression": {
																					"id": 2589,
																					"name": "to",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2558,
																					"src": "16695:2:9",
																					"typeDescriptions": {
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				},
																				"isConstant": false,
																				"isLValue": true,
																				"isPure": false,
																				"lValueRequested": true,
																				"nodeType": "IndexAccess",
																				"src": "16685:13:9",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "Assignment",
																			"operator": "+=",
																			"rightHandSide": {
																				"id": 2591,
																				"name": "batchSize",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 2562,
																				"src": "16702:9:9",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "16685:26:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"id": 2593,
																		"nodeType": "ExpressionStatement",
																		"src": "16685:26:9"
																	}
																]
															}
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 2554,
										"nodeType": "StructuredDocumentation",
										"src": "15636:705:9",
										"text": " @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is\n used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\n Calling conditions:\n - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.\n - When `from` is zero, the tokens will be minted for `to`.\n - When `to` is zero, ``from``'s tokens will be burned.\n - `from` and `to` are never both zero.\n - `batchSize` is non-zero.\n To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks]."
									},
									"id": 2599,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_beforeTokenTransfer",
									"nameLocation": "16355:20:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2563,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2556,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "16393:4:9",
												"nodeType": "VariableDeclaration",
												"scope": 2599,
												"src": "16385:12:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2555,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "16385:7:9",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2558,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "16415:2:9",
												"nodeType": "VariableDeclaration",
												"scope": 2599,
												"src": "16407:10:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2557,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "16407:7:9",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2560,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2599,
												"src": "16427:7:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2559,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "16427:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2562,
												"mutability": "mutable",
												"name": "batchSize",
												"nameLocation": "16471:9:9",
												"nodeType": "VariableDeclaration",
												"scope": 2599,
												"src": "16463:17:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2561,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "16463:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "16375:111:9"
									},
									"returnParameters": {
										"id": 2564,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "16504:0:9"
									},
									"scope": 2613,
									"src": "16346:396:9",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2611,
										"nodeType": "Block",
										"src": "17561:2:9",
										"statements": []
									},
									"documentation": {
										"id": 2600,
										"nodeType": "StructuredDocumentation",
										"src": "16748:695:9",
										"text": " @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\n used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\n Calling conditions:\n - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.\n - When `from` is zero, the tokens were minted for `to`.\n - When `to` is zero, ``from``'s tokens were burned.\n - `from` and `to` are never both zero.\n - `batchSize` is non-zero.\n To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks]."
									},
									"id": 2612,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_afterTokenTransfer",
									"nameLocation": "17457:19:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2609,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2602,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "17485:4:9",
												"nodeType": "VariableDeclaration",
												"scope": 2612,
												"src": "17477:12:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2601,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "17477:7:9",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2604,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "17499:2:9",
												"nodeType": "VariableDeclaration",
												"scope": 2612,
												"src": "17491:10:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2603,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "17491:7:9",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2606,
												"mutability": "mutable",
												"name": "firstTokenId",
												"nameLocation": "17511:12:9",
												"nodeType": "VariableDeclaration",
												"scope": 2612,
												"src": "17503:20:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2605,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "17503:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2608,
												"mutability": "mutable",
												"name": "batchSize",
												"nameLocation": "17533:9:9",
												"nodeType": "VariableDeclaration",
												"scope": 2612,
												"src": "17525:17:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2607,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "17525:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "17476:67:9"
									},
									"returnParameters": {
										"id": 2610,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "17561:0:9"
									},
									"scope": 2613,
									"src": "17448:115:9",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								}
							],
							"scope": 2614,
							"src": "745:16820:9",
							"usedErrors": []
						}
					],
					"src": "107:17459:9"
				},
				"id": 9
			}
		}
	}
}